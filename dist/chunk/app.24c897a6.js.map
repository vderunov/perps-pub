{"version":3,"file":"chunk/app.24c897a6.js","mappings":"0QAYO,SAASA,EAAWC,GACzB,OAAOC,OAAOC,YAAYD,OAAOE,QAAQH,GAAQI,MAAK,EAAEC,IAAKC,KAAOD,EAAEE,cAAcD,KACtF,CAOO,SAASE,EAAWC,GACzB,OAAOC,EAAAA,EAAAA,IAAmBX,EANrB,SAAqBC,GAC1B,MAAMW,EAAUV,OAAOE,QAAQH,GAAQY,QAAO,EAAE,CAAEC,UAAqBC,IAAVD,IAC7D,OAAOZ,OAAOC,YAAYS,EAC5B,CAGuCI,CAAYN,IACnD,CAMO,SAASO,IACd,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,MAWxC,MAAO,CATQC,EAAAA,SAAc,IAAMrB,EAxB9B,SAA8BkB,GACnC,OAAOhB,OAAOC,YAAYmB,MAAMC,KAAKL,GACvC,CAsBgDM,CAAqBN,KAAgB,CAACA,IAE/DG,EAAAA,aAClBX,IACCS,EAAgBV,EAAWC,GAAW,GAExC,CAACS,IAIL,C,8PCpCO,SAASM,IACd,OAAO,OAAEC,EAAM,eAAEC,GAAkBC,IAAYC,EAAAA,EAAAA,OACzC,QAAEC,EAAO,WAAEC,IAAeC,EAAAA,EAAAA,MAC1BC,EAAQZ,EAAAA,SAAc,IAAMK,EAAOQ,MAAMD,GAAUE,OAAOC,SAASH,EAAMI,GAAI,MAAQP,KAAYJ,EAAO,IAAI,CAACI,EAASJ,IAE5H,OACEY,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,QAAQ,OAAOC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IAAIP,SACnEP,EAAQA,EAAMe,MAAQ,cAEzBP,EAAAA,EAAAA,KAACQ,EAAAA,EAAQ,CAAAT,SACNd,GAAUA,EAAOwB,OAAS,GACzBT,EAAAA,EAAAA,KAAAU,EAAAA,SAAA,CAAAX,UACEC,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CACdC,MAAM,WACNC,KAAK,QACLC,aAActB,EAAMI,GACpBvB,MAAOmB,EAAMI,GACbmB,SAAWnB,IACT,GAAIV,GAAgBU,GAClBT,EAAS,CAAEE,QAAS,GAAGO,UAClB,CACL,MAAMoB,EAAY/B,EAAOQ,MAAMD,GAAUA,EAAMI,KAAO,GAAGA,MACnDqB,EAAcD,EAAYA,EAAUpB,GAAKX,EAAO,GAAGW,GACzDN,EAAWI,OAAOC,SAASsB,EAAa,IAC1C,GACAlB,SAEDd,EAAOiC,KAAI,EAAGtB,KAAIW,YACjBP,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAU9C,MAAOuB,EAAGG,SAChCQ,GADkBX,SAMzB,SAIZ,C,eC3CO,MAAMwB,EAAQA,KACnBpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAM,CACLC,OAAQ,o8F,4HCFL,SAASC,EAAYlD,EAAemD,GACzC,IAAKA,EACH,OAAOC,EAAAA,GAAiB3C,KAAK,GAE/B,MAAM4C,EAAgB,GAAGrD,IAAQsD,QAAQ,aAAc,IACvD,IAAKD,EACH,OAAOD,EAAAA,GAAiB3C,KAAK,GAE/B,IACE,OAAO2C,EAAAA,GAAwBC,EAAcE,OAAQJ,EACvD,CAAE,MACA,OAAOC,EAAAA,GAAiB3C,KAAK,EAC/B,CACF,CCbO,SAAS+C,EAAaC,EAA2BC,GAEtD,GADAC,QAAQC,IAAI,CAAEH,SAAQC,WAChBD,IAAUC,EACd,MAAO,GAET,GAAID,EAAOI,GAAG,GACZ,MAAO,QAAQH,EAAMI,SAEvB,MAAMC,EAAQ1C,OAAO2C,WAAWZ,EAAAA,GAAyBK,EAAQC,EAAMP,WAEvE,GADAQ,QAAQC,IAAI,QAASG,GACjBE,KAAKC,IAAIH,IAAU,EACrB,MAAO,GAAGA,EAAMI,QAAQ,MAAMT,EAAMI,SAEtC,MAAMM,EAAsB,IAARL,EACpB,GAAIE,KAAKC,IAAIE,IAAgB,EAC3B,MAAO,GAAGA,EAAYD,QAAQ,aAAaT,EAAMI,SAEnD,MAAMO,EAAqB,IAARN,EACnB,GAAIE,KAAKC,IAAIG,IAAe,EAC1B,MAAO,GAAGA,EAAWF,QAAQ,YAAYT,EAAMI,SAEjD,MAAMQ,EAAoB,IAARP,EAClB,GAAIE,KAAKC,IAAII,IAAc,EACzB,MAAO,GAAGA,EAAUH,QAAQ,WAAWT,EAAMI,SAE/C,MAAMS,EAAoB,KAARR,EAClB,OAAIE,KAAKC,IAAIK,IAAc,EAClB,GAAGA,EAAUJ,QAAQ,WAAWT,EAAMI,SAExC,GAAGC,EAAMI,QAAQ,MAAMT,EAAMI,QACtC,C,gBC7BOU,eAAeC,IAAgC,OACpDC,EAAM,kBACNC,EAAiB,UACjBC,EAAS,aACTC,IAOA,MAAMC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GACxFnB,QAAQuB,KAAK,mCACb,MAAMC,QAAmCJ,EAAUK,8BAA8BR,EAAWC,GAE5F,OADAlB,QAAQ0B,QAAQ,mCACTF,CACT,CCdO,SAASG,IAA8B,UAC5CV,EAAS,aACTC,IAKA,MAAMU,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aACtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GAAaC,GAC7FkB,SAAU,CAAClF,GAAgBU,GAAI,6BAA8B,CAAEqD,UAAWA,GAAWoB,cAAenB,iBACpGoB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GAAaC,GAChF,KAAM,OAGR,OAAOJ,GAAgC,CACrCC,SACAC,oBACAC,YACAC,gBACA,EAEJqB,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASjB,GAA+B/B,EAAAA,GAAiB3C,KAAK0E,IAElE,C,gBCnCO,SAASkB,KACd,OAAO,eAAExF,KAAoBE,EAAAA,EAAAA,OACrB2E,KAAMY,IAAWC,EAAAA,EAAAA,MACzB,OAAOX,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IACjCwE,SAAU,CAAClF,GAAgBU,GAAI,iBAC/B0E,QAASzB,UACP,IAAM3D,GAAgBU,KAAM+E,EAC1B,KAAM,OAER,OAAOlH,OAAOE,QAAQgH,GACnBvG,QACC,EAAEyG,EAAKxG,KACoB,KAAzByG,OAAOzG,GAAOoC,SAAkBoE,EAAIE,WAAW,kBAAqBF,EAAIE,WAAW,SAAWF,EAAIG,SAAS,aAE9G9D,KAAI,EAAE,CAAE7C,KAAWA,GAAgB,EAExC4G,UAAW,MAEf,CCnBO,SAASC,KACd,OAAO,OAAEnC,KAAYe,EAAAA,EAAAA,MACrB,OAAOlF,EAAAA,SAAc,KACnB,GAAImE,GAAQI,SACV,OAAO,IAAI1B,EAAAA,EAA8BsB,EAAOI,SAClD,GACC,CAACJ,GAAQI,UACd,CCNO,SAASgC,KACd,OAAO,eAAEjG,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,SACrCU,KAAMuB,IAAyBtB,EAAAA,EAAAA,IAAkB,gBAEzD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMwF,GAAiBrC,GAAQI,UAAYmC,GAC5ElB,SAAU,CAAClF,GAAgBU,GAAI,WAAY,CAAE2F,aAAcH,IAC3Dd,QAASzB,UACP,KAAM3D,GAAgBU,IAAMwF,GAAiBrC,GAAQI,UAAYmC,GAAuB,KAAM,OAC9F,MAAMnC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDqC,EAAe,IAAI/D,GAAAA,GAAgB6D,EAAqBjC,QAASiC,EAAqBhC,IAAKH,GAC3FsC,QAA8BD,EAAaE,UAAUN,GAC3D,GAAIK,EAAsBvD,GAAG,GAE3B,MAAO,GAET,MAAMyD,EAAiB9G,MAAMC,KAAKD,MAAM4G,EAAsBG,YAAYC,QAE1E,aADuBC,QAAQC,IAAIJ,EAAezE,KAAK8E,GAAMR,EAAaS,oBAAoBb,EAAeY,KAC9F,EAEjBvB,OAASY,GAAaA,EAASnE,KAAK+B,GAAcxB,EAAAA,GAAiB3C,KAAKmE,MAE5E,CCxBO,SAASiD,KACd,MAAQnC,KAAMsB,GAAaF,MACpB3H,GAAUgB,IAEjB,OAAOI,EAAAA,SAAc,KACnB,IAAKpB,EAAOyF,UACV,OAEF,IAAKoC,EACH,OAEF,MAAMpC,EAAYxB,EAAAA,GAAiB3C,KAAKtB,EAAOyF,WAC/C,OAAOoC,EAAS5F,MAAMG,GAAOqD,EAAUf,GAAGtC,IAAI,GAC7C,CAACyF,EAAU7H,EAAOyF,WACvB,CCfO,SAASkD,KACd,MAAQpC,KAAMqC,IAAWC,EAAAA,EAAAA,KACzB,OAAOzH,EAAAA,SAAc,KACnB,GAAIwH,EACF,OAAOA,EACJhI,QAAO,EAAGkI,uBAAwBA,IAClCpF,KAAI,EAAGqF,mBAAkBC,sBAAqBC,uBAAsBC,sBAAqBC,MAAW,IAChGA,EACHJ,iBAAkB9E,EAAAA,GAAiB3C,KAAKyH,GACxCC,oBAAqB/E,EAAAA,GAAiB3C,KAAK0H,GAC3CC,qBAAsBhF,EAAAA,GAAiB3C,KAAK2H,GAC5CC,iBAAkBjF,EAAAA,GAAiB3C,KAAK4H,MAE9C,GACC,CAACN,GACN,CCfO,SAASQ,KACd,MAAOpJ,GAAUgB,IACXqI,EAAmBV,KACzB,OAAOvH,EAAAA,SACL,IAAMiI,GAAkBpH,MAAMsC,GAAUvE,EAAOsJ,iBAAmB/E,EAAMsB,WACxE,CAACwD,EAAkBrJ,EAAOsJ,gBAE9B,CCPA,MAAMC,GAAQ,CAACtF,EAAAA,GAAiB3C,KAAK,MAE9B,SAASkI,KACd,MAAOxJ,GAAUgB,IAEjB,OAAOI,EAAAA,SAAc,KACnB,IAAKpB,EAAOyJ,OACV,OAAOxF,EAAAA,GAAiB3C,KAAK,KAE/B,MAAMmI,EAASxF,EAAAA,GAAiB3C,KAAKtB,EAAOyJ,QAC5C,OAAOF,GAAMtH,MAAMG,GAAOqH,EAAO/E,GAAGtC,IAAI,GACvC,CAACpC,EAAOyJ,QACb,CCFO,SAASC,IAAW,UAAEC,IAC3B,MAAMhE,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,QAEb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEtBtD,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMuD,GAAa5C,MACnBX,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMyD,IAA+BxD,EAAAA,EAAAA,IAAkB,sBAEzDyD,GAAcC,EAAAA,EAAAA,kBACpB,OAAOC,EAAAA,EAAAA,aAAY,CACjBC,OAAO,EACPC,WAAYhF,UACV,KAEIG,GACAuE,GACAC,GACAF,GACApI,GAAgBU,IAChBwF,GACAjC,GACAF,GACAgE,GACAH,GACAM,GAGF,KAAM,OAGR,GAAIU,EAAc5F,GAAG,GACnB,MAAM,IAAI6F,MAAM,mBAGlB,MAAMC,QAA4BC,EAAAA,EAAAA,IAAoB,CACpD9E,WACAoE,oBACAC,6BACAF,aAEFtF,QAAQC,IAAI,CAAE+F,wBAEd,MAAME,QAAiCpF,GAAgC,CACrEC,SACAC,oBACAC,YACAC,aAAckE,EAAY/D,UAE5BrB,QAAQC,IAAI,CAAEiG,6BAGd,IADyBA,EAAyBC,IAAIL,GAEpD,MAAM,IAAIC,MAAM,wBAAwBX,EAAYjF,UA0BtD,OAvBI6F,EAAoB3J,OACtB2D,QAAQC,IAAI,mCC/EbY,gBAA2C,OAChDE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,UACjBtE,EAAS,OACTgE,EAAM,aACN/D,EAAY,cACZ4E,EAAa,eACbM,IAgBA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,KAElEiF,EAAiB,CAErBtF,EACAgE,EACA/D,EACA4E,GAEF9F,QAAQC,IAAI,iBAAkBsG,GAE9B,MAAMC,EAAa,CACjBC,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,UAAW,IAEtDJ,IAELlK,MAAO,EACPuK,gBAAgB,GAElB5G,QAAQC,IAAI,aAAcuG,GAE1B,MAAMpD,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAE5B2D,EAAe,CACnBjK,KAAMsG,EACN4D,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBI,KACjFnK,MAAO+J,EAAe/J,OAExB2D,QAAQC,IAAI,CAAE8G,iBAEd/G,QAAQuB,KAAK,WACb,MAAM0F,QAAuCJ,EAAOK,gBAAgBH,GACpE/G,QAAQ0B,QAAQ,WAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CDEcG,CAA4B,CAChC1G,SACAC,oBACAuE,oBACAtE,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7ByE,gBACAM,eAAgBJ,MAGlBhG,QAAQC,IAAI,oBE3FbY,gBAA4B,OACjCE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,OACTgE,EAAM,aACN/D,EAAY,cACZ4E,IASA,MAAM1C,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAElFN,EAAiB,CAErBtF,EACAgE,EACA/D,EACA4E,GAEF9F,QAAQC,IAAI,CAAEsG,mBAEdvG,QAAQuB,KAAK,WACb,MAAM0F,QAAuC7F,EAAUsG,WAAWnB,GAClEvG,QAAQ0B,QAAQ,WAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CF4CcK,CAAa,CACjB5G,SACAC,oBACAC,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7ByE,mBAGG,CAAE8B,cAAc,EAAM,EAE/BrF,aAAeC,IAEbZ,EAAYY,GAAOqF,QACZ,GAET1C,UAAWtE,OAAS+G,mBACdA,SACInC,EAAYqC,kBAAkB,CAClC1F,SAAU,CAAClF,GAAgBU,GAAI,iBAAkB,CAAE0H,SAAUA,GAAUpG,KAAK6I,GAAMA,EAAEC,MAAM,EAAG,SAKjGvC,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,eACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,6BACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAckE,GAAa/D,YAIjCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CAAClF,GAAgBU,GAAI,yBAA0B,CAAEqD,UAAWA,GAAWoB,kBAGnF8C,GAAW,GAGjB,CGzIO,SAAS8C,IAAgB,UAC9BhH,EAAS,OACTgE,EAAM,aACN/D,IAMA,MAAMC,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,OAEZE,KAAMuD,GAAa5C,MACnBX,KAAMqE,IAAmB8B,EAAAA,EAAAA,IAAkB,CAAE/G,WAAUmE,eAExD,eAAEpI,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,aAEtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QACPjF,GAAgBU,IACdmD,GAAQI,UACRH,GACAuE,GACAtE,GACAgE,GACA/D,GACAkF,GAEJhE,SAAU,CAAClF,GAAgBU,GAAI,eAAgB,CAAEqD,UAAWA,GAAWoB,cAAenB,iBACtFoB,QAASzB,UACP,KAEI3D,GAAgBU,IAChBmD,GAAQI,UACRH,GACAuE,GACAtE,GACAgE,GACA/D,GACAkF,GAGF,KAAM,OAWR,OATApG,QAAQC,IAAI,CACVc,SACAC,oBACAuE,oBACAtE,YACAC,eACAkF,mBAGEA,EAAe/J,OACjB2D,QAAQC,IAAI,uCC/DbY,gBAAgD,OACrDE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,UACjBtE,EAAS,OACTgE,EAAM,aACN/D,EAAY,eACZkF,IAgBA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,WAElE,IAAIwC,SAASqE,GAAOC,WAAWD,EAAI,OAEzC,MAAME,EAAqB,CACzB5B,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,kBAAmB,CAAC1F,EAAWgE,EAAQ/D,IACvF7E,MAAO,EACPuK,gBAAgB,GAIlB5G,QAAQuB,KAAK,oCACb,MAAMJ,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDmH,QAAiBnH,EAASoH,KAAK,CACnCvB,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBiC,KACjFhM,MAAO+J,EAAe/J,QAKxB,GAHA2D,QAAQ0B,QAAQ,oCAChB1B,QAAQC,IAAI,CAAEqI,aAEVA,EAAU,CACZ,MAAME,EAAmBlC,EAAmBmC,qBAAqB,kBAAmBH,GAEpF,GADAtI,QAAQC,IAAI,CAAEuI,qBACVA,GAAkBE,aAAa,IAAIA,WAAY,CACjD,MAAMC,EAAyBH,EAAiBE,WAAW,GAAGA,WAG9D,OAFA1I,QAAQC,IAAI,CAAE0I,2BACOtC,EAAmBoC,qBAAqB,kBAAmBE,GAC5DC,IACtB,CAEA,MADA5I,QAAQwC,MAAM,CAAEgG,qBACV,IAAIzC,MAAM,gCAClB,CACA,MAAM,IAAIA,MAAM,2BAClB,CDKe8C,CAAiC,CACtC9H,SACAC,oBACAuE,oBACAtE,YACAgE,SACA/D,eACAkF,qBAGJpG,QAAQC,IAAI,wBE1EXY,gBAAiC,OACtCE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,OACTgE,EAAM,aACN/D,IAQA,MAAMC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GACxFnB,QAAQuB,KAAK,qBACb,MAAMuH,QAAqB1H,EAAU2H,WAAWC,gBAAgB/H,EAAWgE,EAAQ/D,GAEnF,OADAlB,QAAQ0B,QAAQ,qBACToH,CACT,CFwDaG,CAAkB,CACvBlI,SACAC,oBACAC,YACAgE,SACA/D,iBACA,EAEJqB,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASqG,GAAiBrJ,EAAAA,GAAiB3C,KAAKgM,GAChDlD,MAAO,EACPsD,WAAaC,GAAY,GAAKA,EAAU,KAE5C,CGvEO,SAASC,KACd,MAAMnI,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAM+G,GAAiBb,GAAgB,CAC7ChH,YACAgE,SACA/D,aAAc4D,GAAgBzD,WAGxBU,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEtBtD,KAAMsH,GAAwB1H,GAA8B,CAClEV,YACAC,aAAckE,GAAa/D,WAGtBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElDkI,EAAUxC,GAAW,CACzBC,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACFpC,EAAQqC,OAAOR,EAAa,EAC5BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,QACnDqH,EAAcA,EAAYjF,OAAS,MACzCtC,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,eAC9CC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAawJ,EAAqBjE,WAGpDsC,EAAQ6C,SACP1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAE2J,EAAQlF,MAAMqI,aAE3B,MAEJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACTnC,EAAQyD,QACR7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAW1D,EAAQ2D,UACnBC,aAAc/B,EAAagC,GAAG,IAAMlC,GAAuBA,EAAoBlD,IAAIoD,IAAexL,SAAA,CACnG,QACOqH,EAAcA,EAAYjF,OAAS,KACxCoJ,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAcnE,KAAiB,YAG1EvH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAaiJ,EAAc1D,aAK9C,CC9FO,SAASqG,KACd,MAAOjQ,EAAQkQ,GAAalP,IACtBqI,EAAmBV,KACnBwH,EAAyB/G,KAE/B,OACE/G,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CAACC,IAAK,EAAE1L,SAAA,EACZC,EAAAA,EAAAA,KAACgM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAC,YAG3DC,EAAAA,EAAAA,KAACwL,EAAAA,EAAK,CAACoC,cAAc,MAAMnC,IAAK,EAAE1L,SAC/B8G,GAAkB3F,KAAKa,IACtB/B,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAELU,KAAK,SACLT,QAASuN,GAAwBtK,UAAYtB,EAAMsB,aAAU/E,EAAY,UACzEuP,QAASA,IAAMH,EAAU,IAAKlQ,EAAQsJ,eAAgB/E,EAAMsB,UAAWtD,SAEtEgC,EAAMI,QALFJ,EAAMsB,eAWvB,CC3BOR,eAAeiL,IAAwB,OAC5C/K,EAAM,kBACNC,EAAiB,UACjBC,EAAS,OACTgE,EAAM,aACN/D,IAQA,MAAMC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GAExF,aADiCC,EAAU2K,sBAAsB9K,EAAWgE,EAAQ/D,EAEtF,CCNO,SAAS8K,IAAsB,UACpC7G,IAIA,MAAMhE,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,QAEb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMuD,GAAa5C,MACnBX,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMyD,IAA+BxD,EAAAA,EAAAA,IAAkB,sBAEzDyD,GAAcC,EAAAA,EAAAA,kBACpB,OAAOC,EAAAA,EAAAA,aAAY,CACjBC,OAAO,EACPC,WAAYhF,UACV,KAEIG,GACAuE,GACAC,GACAF,GACApI,GAAgBU,IAChBwF,GACAjC,GACAF,GACAgE,GACAH,GAGF,KAAM,OAGR,GAAImH,EAAoB/L,GAAG,GACzB,MAAM,IAAI6F,MAAM,mBAGlB,MAAMC,QAA4BC,EAAAA,EAAAA,IAAoB,CACpD9E,WACAoE,oBACAC,6BACAF,aAEFtF,QAAQC,IAAI,sBAAuB+F,GAEnC,MAAMkG,QAAwCpL,GAAgC,CAC5EC,SACAC,oBACAC,YACAC,aAAc4D,EAAezD,UAE/BrB,QAAQC,IAAI,kCAAmCiM,GAG/C,IADyBA,EAAgC/F,IAAI8F,GAE3D,MAAM,IAAIlG,MAAM,sBAGlB,MAAMoG,QAAgCL,GAAwB,CAC5D/K,SACAC,oBACAC,YACAgE,SACA/D,aAAc4D,EAAezD,UAE/BrB,QAAQC,IAAI,0BAA2BkM,GAEvC,MAAMC,EAAiBD,EAAwBE,IAAIJ,GA0BnD,OAzBAjM,QAAQC,IAAI,iBAAkBmM,GAE1BpG,EAAoB3J,OACtB2D,QAAQC,IAAI,8CC5FbY,gBAAiD,OACtDE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,UACjBtE,EAAS,OACTgE,EAAM,aACN/D,EAAY,eACZkL,EAAc,eACdhG,IAgBA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,KAElEgL,EAA4B,CAEhCrL,EACAgE,EACA/D,EACAkL,EACA3M,EAAAA,GAAwB,MAE1BO,QAAQC,IAAI,4BAA6BqM,GAEzC,MAAMC,EAAwB,CAC5B9F,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,qBAAsB,IAEjE2F,IAELjQ,MAAO,EACPuK,gBAAgB,GAElB5G,QAAQC,IAAI,CAAEsM,0BAEd,MAAMnJ,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAE5B2D,EAAe,CACnBjK,KAAMsG,EACN4D,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBmG,KACjFlQ,MAAO+J,EAAe/J,OAExB2D,QAAQC,IAAI,CAAE8G,iBAEd/G,QAAQuB,KAAK,sBACb,MAAM0F,QAAuCJ,EAAOK,gBAAgBH,GACpE/G,QAAQ0B,QAAQ,sBAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CDcckF,CAAkC,CACtCzL,SACAC,oBACAuE,oBACAtE,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7B+K,iBACAhG,eAAgBJ,MAGlBhG,QAAQC,IAAI,+BExGbY,gBAAkC,OACvCE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,OACTgE,EAAM,aACN/D,EAAY,eACZkL,IASA,MAAMhJ,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAElFyF,EAA4B,CAEhCrL,EACAgE,EACA/D,EACAkL,EACA3M,EAAAA,GAAwB,MAE1BO,QAAQC,IAAI,4BAA6BqM,GAEzCtM,QAAQuB,KAAK,sBACb,MAAM0F,QAAuC7F,EAAUqL,sBAAsBH,GAC7EtM,QAAQ0B,QAAQ,sBAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CFwDcmF,CAAmB,CACvB1L,SACAC,oBACAC,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7B+K,oBAGG,CAAExE,cAAc,EAAM,EAE/BrF,aAAeC,IAEbZ,EAAYY,GAAOqF,QACZ,GAET1C,UAAWtE,OAAS+G,mBACdA,SACInC,EAAYqC,kBAAkB,CAClC1F,SAAU,CAAClF,GAAgBU,GAAI,iBAAkB,CAAE0H,SAAUA,GAAUpG,KAAK6I,GAAMA,EAAEC,MAAM,EAAG,SAKjGvC,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,oBACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,6BACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,qBACA,CACEqD,UAAWA,GAAWoB,cACtB4C,OAAQA,GAAQ5C,cAChBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,eACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAKpC8D,GAAW,GAGjB,CG3KO,SAASuH,IAAsB,UACpCzL,EAAS,OACTgE,EAAM,aACN/D,IAMA,MAAMU,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aACtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GAAagE,GAAU/D,GACvGkB,SAAU,CACRlF,GAAgBU,GAChB,qBACA,CACEqD,UAAWA,GAAWoB,cACtB4C,OAAQA,GAAQ5C,cAChBnB,iBAGJoB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GAAagE,GAAU/D,GAC1F,KAAM,OAER,OAAO4K,GAAwB,CAC7B/K,SACAC,oBACAC,YACAgE,SACA/D,gBACA,EAEJqB,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASkK,GAAuBlN,EAAAA,GAAiB3C,KAAK6P,IAE1D,CC1BO,SAASC,KACd,MAAM3L,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAMP,GAA+BG,GAA8B,CACzEV,YACAC,aAAc4D,GAAgBzD,WAGxBU,KAAM4K,GAAuBD,GAAsB,CACzDzL,YACAgE,SACA/D,aAAc4D,GAAgBzD,WAGzBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElDqN,EAAWb,GAAsB,CACrC7G,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACF+C,EAAS9C,OAAOR,EAAa,EAC7BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,YAEzDF,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,eAC9CC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa8M,EAAoB7H,WAGnD+H,EAAStC,SACR1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAE8O,EAASrK,MAAMqI,aAE5B,MAEJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACTgD,EAAS1B,QACT7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAWyB,EAASxB,UACpBC,aAEI/B,EAAagC,GAAG,IAChB/J,GACAA,EAA2B2E,IAAIoD,IAC/BoD,GACAA,EAAmBN,IAAI9C,GAAcpD,IAAI,IAE5CpI,SAAA,CACF,WAEEwL,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAczE,KAAoB,YAG7EjH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa2B,EAA4BsD,aAK5D,CCtGOjE,eAAeiM,IAAoB,OACxC/L,EAAM,aACNG,EAAY,aACZqC,EAAY,eACZwJ,IAOA,MAAM5L,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UAE1D,OADc,IAAI1B,GAAAA,GAAgByB,EAAc,CAAC,6EAA8EC,GAClH6L,UAAUzJ,EAAcwJ,EACvC,CCdOlM,eAAeoM,IAAkB,OACtClM,EAAM,aACNG,EAAY,aACZqC,IAMA,MAAMpC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UAE1D,OADc,IAAI1B,GAAAA,GAAgByB,EAAc,CAAC,8DAA+DC,GACnGuC,UAAUH,EACzB,CCHO,SAAS2J,IAAW,UAAE/H,IAC3B,OAAO,eAAEjI,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aAEhDJ,GAAcC,EAAAA,EAAAA,MACd4D,GAAcC,EAAAA,EAAAA,kBACpB,OAAOC,EAAAA,EAAAA,aAAY,CACjBE,WAAYhF,UACV,KAAME,GAAUqC,GAAiBpC,GAAqB9D,GAAgBU,IAAMqD,GAAa6D,GACvF,KAAM,OAGR,GAAIqI,EAAcC,IAAI,GACpB,MAAM,IAAIrH,MAAM,mBAGlB,MAAMsH,QAAqBJ,GAAkB,CAC3ClM,SACAwC,aAAcH,EACdlC,aAAc4D,GAAgBzD,UAIhC,GAFArB,QAAQC,IAAI,eAAgBoN,GAExBA,EAAaC,GAAGH,GAClB,MAAM,IAAIpH,MAAM,sBAGlB,MAAMwH,QAAuBT,GAAoB,CAC/C/L,SACAwC,aAAcH,EACdlC,aAAc4D,GAAgBzD,QAC9B0L,eAAgB/L,GAAmBK,UAErCrB,QAAQC,IAAI,iBAAkBsN,GAE1BA,EAAeD,GAAGH,UCnDrBtM,gBAA4B,OACjCE,EAAM,aACNG,EAAY,eACZ6L,EAAc,UACdC,IAOA,MAAM5J,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BoK,EAAQ,IAAI/N,GAAAA,GAAgByB,EAAc,CAAC,oEAAqE2F,GAChHI,QAAuCuG,EAAMC,QAAQV,EAAgBC,GAC3EhN,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CDqBcoG,CAAa,CACjB3M,SACAG,aAAc4D,EAAezD,QAC7B0L,eAAgB/L,EAAkBK,QAClC2L,UAAWG,EAAcQ,IAAIJ,KAIjCvN,QAAQC,IAAI,8BE5DXY,gBAAiC,OACtCE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,aACTC,EAAY,cACZiM,IAQA,MAAM/J,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAE5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAClFI,QAAuC7F,EAAUwM,QAErD3M,EACAC,EACAiM,GAEFnN,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CFsBYuG,CAAkB,CACtB9M,SACAC,oBACAC,YACAC,aAAc4D,EAAezD,QAC7B8L,iBACA,EAEJ5K,aAAeC,IAEbZ,EAAYY,IACL,GAET2C,UAAWtE,UAET4E,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,6BACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,qBACA,CACEqD,UAAWA,GAAWoB,cACtB4C,OAAQA,GAAQ5C,cAChBnB,aAAc4D,GAAgBzD,YAKpC8D,GAAW,GAGjB,CGlGO,SAAS2I,IAAkB,aAChC5M,EAAY,aACZqC,EAAY,eACZwJ,IAMA,MAAMnL,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACrB,OAAOG,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYD,GAAgBqC,GAAgBwJ,GAC3F3K,SAAU,CAAClF,GAAgBU,GAAI,YAAa,CAAEsD,eAAcqC,eAAcwJ,mBAC1EzK,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAUG,GAAgBqC,GAAgBwJ,GACpE,KAAM,OAER,OAAOD,GAAoB,CACzB/L,SACAG,eACAqC,eACAwJ,kBACA,EAEJxK,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASuK,GAAcvN,EAAAA,GAAiB3C,KAAKkQ,GAC7Ce,gBAAiB,KAErB,CClCO,SAASC,IAAgB,aAC9B9M,EAAY,aACZqC,IAKA,MAAM3B,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACrB,OAAOG,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYD,GAAgBqC,GAC3EnB,SAAU,CAAClF,GAAgBU,GAAI,UAAW,CAAEsD,eAAcqC,iBAC1DjB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAUG,GAAgBqC,GACpD,KAAM,OAER,OAAO0J,GAAkB,CAAElM,SAAQG,eAAcqC,gBAAe,EAElEhB,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASwL,GAAYxO,EAAAA,GAAiB3C,KAAKmR,GAC3CF,gBAAiB,KAErB,CCRO,SAASG,KACd,OAAO,OAAEnN,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,MAEf7C,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMoM,GAAmBH,GAAgB,CAC/CzK,aAAcH,EACdlC,aAAc4D,GAAgBzD,WAGxBU,KAAMqM,GAAqBN,GAAkB,CACnDvK,aAAcH,EACdlC,aAAc4D,GAAgBzD,QAC9B0L,eAAgB/L,GAAmBK,WAG7BU,KAAMP,GAA+BG,GAA8B,CACzEV,YACAC,aAAc4D,GAAgBzD,WAGzBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElDoO,EAAUV,GAAW,CACzB/H,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACF8D,EAAQ7D,OAAOR,EAAa,EAC5BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,WAEzDF,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,eAC9CC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa2B,EAA4BsD,WAG3D8I,EAAQrD,SACP1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAE6P,EAAQpL,MAAMqI,aAE3B,MACJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACT+D,EAAQzC,QACR7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAWwC,EAAQvC,UACnBC,aAAc/B,EAAagC,GAAG,IAAM4C,GAAkBA,EAAeR,IAAIpE,GAAcpD,IAAI,IAAIpI,SAAA,CAE9FqQ,GAAkBjI,IAAIoD,GAAgB,UAAY,sBAClDA,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAczE,KAAoB,YAG7EjH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAasO,EAAgBrJ,aAKhD,CClFO,SAASuJ,KACd,OAAO,OAAEtN,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,MACVnC,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEtBtD,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMoM,GAAmBH,GAAgB,CAC/CzK,aAAcH,EACdlC,aAAckE,GAAa/D,WAGrBU,KAAMqM,GAAqBN,GAAkB,CACnDvK,aAAcH,EACdlC,aAAckE,GAAa/D,QAC3B0L,eAAgB/L,GAAmBK,WAG7BU,KAAMP,GAA+BG,GAA8B,CACzEV,YACAC,aAAckE,GAAa/D,WAGtBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAO+I,GAAa5F,UAE/CoO,EAAUV,GAAW,CACzB/H,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACF8D,EAAQ7D,OAAOR,EAAa,EAC5BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,WAChDqH,EAAcA,EAAYjF,OAAS,MAC5CtC,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,eAC9CC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa2B,EAA4B4D,WAG3DwI,EAAQrD,SACP1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAE6P,EAAQpL,MAAMqI,aAE3B,MACJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACT+D,EAAQzC,QACR7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAWwC,EAAQvC,UACnBC,aAAc/B,EAAagC,GAAG,IAAM4C,GAAkBA,EAAeR,IAAIpE,GAAcpD,IAAI,IAAIpI,SAAA,CAE9FqQ,GAAkBjI,IAAIoD,GAAgB,UAAY,sBAClDA,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAcnE,KAAiB,YAG1EvH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAasO,EAAgB/I,aAKhD,CClGO,SAASkJ,IAAmB,aACjCpN,IAIA,MAAMC,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,OAEZE,KAAMuD,GAAa5C,MACnBX,KAAMqE,IAAmB8B,EAAAA,EAAAA,IAAkB,CAAE/G,WAAUmE,eAExD,eAAEpI,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,aAEtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBuE,GAAqBrE,GAAgBkF,GACrHhE,SAAU,CAAClF,GAAgBU,GAAI,kBAAmB,CAAEsD,iBACpDoB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBuE,GAAqBrE,GAAgBkF,GACxG,KAAM,OAUR,OARApG,QAAQC,IAAI,CACVc,SACAC,oBACAuE,oBACArE,eACAkF,mBAGEA,EAAe/J,OACjB2D,QAAQC,IAAI,0CCtCbY,gBAAmD,OACxDE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,aACjBrE,EAAY,eACZkF,IAaA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,WAElE,IAAIwC,SAASqE,GAAOC,WAAWD,EAAI,OAEzC,MAAMoG,EAAwB,CAC5B9H,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,qBAAsB,CAACzF,IACvE7E,MAAO,EACPuK,gBAAgB,GAGlB5G,QAAQuB,KAAK,uCACb,MAAMJ,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UAEpDqN,QAAoBrN,EAASsN,iBAC7BC,QAAcvN,EAASwN,SAASH,GACtCxO,QAAQC,IAAI,CACVyO,QACAE,IAAKtO,KAAKuO,OAAM,IAAIC,MAAOC,UAAY,KACvC/H,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBmI,KACjFlS,MAAO+J,EAAe/J,QAGxB,MAAMiM,QAAiBnH,EAASoH,KAAK,CACnCvB,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBmI,KACjFlS,MAAO+J,EAAe/J,QAKxB,GAHA2D,QAAQ0B,QAAQ,uCAChB1B,QAAQC,IAAI,CAAEqI,aAEVA,EAAU,CACZ,MAAME,EAAmBlC,EAAmBmC,qBAAqB,kBAAmBH,GAEpF,GADAtI,QAAQC,IAAI,CAAEuI,qBACVA,GAAkBE,aAAa,IAAIA,WAAY,CACjD,MAAMsG,EAA4BxG,EAAiBE,WAAW,GAAGA,WACjE1I,QAAQC,IAAI,CAAE+O,8BACd,MAAMC,EAAkB5I,EAAmBoC,qBAAqB,qBAAsBuG,GAEtF,OADAhP,QAAQC,IAAI,wBAAyBgP,GAC9BA,EAAgB,EACzB,CAEA,MADAjP,QAAQwC,MAAM,CAAEgG,qBACV,IAAIzC,MAAM,gCAClB,CACA,MAAM,IAAIA,MAAM,2BAClB,CD1BemJ,CAAoC,CACzCnO,SACAC,oBACAuE,oBACArE,eACAkF,qBAGJpG,QAAQC,IAAI,2BE/CXY,gBAAoC,OACzCE,EAAM,kBACNC,EAAiB,aACjBE,IAMA,MAAMC,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GACxFnB,QAAQuB,KAAK,wBACb,MAAM0N,QAAwB7N,EAAU+N,mBAAmBjO,GAE3D,OADAlB,QAAQ0B,QAAQ,wBACTuN,CACT,CFiCaG,CAAqB,CAC1BrO,SACAC,oBACAE,iBACA,EAEJqB,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASwM,GAAoBxP,EAAAA,GAAiB3C,KAAKmS,GACnDrJ,MAAO,EACPsD,WAAaC,GAAY,GAAKA,EAAU,KAE5C,CGrDO,SAASkG,IAAW,UAAElK,IAC3B,MAAMhE,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,QAEb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEtBtD,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMuD,GAAa5C,MACnBX,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMyD,IAA+BxD,EAAAA,EAAAA,IAAkB,sBAEzDyD,GAAcC,EAAAA,EAAAA,kBACpB,OAAOC,EAAAA,EAAAA,aAAY,CACjBC,OAAO,EACPC,WAAYhF,UACV,KAEIG,GACAuE,GACAC,GACAF,GACApI,GAAgBU,IAChBmD,GACAqC,GACAjC,GACAF,GACAgE,GACAH,GAGF,KAAM,OAGR,GAAIwK,EAAcpP,GAAG,GACnB,MAAM,IAAI6F,MAAM,mBAGlB,MAAMC,QAA4BC,EAAAA,EAAAA,IAAoB,CACpD9E,WACAoE,oBACAC,6BACAF,aA2BF,OAzBAtF,QAAQC,IAAI,CAAE+F,wBAEVA,EAAoB3J,OACtB2D,QAAQC,IAAI,mCCjEbY,gBAA2C,OAChDE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,UACjBtE,EAAS,OACTgE,EAAM,aACN/D,EAAY,cACZoO,EAAa,eACblJ,IAgBA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,KAElEiO,EAAiB,CAErBtO,EACAgE,EACA/D,EACAoO,GAEFtP,QAAQC,IAAI,CAAEsP,mBAEd,MAAMC,EAAa,CACjB/I,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,UAAW,IAEtD4I,IAELlT,MAAO,EACPuK,gBAAgB,GAElB5G,QAAQC,IAAI,CAAEuP,eAEd,MAAMpM,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAE5B2D,EAAe,CACnBjK,KAAMsG,EACN4D,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgBoJ,KACjFnT,MAAO+J,EAAe/J,OAExB2D,QAAQC,IAAI,CAAE8G,iBAEd/G,QAAQuB,KAAK,WACb,MAAM0F,QAAuCJ,EAAOK,gBAAgBH,GACpE/G,QAAQ0B,QAAQ,WAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CDZcmI,CAA4B,CAChC1O,SACAC,oBACAuE,oBACAtE,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7BiO,gBACAlJ,eAAgBJ,MAGlBhG,QAAQC,IAAI,oBE7EbY,gBAA4B,OACjCE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,OACTgE,EAAM,aACN/D,EAAY,cACZoO,IASA,MAAMlM,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAElF0I,EAAiB,CAErBtO,EACAgE,EACA/D,EACAoO,GAEFtP,QAAQC,IAAI,iBAAkBsP,GAE9BvP,QAAQuB,KAAK,WACb,MAAM0F,QAAuC7F,EAAUsO,WAAWH,GAClEvP,QAAQ0B,QAAQ,WAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CF8BcqI,CAAa,CACjB5O,SACAC,oBACAC,YACAgE,SACA/D,aAAc4D,EAAezD,QAC7BiO,mBAGG,CAAE1H,cAAc,EAAM,EAE/BrF,aAAeC,IAEbZ,EAAYY,GAAOqF,QACZ,GAET1C,UAAWtE,OAAS+G,mBACdA,SACInC,EAAYqC,kBAAkB,CAClC1F,SAAU,CAAClF,GAAgBU,GAAI,iBAAkB,CAAE0H,SAAUA,GAAUpG,KAAK6I,GAAMA,EAAEC,MAAM,EAAG,SAKjGvC,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,eACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAc4D,GAAgBzD,YAIpCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,6BACA,CACEqD,UAAWA,GAAWoB,cACtBnB,aAAckE,GAAa/D,YAIjCoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CAAClF,GAAgBU,GAAI,yBAA0B,CAAEqD,UAAWA,GAAWoB,kBAGnF8C,GAAW,GAGjB,CG1GO,SAASyK,KACd,MAAM3O,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAM4K,GAAuBD,GAAsB,CACzDzL,YACAgE,SACA/D,aAAc4D,GAAgBzD,WAGxBU,KAAMkN,GAAoBX,GAAmB,CACnDpN,aAAc4D,GAAgBzD,WAGxBU,KAAM+G,GAAiBb,GAAgB,CAC7ChH,YACAgE,SACA/D,aAAc4D,GAAgBzD,UAE1BwO,EAAe/G,GAAcvI,MAAM4F,IAAI1G,EAAAA,GAAwB,MAAO,KAAOqJ,EAAerJ,EAAAA,GAAiB3C,KAAK,GAElHgT,EAAUlT,EAAAA,SAAc,KAC5B,GAAI+P,GAAsBsC,GAAmBnK,GAAkBgE,EAC7D,OAAO6D,EAAmBoD,IAAId,GAAiBe,IAAIlL,EAAeP,kBAAkBoJ,IAAI7E,EAC1F,GACC,CAAC6D,EAAoBsC,EAAiBnK,EAAgBgE,KAEjD/G,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEvBhJ,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElDkQ,EAAUL,GAAW,CACzBlK,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACF4F,EAAQ3F,OAAOR,EAAa,EAC5BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,QACnDqH,EAAcA,EAAYjF,OAAS,MACzCtC,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,UACnDC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAagQ,EAAczK,WAGxCsK,EAAQnF,SACP1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAE2R,EAAQlN,MAAMqI,aAE3B,MAEJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACT6F,EAAQvE,QACR7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACU,KAAK,SAASuM,UAAWsE,EAAQrE,UAAWC,aAAc/B,EAAagC,GAAG,IAAMuE,GAAWA,EAAQ3J,IAAIoD,IAAexL,SAAA,CAAC,QACvHqH,EAAcA,EAAYjF,OAAS,KACxCoJ,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAcnE,KAAiB,YAG1EvH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAaiQ,EAAS1K,aAKzC,CClGA,SAAS6K,IAAa,UACpBhP,EAAS,mBACTiP,IAuBA,MAAMC,EAAQjD,GAAW,CACvB/H,UAAWA,SAGPvD,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,SACrCU,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAE9CD,KAAMqO,IAAkBnO,EAAAA,EAAAA,UAAS,CACvCC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYiC,GAAiBpC,GAAqBC,GAAaiP,GAC9G9N,SAAU,CACRlF,GAAgBU,GAChB,mBACA,CACEqD,UAAWA,GAAWoB,cACtB6N,mBAAoBA,GAAoB7O,QACxCyD,eAAgBoL,GAAoBpL,gBAAgBzD,UAGxDiB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYiC,GAAiBpC,GAAqBC,GAAaiP,GACjG,KAAM,OAER,MACMrJ,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GACxF7G,QAAQuB,KAAK,uBACb,MAAM8O,QAAyBjP,EAAU2H,WAAWuH,aAClDrP,EACAiP,EAAmBjL,OACnBiL,EAAmBpL,eAAezD,QAClC6O,EAAmB7O,SAGrB,OADArB,QAAQ0B,QAAQ,uBACT2O,CAAgB,EAEzB5N,OAAS4N,GAAqB5Q,EAAAA,GAAiB3C,KAAKuT,GACpDtC,gBAAiB,MAGbtI,GAAcC,EAAAA,EAAAA,kBACd4K,GAAe3K,EAAAA,EAAAA,aAAY,CAC/BC,OAAO,EACPC,WAAYhF,UACV,KAAMG,GAAqB9D,GAAgBU,IAAMwF,GAAiBrC,GAAQI,UAAYF,GAAaiP,GACjG,KAAM,OAGR,MACMrJ,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAElF0J,EAAsB,CAE1BtP,EACAiP,EAAmBjL,OACnBiL,EAAmBpL,eAAezD,QAClC6O,EAAmB7O,SAErBrB,QAAQC,IAAI,CAAEsQ,wBAEdvQ,QAAQuB,KAAK,gBACb,MAAM0F,QAAuC7F,EAAUkP,gBAAgBC,GACvEvQ,QAAQ0B,QAAQ,gBAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAC1BvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,EACtB,EAEF/E,aAAeC,IAEbZ,EAAYY,IACL,GAET2C,UAAWtE,UAET4E,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,mBACA,CACEqD,UAAWA,GAAWoB,cACtB6N,mBAAoBA,GAAoB7O,QACxCyD,eAAgBoL,GAAoBpL,gBAAgBzD,YAI1DoE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,UACA,CACEsD,aAAcgP,GAAoBpL,gBAAgBzD,QAClDkC,aAAcH,KAGlB,IAIN,OACEpF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASuM,UAAW+E,EAAM9E,UAAWC,YAAa8E,GAAe7E,GAAG,GAAIM,QAASA,IAAMyE,EAAavG,SAAShM,SACvHqS,GAAe7E,GAAG,GACf,SAAS1L,EAAauQ,EAAeF,EAAmBM,eACxD,MAAMN,EAAmBM,YAAYrQ,gCAAgC+P,EAAmBpL,eAAe3E,UAGjH,CAEO,SAASsQ,KACd,MAAM3L,EAAiBF,KACjBK,EAASD,KACT/D,EAAYiD,MAEVnC,KAAM2O,IAAwBC,EAAAA,EAAAA,MACtC,OACE9S,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CAACC,IAAK,EAAE1L,SAAA,EACZC,EAAAA,EAAAA,KAACgM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAC,aAG3DC,EAAAA,EAAAA,KAAC+M,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAChB+G,GAAkB4L,GAAuBzL,GAAUhE,EAClDyP,EACGtU,QAAQwU,GAAOA,EAAG9L,eAAezD,QAAQwP,gBAAkB/L,EAAezD,QAAQwP,eAAiB5L,EAAO/E,GAAG0Q,EAAG3L,UAChH/F,KAAK0R,IAAO5S,EAAAA,EAAAA,KAACiS,GAAY,CAAkBC,mBAAoBU,EAAI3P,UAAWA,GAA/C2P,EAAGvP,YAErCxD,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACU,KAAK,SAASyM,YAAU,EAAAvN,SAAA,CAAC,wBACT+G,EAAiB,OAAOA,EAAe3E,SAAW,YAMpF,CChKO,SAAS2Q,KACd,MAAM7P,EAAYiD,KACZY,EAAiBF,KACjBK,EAASD,MAEPjD,KAAM4K,GAAuBD,GAAsB,CACzDzL,YACAgE,SACA/D,aAAc4D,GAAgBzD,WAGzBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElDuR,EAAa/E,GAAsB,CACvC7G,UAAWA,IAAMmE,EAAS,MAG5B,OACEzL,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACFiH,EAAWhH,OAAOR,EAAawG,KAAK,GAAG,EACvChS,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,cAEzDC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAC,SAI5DgT,EAAWxG,SACV1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAEgT,EAAWvO,MAAMqI,aAE9B,MAEJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACTkH,EAAW5F,QACX7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAW2F,EAAW1F,UACtBC,aAAc/B,EAAagC,GAAG,IAAMoB,GAAsBA,EAAmBgB,IAAIpE,GAAcpD,IAAI,IAAIpI,SAAA,CACxG,aAEEwL,EAAagC,GAAG,GAAK,IAAI1L,EAAa0J,EAAczE,KAAoB,YAG7EjH,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa8M,EAAoB7H,aAKpD,CChFO,SAASkM,IAAY,aAC1B9P,EAAY,UACZiE,IAKA,MAAMhE,EAAW+B,KACXtB,GAAcC,EAAAA,EAAAA,QAEb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,MAEVnC,KAAMuD,GAAa5C,MAEnBX,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMwD,IAAsBvD,EAAAA,EAAAA,IAAkB,cAC9CD,KAAMyD,IAA+BxD,EAAAA,EAAAA,IAAkB,sBAEzDyD,GAAcC,EAAAA,EAAAA,kBACpB,OAAOC,EAAAA,EAAAA,aAAY,CACjBC,OAAO,EACPC,WAAYhF,UACV,KAEIG,GACAuE,GACAC,GACAF,GACApI,GAAgBU,IAChBwF,GACAjC,GACAF,GACAC,GAGF,KAAM,OAGR,GAAI+P,EAAe/Q,GAAG,GACpB,MAAM,IAAI6F,MAAM,mBAGlB,MAAMC,QAA4BC,EAAAA,EAAAA,IAAoB,CACpD9E,WACAoE,oBACAC,6BACAF,aAEFtF,QAAQC,IAAI,sBAAuB+F,GAEnC,MAAMkG,QAAwCpL,GAAgC,CAC5EC,SACAC,oBACAC,YACAC,iBAEFlB,QAAQC,IAAI,kCAAmCiM,GAG/C,IADyBA,EAAgC/F,IAAI8K,GAE3D,MAAM,IAAIlL,MAAM,kCAwBlB,OArBIC,EAAoB3J,OACtB2D,QAAQC,IAAI,8CC5EbY,gBAAsD,OAC3DE,EAAM,kBACNC,EAAiB,kBACjBuE,EAAiB,UACjBtE,EAAS,aACTC,EAAY,eACZ+P,EAAc,eACd7K,IAeA,MAAMC,EAAqB,IAAI5G,GAAAA,GAAuBuB,EAAkBM,KAClEgF,EAAqB,IAAI7G,GAAAA,GAAuB8F,EAAkBjE,KAElE4P,EAA4B,CAEhCjQ,EACAC,EACA+P,GAEFjR,QAAQC,IAAI,CAAEiR,8BAEd,MAAMC,EAAwB,CAC5B1K,OAAQzF,EAAkBK,QAC1BqF,SAAUL,EAAmBM,mBAAmB,WAAY,IAEvDuK,IAEL7U,MAAO,EACPuK,gBAAgB,GAElB5G,QAAQC,IAAI,CAAEkR,0BAEd,MAAM/N,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAE5B2D,EAAe,CACnBjK,KAAMsG,EACN4D,GAAIzB,EAAkBlE,QACtBU,KAAMuE,EAAmBK,mBAAmB,kBAAmB,CAAC,CAACP,EAAgB+K,KACjF9U,MAAO+J,EAAe/J,OAExB2D,QAAQC,IAAI,CAAE8G,iBAEd/G,QAAQuB,KAAK,sBACb,MAAM0F,QAAuCJ,EAAOK,gBAAgBH,GACpE/G,QAAQ0B,QAAQ,sBAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CDEc8J,CAAuC,CAC3CrQ,SACAC,oBACAuE,oBACAtE,YACAC,eACA+P,iBACA7K,eAAgBJ,MAGlBhG,QAAQC,IAAI,+BEvFbY,gBAAuC,OAC5CE,EAAM,kBACNC,EAAiB,UACjBC,EAAS,aACTC,EAAY,eACZ+P,IAQA,MAAM7N,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCwF,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAElFqK,EAA4B,CAEhCjQ,EACAC,EACA+P,GAEFjR,QAAQC,IAAI,CAAEiR,8BAEdlR,QAAQuB,KAAK,sBACb,MAAM0F,QAAuC7F,EAAUiQ,YAAYH,GACnElR,QAAQ0B,QAAQ,sBAEhB1B,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAQ1B,OAPAvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGfA,CACT,CF2CcgK,CAAwB,CAC5BvQ,SACAC,oBACAC,YACAC,eACA+P,oBAGG,CAAErJ,cAAc,EAAM,EAE/BrF,aAAeC,IAEbZ,EAAYY,IACL,GAET2C,UAAWtE,OAAS+G,mBACdA,SACInC,EAAYqC,kBAAkB,CAClC1F,SAAU,CAAClF,GAAgBU,GAAI,iBAAkB,CAAE0H,SAAUA,GAAUpG,KAAK6I,GAAMA,EAAEC,MAAM,EAAG,SAKjGvC,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,oBACA,CACEqD,UAAWA,GAAWoB,cACtBnB,mBAINuE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,6BACA,CACEqD,UAAWA,GAAWoB,cACtBnB,mBAINuE,EAAYqC,kBAAkB,CAC5B1F,SAAU,CACRlF,GAAgBU,GAChB,UACA,CACEsD,eACAqC,aAAcH,MAKpB+B,GAAW,GAGjB,C,gBG/IO,SAASoM,KACd,MAAMtQ,EAAYiD,MACVnC,KAAMyP,GCFT,WACL,MAAM5P,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aAEtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYH,GAC3DoB,SAAU,CAAClF,GAAgBU,GAAI,qCAC/B0E,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYH,GAC9C,KAAM,OAER,MAAMG,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GAExFnB,QAAQuB,KAAK,6BACb,MAAMiQ,QAA+BpQ,EAAUqQ,cAAchS,GAAAA,EAAiC,2BAE9F,OADAO,QAAQ0B,QAAQ,6BACT8P,CAAsB,EAE/BjP,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAAS+O,GAA2B/R,EAAAA,GAAiB3C,KAAK0U,IAE9D,CD1B2CE,IACjC3P,KAAM4P,GEHT,UAAmC,UACxC1Q,IAIA,MAAMW,GAAcC,EAAAA,EAAAA,QACb,eAAE3E,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aAEtD,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GAChFmB,SAAU,CAAClF,GAAgBU,GAAI,yBAA0B,CAAEqD,UAAWA,GAAWoB,gBACjFC,QAASzB,UACP,KAAM3D,GAAgBU,IAAMmD,GAAQI,UAAYH,GAAqBC,GACnE,KAAM,OAER,MAAME,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKH,GAExFnB,QAAQuB,KAAK,6BACb,MAAMoQ,EAAyBvQ,EAAUwQ,0BAA0B3Q,GAEnE,OADAjB,QAAQ0B,QAAQ,6BACTiQ,CAAsB,EAE/BpP,aAAeC,IAEbZ,EAAYY,IACL,GAETC,OAASkP,GAA2BlS,EAAAA,GAAiB3C,KAAK6U,GAC1D5D,gBAAiB,KAErB,CF9B2C8D,CAA0B,CACjE5Q,cAEI6Q,EACJH,GAA0BH,EAAyBG,EAAuBtF,IAAImF,GAAwB5N,WAAa,GAC9GmO,EAAGC,GAAQpV,EAAAA,SAAe,IAC1BqV,EAAGC,GAAQtV,EAAAA,SAAe,IAC1BuV,EAAGC,GAAQxV,EAAAA,SAAe,GAoBjC,OAlBAA,EAAAA,WAAgB,KACd,MAAMyV,EAAWlL,OAAOmL,aAAY,KAClC,MAAMC,EAAgBT,EAAiBA,EAAiBxR,KAAKuO,MAAMC,KAAKF,MAAQ,KAAQ,EAClF4D,EAAQlS,KAAKmS,IAAI,EAAGnS,KAAKuO,MAAM0D,EAAgB,OAC/CG,EAAUpS,KAAKmS,IAAI,EAAGnS,KAAKuO,OAAO0D,EAAwB,KAARC,GAAgB,KAClEG,EAAUrS,KAAKmS,IAAI,EAAGF,EAAwB,KAARC,EAAyB,GAAVE,GAC7C,IAAVF,GAA2B,IAAZE,GAA6B,IAAZC,GAClCxL,OAAOyL,cAAcP,GAEvBL,EAAKQ,GACLN,EAAKQ,GACS,IAAVF,GAA2B,IAAZE,GACjBN,EAAKO,EACP,GACC,KACH,MAAO,IAAMxL,OAAOyL,cAAcP,EAAS,GAC1C,CAACP,IAEG,CAAEC,IAAGE,IAAGE,IACjB,CGZO,SAASU,KACd,OAAO,OAAE9R,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,KACZY,EAAiBF,MAEf7C,KAAMP,GAA+BG,GAA8B,CACzEV,YACAC,aAAc4D,GAAgBzD,WAGxBU,KAAMoM,GAAmBH,GAAgB,CAC/CzK,aAAcH,EACdlC,aAAc4D,GAAgBzD,WAGzBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAOyI,GAAgBtF,UAElD6R,EAAWL,GAAY,CAC3B9P,aAAc4D,GAAgBzD,QAC9B8D,UAAWA,IAAMmE,EAAS,MAGtBwJ,EAAgBvB,KAEtB,OACE1T,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACFuH,EAAStH,OAAOR,EAAa,EAC7BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,YAC/C+G,EAAiBA,EAAe3E,OAAS,MACnDtC,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,aAChDC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAasO,EAAgBrJ,WAG7CuM,EAAS9G,SACR1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAEsT,EAAS7O,MAAMqI,aAE5B,MACJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACTwH,EAASlG,QACT7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAWiG,EAAShG,UACpBC,aAEI/B,EAAagC,GAAG,IAChB/J,GACAA,EAA2BmM,IAAIpE,GAAcpD,IAAI,IAC7B,IAApB2M,EAAcf,GACM,IAApBe,EAAcb,GACM,IAApBa,EAAcX,GAEjBpU,SAAA,CACF,WAEsB,IAApB+U,EAAcf,GAA+B,IAApBe,EAAcb,GAA+B,IAApBa,EAAcX,GAC7D5I,EAAagC,GAAG,GACd,IAAI1L,EAAa0J,EAAczE,KAEjC,KACiB,IAApBgO,EAAcf,GAA+B,IAApBe,EAAcb,GAAWa,EAAcX,EAAI,EAAI,OAAOW,EAAcX,KAAO,KAChF,IAApBW,EAAcf,GAAWe,EAAcb,EAAI,EAAI,OAAOa,EAAcb,KAAO,KAC3Ea,EAAcf,EAAI,EAAI,OAAOe,EAAcf,KAAO,YAGvDlU,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa2B,EAA4BsD,aAK5D,CC7FO,SAASiO,KACd,OAAO,OAAEhS,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QAEvCJ,EAAYiD,MACVnC,KAAMqD,IAAgBC,EAAAA,EAAAA,OAEtBtD,KAAMP,GAA+BG,GAA8B,CACzEV,YACAC,aAAckE,GAAa/D,WAGrBU,KAAMoM,GAAmBH,GAAgB,CAC/CzK,aAAcH,EACdlC,aAAckE,GAAa/D,WAGtBhF,EAAOiN,GAAY1M,EAAAA,SAAe,IACnC2M,EAAehK,EAAYlD,EAAO+I,GAAa5F,UAE/C6R,EAAWL,GAAY,CAC3B9P,aAAckE,GAAa/D,QAC3B8D,UAAWA,IAAMmE,EAAS,MAGtBwJ,EAAgBvB,KAEtB,OACE1T,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CACJC,IAAK,EACLvL,GAAG,OACHwL,OAAO,OACPC,OAAO,IACPC,SAAWC,IACTA,EAAEC,iBACFuH,EAAStH,OAAOR,EAAa,EAC7BxL,SAAA,EAEFF,EAAAA,EAAAA,MAACmM,EAAAA,EAAO,CAACC,MAAM,UAAUC,SAAS,OAAOC,WAAW,OAAMpM,SAAA,CAAC,YAC/CqH,EAAcA,EAAYjF,OAAS,MAC7CtC,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAAClM,GAAG,OAAOmM,GAAI,EAAGH,SAAS,OAAOI,WAAW,SAAQvM,SAAA,CAAC,aAChDC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAasO,EAAgB/I,WAG7CiM,EAAS9G,SACR1M,EAAAA,EAAAA,MAAC2M,EAAAA,EAAK,CAACC,OAAO,QAAQC,SAAS,QAAO3M,SAAA,EACpCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAS,KACV3M,EAAAA,EAAAA,KAAC4M,EAAAA,EAAU,CAAA7M,SAAEsT,EAAS7O,MAAMqI,aAE5B,MACJhN,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAAA/M,SAAA,EACVF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAACtB,IAAK,EAAE1L,SAAA,EACjBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CACJC,UAAQ,EACRC,YAAY,eACZ7O,MAAOA,EACP0C,SAAW8K,IACTwH,EAASlG,QACT7B,EAASO,EAAEpD,OAAOpK,MAAM,EAE1BqO,SAAS,WAEX7M,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CACLU,KAAK,SACLuM,UAAWiG,EAAShG,UACpBC,aAEI/B,EAAagC,GAAG,IAChB/J,GACAA,EAA2BmM,IAAIpE,GAAcpD,IAAI,IAC7B,IAApB2M,EAAcf,GACM,IAApBe,EAAcb,GACM,IAApBa,EAAcX,GAEjBpU,SAAA,CACF,WAEsB,IAApB+U,EAAcf,GAA+B,IAApBe,EAAcb,GAA+B,IAApBa,EAAcX,GAC7D5I,EAAagC,GAAG,GACd,IAAI1L,EAAa0J,EAAcnE,KAEjC,KACiB,IAApB0N,EAAcf,GAA+B,IAApBe,EAAcb,GAAWa,EAAcX,EAAI,EAAI,OAAOW,EAAcX,KAAO,KAChF,IAApBW,EAAcf,GAAWe,EAAcb,EAAI,EAAI,OAAOa,EAAcb,KAAO,KAC3Ea,EAAcf,EAAI,EAAI,OAAOe,EAAcf,KAAO,YAGvDlU,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,SACTC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,EAAa2B,EAA4B4D,aAK5D,CCvGO,SAAS4N,KACd,OACEnV,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACC,QAAQ,SAASC,GAAI,GAAI1J,IAAK,GAAG1L,SAAA,EACrCF,EAAAA,EAAAA,MAACuV,EAAAA,EAAM,CAAArV,SAAA,EACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,4BACPC,EAAAA,EAAAA,KAAA,QAAMqV,KAAK,cAAcC,QAAQ,iCAEnCtV,EAAAA,EAAAA,KAACyS,GAAO,KACRzS,EAAAA,EAAAA,KAACyN,GAAgB,KACjBzN,EAAAA,EAAAA,KAACkQ,GAAO,KACRlQ,EAAAA,EAAAA,KAACqQ,GAAU,KACXxQ,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACC,QAAQ,MAAMzJ,IAAK,GAAG1L,SAAA,EAC1BC,EAAAA,EAAAA,KAAC4O,GAAQ,KACT5O,EAAAA,EAAAA,KAAC8S,GAAU,QAEbjT,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACC,QAAQ,MAAMzJ,IAAK,GAAG1L,SAAA,EAC1BC,EAAAA,EAAAA,KAAC4R,GAAO,KACR5R,EAAAA,EAAAA,KAACoL,GAAO,QAEVpL,EAAAA,EAAAA,KAAC6U,GAAkB,KACnB7U,EAAAA,EAAAA,KAAC+U,GAAW,MAGlB,CCjCO,MAAMQ,GAAeA,KAExB1V,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACwV,EAAAA,EAAI,CAAAzV,UACHC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,iBAETF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACQ,OAAO,OAAOC,UAAU,SAASC,SAAS,WAAWC,WAAW,SAASC,eAAe,SAASC,KAAK,IAAG/V,SAAA,EAC7GC,EAAAA,EAAAA,KAACgM,EAAAA,EAAO,CAACE,SAAS,MAAKnM,SAAC,eAExBC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAAC7V,GAAI8V,EAAAA,GAAShN,GAAG,IAAIiD,MAAM,WAAUlM,SAAC,yB,4BCV5C,SAASkW,KAGd,OACEjW,EAAAA,EAAAA,KAACkW,GAAAA,GAAG,CAACT,OAAO,OAAOU,EAAE,OAAMpW,UACzBC,EAAAA,EAAAA,KAACoW,GAAAA,GAAqB,CACpBC,MAAM,OACNC,UAAQ,EACRnU,OAAQ,QAPO,OAOeoU,sBAItC,C,wFCbO,SAASC,GAAgBvT,GAC9B,IAAKA,EACH,MAAO,MAET,MAAMwT,EAAMxT,EAAUoB,cAEtB,OAAmB,KAAfoS,EAAIhW,OACC,QAAQgW,EAAIzM,OAAO,KAErB,IAAI/G,GACb,CCPO,SAASyT,KACd,OAAO,eAAExX,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,SACrCU,KAAM4S,IAA8B3S,EAAAA,EAAAA,IAAkB,qBAE9D,OAAOC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMwF,GAAiBrC,GAAQI,UAAYwT,GAC5EvS,SAAU,CAAClF,GAAgBU,GAAI,WAAY,CAAE2F,aAAcH,IAC3Dd,QAASzB,UACP,KAAM3D,GAAgBU,IAAMwF,GAAiBrC,GAAQI,UAAYwT,GAA4B,KAAM,OACnG,MAAMxT,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpDyT,EAAoB,IAAInV,GAAAA,GAAgBkV,EAA0BtT,QAASsT,EAA0BrT,IAAKH,GAC1GsC,QAA8BmR,EAAkBlR,UAAUN,GAChE,GAAIK,EAAsBvD,GAAG,GAE3B,MAAO,GAET,MAAMyD,EAAiB9G,MAAMC,KAAKD,MAAM4G,EAAsBG,YAAYC,QAE1E,aADuBC,QAAQC,IAAIJ,EAAezE,KAAK8E,GAAM4Q,EAAkB3Q,oBAAoBb,EAAeY,KACnG,EAEjBvB,OAASY,GAAaA,EAASnE,KAAK+B,GAAcxB,EAAAA,GAAiB3C,KAAKmE,MAE5E,CCvBO,SAAS4T,KACd,MAAOrZ,EAAQkQ,GAAalP,MACrB,eAAEU,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QACvCoE,GAAcC,EAAAA,EAAAA,mBACZ3D,KAAM+S,IAA6B9S,EAAAA,EAAAA,IAAkB,oBAE7D,OAAO2D,EAAAA,EAAAA,aAAY,CACjBE,WAAYhF,UACV,KAAM3D,GAAgBU,IAAMkX,GAA4B1R,GAAiBrC,GAAQI,UAAW,KAAM,OAClG,MACM0F,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5B2R,EAAmB,IAAItV,GAAAA,GAAgBqV,EAAyBzT,QAASyT,EAAyBxT,IAAKuF,GACvGI,QAAuC8N,EAAiB,qBAC9D/U,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAC1BvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGtB,MAAM0N,EAAQ1N,EAAS2N,QAAQxX,MAAMoM,GAAkB,mBAAZA,EAAEmL,QAC7C,GAAIA,EAAO,CACT,MAAM/T,EAAY+T,GAAOE,MAAMjU,WAAWkU,WACtClU,IACFwE,EAAY2P,aAAa,CAAClY,EAAeU,GAAI,WAAY,CAAE2F,aAAcH,KAAmBiS,GAC1FA,EAAQC,OAAO,CAACrU,MAElByK,EAAU,IAAKlQ,EAAQyF,UAAWA,EAAUoB,gBAEhD,CAEA,OAAOiF,CAAQ,GAGrB,CCvCO,SAASiO,KACd,OAAO,OAAEtY,EAAM,eAAEC,GAAkBC,IAAYC,EAAAA,EAAAA,QACxC,OAAE2D,GAAUyU,EAASC,IAAc3T,EAAAA,EAAAA,MAEpC4T,EAAmB9Y,EAAAA,SAAc,IAC9BK,EAAO0Y,MAAMnY,GAAUA,EAAMI,KAAOV,GAAgBU,MAC1D,CAACX,EAAQC,GAAgBU,MAErBpC,EAAQkQ,GAAalP,KACpBuF,KAAMsB,GAAaqR,KACrBkB,EAAgBf,KAChB5T,EAAYiD,KAElB,OACErG,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,CACIgD,EAIE,MAHF/C,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM2J,IAAUzX,SAAC,YAIjDgD,IAAW2U,GACV7X,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM1O,EAAS,CAAEE,QAASJ,EAAO,GAAGW,KAAMG,SAAA,CAAC,aAC7Dd,EAAO,GAAGsB,SAErB,KACH8E,IAAaA,EAAS5E,QACrBT,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM+J,EAAc7L,SAAShM,SAAC,mBAG3D,KAEHgD,GAAQsC,WAAW,IAAIhC,SACtBxD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,QAAQ,OAAOC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IAAIP,SAAA,CACnEgD,EAAOsC,SAAS,GAAGhC,QAAQ2G,MAAM,EAAG,GAAG,QAAMjH,EAAOsC,SAAS,GAAGhC,QAAQ2G,OAAO,OAElFnK,EAAAA,EAAAA,MAACW,EAAAA,EAAQ,CAAAT,SAAA,EACPC,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAMiK,UAAUC,UAAUC,UAAUjV,EAAOsC,SAAS,GAAGhC,SAAStD,SAAC,iBAEnFsF,GAAYA,EAAS5E,OAAS,GAC7BZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CACdC,MAAM,WACNC,KAAK,QACLC,aAAcmC,GAAWoB,eAAiB,GAC1ChG,MAAO4E,GAAWoB,eAAiB,GACnCtD,SAAW1C,GAAUqP,EAAU,IAAKlQ,EAAQyF,UAAW,GAAG5E,MAAW0B,SAEpEsF,EAASnE,KAAKtB,IACbI,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAwB9C,MAAOuB,EAAGyE,cAActE,SAC5DyW,GAAgB5W,IADEA,EAAGyE,sBAM5B,KACHgB,IAAaA,EAAS5E,QACrBZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CAACC,MAAM,WAAWC,KAAK,QAAQC,aAAa,IAAGf,UAC7DC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAC9C,MAAM,IAAG0B,SAAC,qBAG5B,MAEJC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAM4J,EAAW,CAAElX,MAAOwC,EAAOxC,QAASR,SAAC,qBAGhE,OAGV,CC/EO,SAASmY,KACd,MAAOC,EAAWC,GAAgBxZ,EAAAA,SAAe,SAC1CyZ,EAASC,GAAc1Z,EAAAA,SAAe,KACtC2Z,EAAYC,GAAiB5Z,EAAAA,SAAe,KAC5C6Z,EAAUC,GAAe9Z,EAAAA,SAAe,KACxC+Z,EAAQC,GAAaha,EAAAA,SAAe,OAwB3C,OACEiB,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACuX,GAAa,KACd1X,EAAAA,EAAAA,MAACqW,GAAAA,GAAG,CAACnM,EAAG,EAAG8O,OAAO,YAAYC,YAAY,WAAWC,aAAa,KAAIhZ,SAAA,EACpEF,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAACqI,GAAI,EAAEpV,SAAA,EACnBC,EAAAA,EAAAA,KAACgZ,GAAAA,EAAS,CAAAjZ,SAAC,YACXC,EAAAA,EAAAA,KAACiZ,GAAAA,EAAM,CAAC/L,YAAY,kBAAkBiI,GAAG,IAAI9W,MAAOsa,EAAQ5X,SAdtC8K,IAC1B+M,EAAU/M,EAAEpD,OAAOpK,MAAM,EAaoE0B,UACvFC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,MAAK0B,SAAC,cAGtBC,EAAAA,EAAAA,KAACkZ,GAAAA,EAAU,CAACnY,SAAUqX,EAAc/Z,MAAO8Z,EAAWhD,GAAI,EAAEpV,UAC1DF,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CAACkK,UAAU,MAAK3V,SAAA,EACpBC,EAAAA,EAAAA,KAACmZ,GAAAA,EAAK,CAAC9a,MAAM,OAAM0B,SAAC,UACpBC,EAAAA,EAAAA,KAACmZ,GAAAA,EAAK,CAAC9a,MAAM,QAAO0B,SAAC,gBAGzBF,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAACqI,GAAI,EAAEpV,SAAA,EACjBF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAAAhN,SAAA,EACTC,EAAAA,EAAAA,KAACoZ,GAAAA,GAAc,CAAArZ,SAAC,OAChBC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CAACnM,KAAK,SAASqM,YAAY,IAAI7O,MAAOka,EAAYxX,SAvClC8K,IAC9B2M,EAAc3M,EAAEpD,OAAOpK,MAAM,QAwCvBwB,EAAAA,EAAAA,MAAC2N,EAAAA,GAAc,CAAAzN,SAAA,CAAC,gBA3CI,GA4CesZ,wBAGrCxZ,EAAAA,EAAAA,MAACiN,EAAAA,GAAW,CAACqI,GAAI,EAAEpV,SAAA,EACjBC,EAAAA,EAAAA,KAACgZ,GAAAA,EAAS,CAAAjZ,SAAC,cACXF,EAAAA,EAAAA,MAACkN,EAAAA,EAAU,CAAAhN,SAAA,EACTC,EAAAA,EAAAA,KAACgN,EAAAA,EAAK,CAACnM,KAAK,SAASxC,MAAOoa,EAAU1X,SA5ClB8K,IAC5B6M,EAAY7M,EAAEpD,OAAOpK,MAAM,KA4CnB2B,EAAAA,EAAAA,KAACsZ,GAAAA,GAAe,CAAAvZ,SAAC,aAGrBC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACgW,EAAE,OAAOtI,QApCF0L,KACnBvX,QAAQC,IAAI,CAAEkW,YAAWE,UAASE,aAAYE,YAAW,EAmCd1Y,SAAC,gBAIhD,C,gBC9DO,SAASyZ,KAOZ,OAAOxZ,EAAAA,EAAAA,KAAA,OAAAD,UACHC,EAAAA,EAAAA,KAACkW,GAAAA,GAAG,CAACuD,GAAG,QAAQxN,MAAM,QAAQlC,EAAG,EAAGgP,aAAa,KAAK5C,EAAE,OAAOhB,GAAI,EAAGuE,QAAS,EAAE3Z,UAC7EF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACW,WAAW,SACXC,eAAe,gBAAe9V,SAAA,EAChCF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACW,WAAW,SAAQ7V,SAAA,EACrBC,EAAAA,EAAAA,KAAC2Z,GAAAA,EAAI,CAACC,QAAQ,cAAc3N,MAAM,WAAW4N,GAAI,EAAE9Z,UAC/CC,EAAAA,EAAAA,KAAA,QACI8Z,KAAK,eACLC,EAAE,oEAGVla,EAAAA,EAAAA,MAACoZ,GAAAA,EAAM,CAAC3M,WAAW,OAAOuN,GAAI,EAAE9Z,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,KAAI0B,SAAC,cACnBC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,KAAI0B,SAAC,oBAI3BC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACH,MAAM,YAAYK,WAAW,OAAOJ,SAAS,KAAK2N,GAAI,EAAE9Z,SAtBzD,QAuBSyC,QAAQ,MAGtBxC,EAAAA,EAAAA,KAACiV,EAAAA,EAAI,CAACS,UAAU,SAASE,WAAW,WAAU7V,UAC1CF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAAAlV,SAAA,EACDC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACyN,GAAI,EAAE9Z,SAAC,2BACbC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACH,MAAM,YAAWlM,SAAC,sBAExBC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACyN,GAAI,EAAE9Z,SAAC,4BACbC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACyN,GAAI,EAAE9Z,SAAC,6BACbC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACyN,GAAI,EAAE9Z,SAAC,kBACbC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAAArM,SAAC,iCAIdF,EAAAA,EAAAA,MAACoZ,GAAAA,EAAM,CAAC9C,EAAG,GAAIuD,QAAS,EAAGxM,YAAY,KAAK8M,KAAK,KAAKP,GAAG,WAAWX,YAAY,WAAU/Y,SAAA,EACtFC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,KAAI0B,SAAC,QACnBC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,KAAI0B,SAAC,QACnBC,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,KAAI0B,SAAC,gBAKvC,C,gHChDO,SAASka,KACd,OAAO,eAAE/a,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAM+S,IAA6B9S,EAAAA,EAAAA,IAAkB,oBACvDf,EAAYiD,KAElB,OAAOjC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMqD,GAAaF,GAAQI,UAAY2T,GACxE1S,SAAU,CAAClF,GAAgBU,GAAI,2BAA4BqD,GAC3DqB,QAASzB,UACP,KAAM3D,GAAgBU,IAAMqD,GAAaF,GAAQI,UAAY2T,GAA2B,KAAM,OAC9F,aCfCjU,gBAA6C,OAClDE,EAAM,yBACN+T,EAAwB,UACxB7T,IAMA,MAAME,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpD+W,EAAa,IAAIzY,GAAAA,GAAgBqV,EAAyBzT,QAASyT,EAAyBxT,IAAKH,GACvGnB,QAAQuB,KAAK,iCACb,MAAM4W,QAAiCD,EAAWE,wBAAwBnX,GAE1E,OADAjB,QAAQ0B,QAAQ,iCACTyW,CACT,CDAmBE,CAA+B,CAAEtX,SAAQ+T,2BAA0B7T,aAAY,EAE9FwB,OAAS6V,GAAcA,EAAUpZ,KAAKqZ,GAAa9Y,EAAAA,GAAiB3C,KAAKyb,MAE7E,CEnBO1X,eAAe2X,IAAqB,OACzCzX,EAAM,yBACN+T,EAAwB,UACxB7T,EAAS,SACTsX,IAOA,MAAMpX,EAAW,IAAI1B,EAAAA,EAA8BsB,EAAOI,UACpD4T,EAAmB,IAAItV,GAAAA,GAAgBqV,EAAyBzT,QAASyT,EAAyBxT,IAAKH,GAC7GnB,QAAQuB,KAAK,wBACb,MAAMoS,QAAiBoB,EAAiB0D,gBAAgBxX,EAAWsX,GAEnE,OADAvY,QAAQ0B,QAAQ,wBACTiS,CACT,CCNS,SAAS+E,MCPX,UAA6B,UAAEJ,IACpC,OAAO,eAAEpb,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,OACbC,KAAM+S,IAA6B9S,EAAAA,EAAAA,IAAkB,oBACvDf,EAAYiD,MAEXjC,EAAAA,EAAAA,UAAS,CACdC,QAASC,QAAQjF,GAAgBU,IAAMqD,GAAaqX,EAAU7Z,OAAS,GAAKsC,GAAQI,UAAY2T,GAChG1S,SAAU,CAAClF,GAAgBU,GAAI,mBAAoBqD,KAAcqX,GACjEhW,QAASzB,UACP,KAAM3D,GAAgBU,IAAMqD,GAAaF,GAAQI,UAAYmX,EAAU7Z,OAAS,GAAKqW,GAA2B,KAAM,OACtH,MAAM6D,EAAY,GAClB,IAAK,IAAI3U,EAAI,EAAGA,EAAIsU,EAAU7Z,OAAQuF,IACpC2U,EAAUtR,KAAKmR,GAAsB,CAAEzX,SAAQ+T,2BAA0B7T,YAAWsX,SAAUD,EAAUtU,MAG1G,aADMF,QAAQC,IAAI4U,GACXA,CAAS,GAGtB,CDTsBC,CAAoB,CAAEN,UAFtBL,OAGlB,OACIja,EAAAA,EAAAA,KAAC6a,GAAAA,EAAc,CAAA9a,UACXF,EAAAA,EAAAA,MAACib,GAAAA,EAAK,CAAC1a,QAAQ,SAAQL,SAAA,EACnBC,EAAAA,EAAAA,KAAC+a,GAAAA,EAAY,CAAAhb,SAAC,2CACdC,EAAAA,EAAAA,KAACgb,GAAAA,EAAK,CAAAjb,UACNF,EAAAA,EAAAA,MAACob,GAAAA,GAAE,CAAAlb,SAAA,EACCC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAAAnb,SAAC,gBACJC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAAAnb,SAAC,UACJC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAACC,WAAS,EAAApb,SAAC,sBAGlBF,EAAAA,EAAAA,MAACub,GAAAA,EAAK,CAAArb,SAAA,EACNF,EAAAA,EAAAA,MAACob,GAAAA,GAAE,CAAAlb,SAAA,EACCC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,YACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,sBACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAACF,WAAS,EAAApb,SAAC,aAElBF,EAAAA,EAAAA,MAACob,GAAAA,GAAE,CAAAlb,SAAA,EACCC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,UACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,sBACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAACF,WAAS,EAAApb,SAAC,cAElBF,EAAAA,EAAAA,MAACob,GAAAA,GAAE,CAAAlb,SAAA,EACCC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,WACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAAAtb,SAAC,gBACJC,EAAAA,EAAAA,KAACqb,GAAAA,GAAE,CAACF,WAAS,EAAApb,SAAC,mBAGlBC,EAAAA,EAAAA,KAACsb,GAAAA,EAAK,CAAAvb,UACNF,EAAAA,EAAAA,MAACob,GAAAA,GAAE,CAAAlb,SAAA,EACCC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAAAnb,SAAC,gBACJC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAAAnb,SAAC,UACJC,EAAAA,EAAAA,KAACkb,GAAAA,GAAE,CAACC,WAAS,EAAApb,SAAC,yBAMlC,CElDO,SAASwb,KACZ,OAAOvb,EAAAA,EAAAA,KAAA,OAAAD,UACHF,EAAAA,EAAAA,MAACqW,GAAAA,GAAG,CAACC,EAAE,OAAMpW,SAAA,EACTC,EAAAA,EAAAA,KAACwZ,GAAK,KACNxZ,EAAAA,EAAAA,KAACiW,GAAU,KACXjW,EAAAA,EAAAA,KAACkY,GAAK,KACNlY,EAAAA,EAAAA,KAAC0a,GAAS,QAGtB,C,kKCiBA,SAASc,KACP,MAAM,KAAEC,IAASC,EAAAA,GAAAA,OACVC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASJ,EAAKK,WAE5DC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAwBC,IAC5BL,EAAmBK,EAAI,EAKzB,OAFAR,EAAKS,GAAG,kBAAmBF,GAEpB,KACLP,EAAKU,IAAI,kBAAmBH,EAAqB,CAClD,GACA,CAACP,IAEJ,MAAMW,EAAkBH,IACtBR,EAAKW,eAAeH,GAAKI,OAAOC,GAAQta,QAAQC,IAAI,+BAAgCqa,IAAK,EAG3F,OACEzc,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQE,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IAAIP,SAChC,OAApB4b,EAA2B,KAAO,QAErC9b,EAAAA,EAAAA,MAACW,EAAAA,EAAQ,CAAAT,SAAA,EACPC,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAMuO,EAAe,MAAMrc,SAAC,QAC/CC,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAMuO,EAAe,MAAMrc,SAAC,YAIvD,CC3DAwc,GAAAA,GAAAA,IAAYC,GAAAA,IAAkBC,KAAK,CACjCR,IAAK,KACLS,UAAW,CACTC,GAAI,CACFC,YAAWA,ODyDjB,MAAMC,GAAiBA,KACrB,MAAQ9Y,KAAMsB,GAAaqR,KACrBzT,EAAYiD,MACX1I,EAAQkQ,GAAalP,IAE5B,OACEqB,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,CACGsF,GAAYA,EAAS5E,OAAS,GAC7BZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CACdC,MAAM,WACNC,KAAK,QACLC,aAAcmC,GAAWoB,eAAiB,GAC1ChG,MAAO4E,GAAWoB,eAAiB,GACnCtD,SAAW1C,GAAUqP,EAAU,IAAKlQ,EAAQyF,UAAW,GAAG5E,MAAW0B,SAEpEsF,EAASnE,KAAKtB,IACbI,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAwB9C,MAAOuB,EAAGyE,cAActE,SAC5DyW,GAAgB5W,IADEA,EAAGyE,sBAM5B,KAEHgB,IAAaA,EAAS5E,QACrBZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CAACC,MAAM,WAAWC,KAAK,QAAQC,aAAa,IAAGf,UAC7DC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAC9C,MAAM,IAAG0B,SAAC,qBAG5B,MACJC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,MACX,EAIP,SAAS6E,KACP,OAAO,OAAE/Z,EAAM,WAAEga,GAAcvF,EAASC,IAAc3T,EAAAA,EAAAA,OAC/CuU,EAASC,IAAcuD,EAAAA,EAAAA,UAAyB,OACjD,EAAEmB,IAAMtB,EAAAA,GAAAA,MAUd,OARAK,EAAAA,EAAAA,YAAU,KACJhZ,GAAQI,UACVmV,EAAW,CACTjV,QAASN,EAAOsC,SAAS,GAAGhC,SAEhC,GACC,CAACN,IAEAA,GAAQI,UAAYkV,GAEpBxY,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,QAAQ,OAAOC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IAAIP,SAAA,CACnEsY,EAAQhV,QAAQ2G,MAAM,EAAG,GAAG,MAAIqO,EAAQhV,QAAQ2G,OAAO,OAE1DnK,EAAAA,EAAAA,MAACW,EAAAA,EAAQ,CAAAT,SAAA,EACPC,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAMiK,UAAUC,UAAUC,UAAUK,GAAShV,SAAStD,SAAEid,EAAE,mBAC7Ehd,EAAAA,EAAAA,KAAC6c,GAAc,KACf7c,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAM4J,EAAW,CAAElX,MAAOwC,EAAOxC,QAASR,SAAEid,EAAE,sBAMjEja,EAIJ,MAHF/C,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAAC8c,SAAUF,EAAYlP,QAASA,IAAM2J,IAAUzX,SACpDid,EAAE,YAGT,CAEA,MAAME,GAAgBA,KACpB,MAAQnZ,KAAMsB,GAAaqR,KACrBkB,EAAgBf,KAEtB,OAAIxR,IAAaA,EAAS5E,QAEtBT,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM+J,EAAc7L,SAAShM,SAAC,mBAM1D,IAAI,EAGPod,GAAeA,KACnB,OAAO,OAAEpa,KAAYe,EAAAA,EAAAA,QACd,OAAE7E,EAAM,eAAEC,GAAkBC,IAAYC,EAAAA,EAAAA,MAEzCsY,EAAmB9Y,EAAAA,SAAc,IAC9BK,EAAO0Y,MAAMnY,GAAUA,EAAMI,KAAOV,GAAgBU,MAC1D,CAACX,EAAQC,GAAgBU,KAE5B,OACEI,EAAAA,EAAAA,KAAAU,EAAAA,SAAA,CAAAX,SACGgD,IAAW2U,GACV7X,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM1O,EAAS,CAAEE,QAASJ,EAAO,GAAGW,KAAMG,SAAA,CAAC,aAC7Dd,EAAO,GAAGsB,SAErB,MACH,EAIA,SAAS6c,KACd,OACEpd,EAAAA,EAAAA,KAACkW,GAAAA,GAAG,CAAAnW,UACFF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CACHoI,KAAM,OACNC,GAAI,CAAEC,KAAM,GACZC,GAAI,CAAED,KAAM,GACZE,aAAc,EACdC,YAAa,QACb5E,aAAa6E,EAAAA,EAAAA,IAAkB,WAAY,YAC3CC,MAAO,SAAS7d,SAAA,EAEhBC,EAAAA,EAAAA,KAACiV,EAAAA,EAAI,CAACa,KAAM,CAAEyH,KAAM,GAAKM,QAAS,CAAEN,KAAM,SAAUO,GAAI,SAAU/d,UAChEC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAAC2R,WAAWC,EAAAA,GAAAA,GAAmB,CAAET,KAAM,SAAUO,GAAI,SAAWG,WAAY,UAAUle,SAAC,YAI9FF,EAAAA,EAAAA,MAAC2L,EAAAA,EAAK,CAACsK,KAAM,CAAEyH,KAAM,EAAGO,GAAI,GAAKD,QAAS,WAAYnI,UAAW,MAAOwI,QAAS,EAAEne,SAAA,EACjFC,EAAAA,EAAAA,KAACmd,GAAY,KACbnd,EAAAA,EAAAA,KAAC8c,GAAe,KAChB9c,EAAAA,EAAAA,KAACkd,GAAa,KACdld,EAAAA,EAAAA,KAAChB,EAAS,KACVgB,EAAAA,EAAAA,KAACwb,GAAgB,WAK3B,CElMO,SAAS2C,KACd,OACEte,EAAAA,EAAAA,MAACqW,GAAAA,GAAG,CAAAnW,SAAA,EACFC,EAAAA,EAAAA,KAACod,GAAc,KACfpd,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAAA,UAAQa,KAAK,SAASgN,QAASA,IAAMuQ,GAAAA,EAAOC,UAAU,gBAAgBte,SAAC,iBAK7E,CAZAqe,GAAAA,EAAOE,Q,8GCDP,MAAMC,GAAY,CAChB,aAAc,CACZ,IAAK,qCACL,IAAK,qCACL,IAAK,sCAGPC,KAAM,CACJ,IAAK,2CAEPC,KAAM,CACJ,IAAK,mCAGP,cAAe,CACb,IAAK,sCACL,IAAK,sCACL,IAAK,uCAGP,YAAa,CACX,IAAK,oCACL,IAAK,oCACL,IAAK,qCAEP,YAAa,CACX,IAAK,oCACL,IAAK,oCACL,IAAK,qCAGPC,OAAQ,CACN,IAAK,wCACL,IAAK,wCACL,IAAK,0CA8DHve,GAA+B,CACnCwe,aAAc,CACZC,YAAa,QAEfC,SAAU,CACRC,OA9DiBC,EAAAA,GAAAA,KAAaC,IAChC,MAAQJ,YAAaK,GAAMD,EAE3B,GAAU,SAANC,EAAc,CAChB,MAAMxF,GAAKyF,EAAAA,GAAAA,GAAK,WAAY,iBAAjBA,CAAmCF,GAE9C,MAAO,CACLjG,aAAc,OACd9M,OAAOiT,EAAAA,GAAAA,GAAK,QAAS,iBAAdA,CAAgCF,GACvCvF,KACA0F,OAAQ,CACN1F,IAAIyF,EAAAA,GAAAA,GAAK,WAAY,iBAAjBA,CAAmCF,GACvCI,UAAW,CACT3F,OAGJ4F,QAAS,CAAE5F,IAAIyF,EAAAA,GAAAA,GAAK,WAAY,iBAAjBA,CAAmCF,IAEtD,CAEA,GAAU,SAANC,EACF,MAAO,CACLlG,aAAc,OACduG,WAAYf,GAAU,cAAc,KACpCtS,MAAO,QACPkT,OAAQ,CACNG,WAAYf,GAAU,cAAc,KACpCa,UAAW,CACTG,WAAYhB,GAAU,cAAc,OAGxCc,QAAS,CACPC,WAAYf,GAAU,cAAc,OAK1C,MAAM9E,EAAK,GAAGwF,QAERO,EAAU,GAAGP,QACbQ,EAAW,GAAGR,QACdM,GAAaL,EAAAA,GAAAA,GAAKzF,EAAI,GAAGwF,QAAZC,CAAqBF,GAExC,MAAO,CACLjG,aAAc,OACdU,GAAI8F,EACJtT,OAAOiT,EAAAA,GAAAA,GARK,QAQO,QAAZA,CAAqBF,GAC5BG,OAAQ,CACN1F,IAAIyF,EAAAA,GAAAA,GAAKM,EAAS,GAAGP,QAAjBC,CAA0BF,GAC9BI,UAAW,CACT3F,GAAI8F,IAGRF,QAAS,CAAE5F,IAAIyF,EAAAA,GAAAA,GAAKO,EAAU,GAAGR,QAAlBC,CAA2BF,IAC3C,IASCU,QAAUV,GACkB,SAAtBA,EAAMJ,aAAgD,SAAtBI,EAAMJ,YACjC,CACL3S,MAAO,QACP6M,YAAa,WACbqG,OAAQ,CAAE1F,GAAI,kBACd4F,QAAS,CAAE5F,GAAI,kBACfV,aAAc,QAGX,CACL9M,MAAO,WACP4M,OAAQ,YACRC,YAAa,WACbqG,OAAQ,CAAE1F,GAAI,0BACd4F,QAAS,CAAE5F,GAAI,0BACfV,aAAc,QAGlB4G,MAAO,CACL1T,MAAO,WACPkT,OAAQ,CAAE1F,GAAI,0BACd4F,QAAS,CAAE5F,GAAI,0BACfV,aAAc,UAmSP1C,IAAQuJ,EAAAA,GAAAA,IAAY,CAC/BC,oBAAoB,EACpBC,iBAAkB,OAClBC,OAAQ,CACNC,KAAM,CACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,IAAK,CACH,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPvB,OAAQ,CACN,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPwB,OAAQ,CACN,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,MAAO,CACL,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,KAAM,CACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,KAAM,CACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,OAAQ,CACN,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,KAAM,CACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPC,KAAM,CACJ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,WAEPhc,MAAO,UACPic,QAAS,UACTC,QAAS,WAEXC,QAAS,CACPjB,QAAS,kCAEXkB,MAAO,CACLC,QACE,+IACFC,KAAM,+IACNC,QACE,uKACFC,KAAM,qGAERC,WAAY,CACVC,QAAS,CACPrC,SAAU,CACRsC,WAAY,CACVC,OAAQ,CACN1U,SAAU,QACV2U,MAAO,YAKflhB,UACA6M,MAvYgC,CAClC2R,aAAc,CACZ2C,iBAAkB,WAClBC,iBAAkB,YAqYlBtI,OAjYiC,CACnC0F,aAAc,CACZ2C,iBAAkB,WAClBE,UAAW,WACXD,iBAAkB,YA8XlBE,YA1XsC,CACxC9C,aAAc,CACZ2C,iBAAkB,WAClBC,iBAAkB,YAwXlB/U,MA5WgC,CAClCmS,aAAc,CACZve,QAAS,eAEXye,SAAU,CACR,cAAgBG,IACP,CACL0C,UAAW,CACTjI,GAAI,GAAGuF,EAAMJ,kBACb+C,uBAAwB,GAAG3C,EAAMJ,qBAIvCE,MAAQE,IACC,CACL4C,KAAM,CAAE3V,MAAO,SACfyV,UAAW,CAAEjI,GAAI,GAAGuF,EAAMJ,kBAAmB3S,MAAO,aA6VxD4V,SArXmC,CACrClD,aAAc,CACZ2C,iBAAkB,WAClB1C,YAAa,OACb2C,iBAAkB,YAkXlBO,SAxVmC,CACrCnD,aAAc,CACZoD,WAAY,WACZC,SAAU,aAsVVC,SAlVmC,CACrCtD,aAAc,CACZC,YAAa,QAEfsD,UAAW,CACTC,QAAS,CACPrJ,YAAa,WACbsJ,SAAU,CACR3I,GAAI,WACJX,YAAa,WACbqG,OAAQ,CACN1F,GAAI,WACJX,YAAa,aAGjBuJ,SAAU,CACRvJ,YAAa,WAEfsG,UAAW,CACTD,OAAQ,CACNrG,YAAa,gBAGjBqG,OAAQ,CACNrG,YAAa,eA2TjBK,MArTgC,CAClCwF,aAAc,CACZC,YAAa,QAEfsD,UAAW,CACTC,QAAS,CACPrJ,YAAa,WACbsJ,SAAU,CACR3I,GAAI,WACJX,YAAa,WACbqG,OAAQ,CACN1F,GAAI,WACJX,YAAa,aAGjBuJ,SAAU,CACRvJ,YAAa,WAEfsG,UAAW,CACTD,OAAQ,CACNrG,YAAa,gBAGjBqG,OAAQ,CACNrG,YAAa,eA8RjBwJ,MAxRgC,CAClC3D,aAAc,CACZC,YAAa,QAEfC,SAAU,CACR0D,OAASvD,IAAK,CACZ/S,MAAO,GAAG+S,EAAMJ,kBAChB/F,OAAQ,MACRkI,QAAS,OACTnL,WAAY,WAEdkJ,MAAQE,IAAK,CACXO,WAAY,GAAGP,EAAMJ,kBACrB3S,MAAO,UAETyT,QAAUV,IAAK,CACblG,YAAa,GAAGkG,EAAMJ,kBACtB3S,MAAO,GAAG+S,EAAMJ,kBAChB4D,UAAW,YAuQbC,IAlQ8B,CAChC9D,aAAc,CACZC,YAAa,OACbxe,QAAS,SAEXye,SAAU,CACRC,MAAQE,IAAK,CACX0C,UAAW,CACTnC,WAAY,GAAGP,EAAMJ,kBACrB3S,MAAO,aA0PXyW,UApPoC,CACtCR,UAAW,CACTR,UAAW,CACT5I,YAAa,WACb6J,YAAa,MACb5J,aAAc,UAgPhB6J,SA3OmC,CACrCjE,aAAc,CACZC,YAAa,OACbxe,QAAS,QACT2Y,aAAc,QAEhB8F,SAAU,CACRC,MAAQE,IAAK,CACX6D,YAAa,CACXtD,WAAY,GAAGP,EAAMJ,kBACrB7F,aAAc,QAEhB+J,MAAO,CACL/J,aAAc,YA+NlBgK,KAzN+B,CACjCpE,aAAc,CACZC,YAAa,QAEfC,SAAU,CACR,gBAAkBG,IAAK,CACrBgE,IAAK,CACHC,UAAW,CACT1D,WAAY,GAAGP,EAAMJ,kBACrB3S,MAAO,SAETA,MAAO,GAAG+S,EAAMJ,qBAGpB,eAAgB,CACdoE,IAAK,CACHC,UAAW,CACT1D,WAAY,iBACZtT,MAAO,YAETA,MAAO,eAsMXiX,QAhMkC,CACpChB,UAAW,CACTnE,UAAW,SACXtE,GAAI,WACJxN,MAAO,YACP,oBAAqB,kCA4LrBkX,OAxLiC,CACnCxE,aAAc,CACZC,YAAa,QAEfsD,UAAW,CACTY,MAAO,CACLV,SAAU,CACR7C,WAAY,eAkLhB6D,QA5KkC,CACpClB,UAAW,CACTjW,MAAO,aA2KPnM,KArcoC,CACtCujB,MAAO,CAAC,SAAU,OAAQ,QAC1BnB,UAAW,CACToB,OAAQ,CACNvK,aAAc,OACd9M,MAAO,QACPsX,KAAM,CACJxC,QAAS,OACTnL,WAAY,SACZ4H,GAAI,GAEN/H,OAAQ,QAEV+N,KAAM,CACJC,GAAI,EACJC,QAAS,WACThK,QAAS,EACTb,OAAQ,OACRE,aAAc,KACduE,GAAI,GAENqG,KAAM,CACJD,QAAS,iBACTzX,MAAO,iBACPlC,EAAG,EACHoV,OAAQ,CACNuE,QAAS,kBAEXrE,QAAS,CACPqE,QAAS,YAEXE,OAAQ,CACNC,oBAAqB,KACrBC,qBAAsB,MAExBC,MAAO,CACLC,uBAAwB,KACxBC,wBAAyB,MAE3BC,OAAQ,CACNR,QAAS,sBAiafnF,aACA4F,WAAY,CACV,cAAe,CACbjY,SAAU,CAAEqR,KAAM,OAAQ6G,GAAI,QAC9BnG,WAAY,UACZ9R,WAAY,CAAEoR,KAAM,SAAU6G,GAAI,QAClC9X,WAAY,KAEd,cAAe,CACbJ,SAAU,CAAEqR,KAAM,OAAQO,GAAI,QAC9BG,WAAY,UACZ9R,WAAY,CAAEoR,KAAM,SAAUO,GAAI,OAAQsG,GAAI,QAC9C9X,WAAY,KAEd,cAAe,CACbJ,SAAU,CAAEqR,KAAM,OAAQO,GAAI,QAC9BG,WAAY,UACZ9R,WAAY,CAAEoR,KAAM,QACpBjR,WAAY,KAEd,aAAc,CACZJ,SAAU,CAAEqR,KAAM,OAAQ6G,GAAI,QAC9BnG,WAAY,UACZ9R,WAAY,CAAEoR,KAAM,OAAQ6G,GAAI,QAChC9X,WAAY,KAEd,aAAc,CACZJ,SAAU,CAAEqR,KAAM,OAAQ6G,GAAI,QAC9BnG,WAAY,UACZ9R,WAAY,CAAEoR,KAAM,SAAU6G,GAAI,QAClC9X,WAAY,KAEd,aAAc,CACZJ,SAAU,CAAEqR,KAAM,OAAQ6G,GAAI,QAC9BnG,WAAY,UACZ9R,WAAY,OACZG,WAAY,KAEd,aAAc,CACZJ,SAAU,OACV+R,WAAY,UACZ9R,WAAY,SACZG,WAAY,KAEd,aAAc,CACZJ,SAAU,OACV+R,WAAY,UACZ9R,WAAY,SACZG,WAAY,MAGhB+X,MAAO,CACL7G,GAAI,MACJ,GAAK,WACL,EAAG,UACH,IAAK,WACL,EAAG,SACH,IAAK,WACL,EAAG,UACH,IAAK,WACL,EAAG,OACH,EAAG,UACH,EAAG,SACH,EAAG,UACH,EAAG,OACH,EAAG,UACH,GAAI,SACJ,GAAI,OACJ,GAAI,SACJ,GAAI,OACJ,GAAI,OACJ,GAAI,OACJ,GAAI,OACJ,GAAI,OACJ,GAAI,OACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ,GAAI,QACJ/I,IAAK,cACL6P,IAAK,cACLC,KAAM,OACN,MAAO,QACP,MAAO,QACPC,GAAI,QACJC,GAAI,QACJ3G,GAAI,QACJsG,GAAI,QACJM,GAAI,QACJ,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACPhD,UAAW,CACT+C,GAAI,QACJ3G,GAAI,QACJsG,GAAI,SACJM,GAAI,WAGRpjB,OAAQ,CACNqjB,OAAQ,CACN7D,KAAM,CACJrH,GAAI,gBCzqBCmL,GAAaA,EAAGC,eAAc,MACzC,MAAOC,EAAQC,IAAWlJ,EAAAA,EAAAA,UAASgJ,IAC5B3gB,EAAS8gB,IAAcnJ,EAAAA,EAAAA,WAAS,GASvC,OAEEhc,EAAAA,EAAAA,MAAColB,GAAAA,GAAK,CAACH,OAAQA,EAAQI,QAASA,OAASnlB,SAAA,EACvCC,EAAAA,EAAAA,KAACmlB,GAAAA,EAAY,KACbtlB,EAAAA,EAAAA,MAACulB,GAAAA,EAAY,CACX9F,WAAYjJ,GAAMkI,UAAUE,KAAK,KACjC4G,GAAG,KACHC,GAAG,IACH3C,YAAY,MACZ7J,YAAY,WACZ,UAAQ,oBAAmB/Y,SAAA,EAE3BC,EAAAA,EAAAA,KAACulB,GAAAA,EAAW,CAACjI,GAAI,EAAGS,UAAU,SAAQhe,SAAC,gCAGvCF,EAAAA,EAAAA,MAAC2lB,GAAAA,EAAS,CAACtZ,SAAS,KAAKD,MAAM,WAAUlM,SAAA,EACvCC,EAAAA,EAAAA,KAACoM,EAAAA,EAAI,CAACF,SAAS,KAAInM,SAAC,4HAGpBC,EAAAA,EAAAA,KAACkW,GAAAA,GAAG,CACFuP,SAAW5Z,IACT,MAAMmG,EAAMnG,EAAE6Z,cACiB1T,EAAI2T,UAAY,IACjB3T,EAAI4T,aAAe5T,EAAI6T,aACnDb,GAAW,GAEXA,GAAW,EACb,EAEF9kB,GAAG,MACH4lB,GAAI,EACJxI,GAAI,EACJ7H,OAAO,QACPsQ,SAAS,OACTC,UAAU,SACVC,GAAI,CACF,sBAAuB,CACrBlF,QAAS,SAEX,4BAA6B,CAC3BmF,gBAAiB,eAEnB,kCAAmC,CACjCA,gBAAiB,eAEnB,6BAA8B,CAC5BA,gBAAiB,gBAEnBnmB,UAEFC,EAAAA,EAAAA,KAACmmB,GAAAA,GAAa,CAAApmB,UACZF,EAAAA,EAAAA,MAACuM,EAAAA,EAAI,CAACF,SAAS,OAAMnM,SAAA,EACnBF,EAAAA,EAAAA,MAACumB,GAAAA,GAAQ,CAAArmB,SAAA,EACPF,EAAAA,EAAAA,MAACkW,EAAAA,EAAI,CAACsQ,KAAK,wBAAwB5d,OAAO,SAASwD,MAAM,WAAWqa,cAAe,CAAE5G,QAAS,QAAS3f,SAAA,CAAC,YAC5F,OACL,mGAGTC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,6LAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,+LAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,2NAIjBF,EAAAA,EAAAA,MAACumB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAA,CAAC,6HAC4G,KAC3HC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,mCAAmC5d,OAAO,SAASwD,MAAM,WAAWqa,cAAe,CAAE5G,QAAS,QAAS3f,SAAC,SAE5G,uBACc,KACrBC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAAC9J,MAAM,WAAWxD,OAAO,SAAS4d,KAAK,uCAAuCC,cAAe,CAAE5G,QAAS,QAAS3f,SAAC,sBAE/G,IAAI,4CAGdC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,qIAIjBF,EAAAA,EAAAA,MAACumB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAA,CAAC,yHACwG,KACvHC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAAC7V,GAAIqmB,EAAAA,GAAiBvd,GAAG,SAASP,OAAO,SAASwD,MAAM,WAAWqa,cAAe,CAAE5G,QAAS,QAAS3f,SAAC,SAErG,QAGTC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,uPAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,gLAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,yLAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,yJAIjBC,EAAAA,EAAAA,KAAComB,GAAAA,GAAQ,CAAC3C,GAAI,EAAE1jB,SAAC,geAUzBC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,QAAQ,UAAUkmB,cAAe,CAAE5G,QAAS,QAAUoG,GAAI,EAAGU,GAAI,EAAG3Y,QA7HjEjC,KACX1H,IACFiF,OAAOsd,eAAeC,QAAQ,4BAA6BC,KAAKC,WAAU,IAC1E7B,GAAQ,GACV,EAyHmGzX,YAAapJ,EAAQnE,SAAC,iBAIjH,EChJL,SAAS8mB,KACd,OAAO,OAAE5nB,EAAM,eAAEC,GAAkBC,IAAYC,EAAAA,EAAAA,QACxC,OAAE2D,GAAUyU,EAASC,IAAc3T,EAAAA,EAAAA,MAEpC4T,EAAmB9Y,EAAAA,SAAc,IAC9BK,EAAO0Y,MAAMnY,GAAUA,EAAMI,KAAOV,GAAgBU,MAC1D,CAACX,EAAQC,GAAgBU,MAErBpC,EAAQkQ,GAAalP,KACpBuF,KAAMsB,GAAaF,KACrByS,ECdD,WACL,MAAOpa,EAAQkQ,GAAalP,MACrB,eAAEU,KAAoBE,EAAAA,EAAAA,QACtB,OAAE2D,KAAYe,EAAAA,EAAAA,MACfsB,EAAgBrC,GAAQsC,WAAW,IAAIhC,QACvCoE,GAAcC,EAAAA,EAAAA,mBACZ3D,KAAMf,IAAsBgB,EAAAA,EAAAA,IAAkB,aAEtD,OAAO2D,EAAAA,EAAAA,aAAY,CACjBE,WAAYhF,UACV,KAAM3D,GAAgBU,IAAMoD,GAAqBoC,GAAiBrC,GAAQI,UAAW,KAAM,OAC3F,MACM0F,EADW,IAAIpH,EAAAA,EAA8BsB,EAAOI,UAClC2F,UAAU1D,GAC5BhC,EAAY,IAAI3B,GAAAA,GAAgBuB,EAAkBK,QAASL,EAAkBM,IAAKuF,GAClFI,QAAuC7F,EAAU,qBACvDpB,QAAQC,IAAI,CAAEgH,OACVE,OAAOC,IACTD,OAAOC,IAAIC,KAAKJ,GAEhBE,OAAOC,IAAM,CAACH,GAEhB,MAAMK,QAAiBL,EAAGM,OAC1BvH,QAAQC,IAAI,CAAEqH,aACVH,OAAOK,UACTL,OAAOK,UAAUH,KAAKC,GAEtBH,OAAOK,UAAY,CAACF,GAGtB,MAAM0N,EAAQ1N,EAAS2N,QAAQxX,MAAMoM,GAAkB,mBAAZA,EAAEmL,QAC7C,GAAIA,EAAO,CACT,MAAM/T,EAAY+T,GAAOE,MAAMjU,WAAWkU,WACtClU,IACFwE,EAAY2P,aAAa,CAAClY,EAAeU,GAAI,WAAY,CAAE2F,aAAcH,KAAmBiS,GAC1FA,EAAQC,OAAO,CAACrU,MAElByK,EAAU,IAAKlQ,EAAQyF,UAAWA,EAAUoB,gBAEhD,CAEA,OAAOiF,CAAQ,GAGrB,CD7BwBwd,GAChB7jB,EAAYiD,KAElB,OACErG,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,CACIgD,EAIE,MAHF/C,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM2J,IAAUzX,SAAC,YAIjDgD,IAAW2U,GACV7X,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM1O,EAAS,CAAEE,QAASJ,EAAO,GAAGW,KAAMG,SAAA,CAAC,aAC7Dd,EAAO,GAAGsB,SAErB,KACH8E,IAAaA,EAAS5E,QACrBT,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACU,KAAK,SAASgN,QAASA,IAAM+J,EAAc7L,SAAShM,SAAC,mBAG3D,KAEHgD,GAAQsC,WAAW,IAAIhC,SACtBxD,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAC,SAAA,EACHF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,GAAIC,EAAAA,EAAQC,QAAQ,OAAOC,WAAWL,EAAAA,EAAAA,KAACM,EAAAA,EAAe,IAAIP,SAAA,CACnEgD,EAAOsC,SAAS,GAAGhC,QAAQ2G,MAAM,EAAG,GAAG,QAAMjH,EAAOsC,SAAS,GAAGhC,QAAQ2G,OAAO,OAElFnK,EAAAA,EAAAA,MAACW,EAAAA,EAAQ,CAAAT,SAAA,EACPC,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAMiK,UAAUC,UAAUC,UAAUjV,EAAOsC,SAAS,GAAGhC,SAAStD,SAAC,iBAEnFsF,GAAYA,EAAS5E,OAAS,GAC7BZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CACdC,MAAM,WACNC,KAAK,QACLC,aAAcmC,GAAWoB,eAAiB,GAC1ChG,MAAO4E,GAAWoB,eAAiB,GACnCtD,SAAW1C,GAAUqP,EAAU,IAAKlQ,EAAQyF,UAAW,GAAG5E,MAAW0B,SAEpEsF,EAASnE,KAAKtB,IACbI,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAwB9C,MAAOuB,EAAGyE,cAActE,SAC5DyW,GAAgB5W,IADEA,EAAGyE,sBAM5B,KACHgB,IAAaA,EAAS5E,QACrBZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAX,SAAA,EACEC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CAACC,MAAM,WAAWC,KAAK,QAAQC,aAAa,IAAGf,UAC7DC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAAC9C,MAAM,IAAG0B,SAAC,qBAG5B,MAEJC,EAAAA,EAAAA,KAACiY,GAAAA,EAAW,KACZjY,EAAAA,EAAAA,KAAC6X,GAAAA,EAAQ,CAAChK,QAASA,IAAM4J,EAAW,CAAElX,MAAOwC,EAAOxC,QAASR,SAAC,qBAGhE,OAGV,C,suSExCMgnB,IAAoBC,EAAAA,EAAAA,GAAY,CACpCC,QAAS,CACPC,eAAe,EACfC,aAAc,CACZ9R,KAAM,gCAKC+R,GAAc,CACzB/R,KAAM,sBACNuM,K,yvCACAyF,K,qoKACAC,YAAa,kDACbC,2BAA4B,CAC1B,CAAElS,KAAM,WAAYmS,IAAK,uBACzB,CAAEnS,KAAM,eAAgBmS,IAAK,6BAE/BC,oBAAqB,uBACrBC,QAAS,6BAEEC,IAAUlL,EAAAA,EAAAA,IAAK,CAC1BjF,QAAS,CACPoQ,uBAAuB,EACvBC,8BAA8B,GAEhCC,QAAS,CACPf,IACAgB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,IAAe,CACbC,mBAAoB,CAACC,EAAAA,GAAcC,SAAUD,EAAAA,GAAcE,UAE7DC,EAAAA,EAAAA,GAAa,CACXC,OAAQ,uCACRC,MAAO,uBAETC,EAAAA,EAAAA,GAAa,CACXC,UAAW,mCACXC,qBAAsB,KAExBC,EAAAA,EAAAA,GAAoB,CAClBC,QAAS,EACTH,UAAW,mCACXI,QAAS,kCAEXC,EAAAA,EAAAA,MAEF7pB,OAAQ,CACN,CACEW,GAAI,MACJmC,MAAO,MACPxB,MAAO,eACPwoB,OAAQ,0EACRC,aAAc,iCAEhB,CACEppB,GAAI,OACJmC,MAAO,MACPxB,MAAO,mBACPwoB,OAAQ,0EACRC,aAAc,0CAEhB,CACEppB,GAAI,KACJmC,MAAO,MACPxB,MAAO,OACPwoB,OAAQ,8DACRC,aAAc,4BAEhB,CACEppB,GAAI,MACJmC,MAAO,MACPxB,MAAO,eACPwoB,OAAQ,sEACRC,aAAc,6BAGlB5B,eACA6B,cAAe,CACbC,QAAS,CACPhlB,SAAS,GAEXilB,OAAQ,CACNjlB,SAAS,IAGbklB,OAAQ,CACNllB,SAAS,KAIPuD,GAAc,IAAI4hB,EAAAA,YAAY,CAClCC,eAAgB,CACdC,QAAS,CACP3hB,OAAO,EACPmI,iBAAiB,EACjB9K,UAAW,IACXukB,OAAQ,KACRC,sBAAsB,EACtBllB,aAAemlB,IACb1nB,QAAQwC,MAAM,CAAEklB,gBACT,IAGXC,UAAW,CACT/hB,OAAO,EACPrD,aAAeqlB,IACb5nB,QAAQwC,MAAM,CAAEolB,mBACT,OA4Bf,SAASC,KACP,OACEhqB,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAAC/U,GAAG,OAAO4pB,UAAU,QAAQlc,cAAc,SAAS6L,GAAG,WAAWhO,IAAK,GAAG1L,SAAA,EAC7EC,EAAAA,EAAAA,KAACiV,EAAAA,EAAI,CAACwE,GAAG,WAAWsQ,kBAAmB,EAAGC,kBAAkB,WAAUjqB,UACpEF,EAAAA,EAAAA,MAACoqB,EAAAA,EAAS,CAAC/pB,GAAI+U,EAAAA,EAAMiV,KAAK,SAAS5M,GAAI,EAAGE,GAAI,GAAIsM,UAAU,OAAOjU,eAAe,gBAAgBD,WAAW,SAAQ7V,SAAA,EACnHC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CACH/M,GAAI,CACFmhB,SAAU,IACVC,OAAQC,SAASD,QAEnBlqB,GAAIoqB,EAAAA,GACJhN,GAAI,EAAEvd,UAENC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKC,GAAMC,IAAI,iBAEtBzqB,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CACH/M,GAAI,CACFmhB,SAAU,SACVC,OAAQC,SAASD,QAEnBlqB,GAAIoqB,EAAAA,GACJhN,GAAI,EAAEvd,SACP,WAGDC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CACH/M,GAAI,CACFmhB,SAAU,aACVC,OAAQC,SAASD,QAEnBlqB,GAAIoqB,EAAAA,GACJhN,GAAI,EAAEvd,SACP,eAGDF,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACxJ,IAAK,EAAGif,SAAS,eAAe7U,eAAe,SAASD,WAAW,SAAQ7V,SAAA,EAC/EC,EAAAA,EAAAA,KAAC6mB,GAAQ,KACT7mB,EAAAA,EAAAA,KAAChB,EAAS,aAKhBgB,EAAAA,EAAAA,KAACiV,EAAAA,EAAI,CAACwE,GAAG,WAAW3D,KAAM,EAAE/V,UAC1BC,EAAAA,EAAAA,KAACiqB,EAAAA,EAAS,CAAC/pB,GAAI+U,EAAAA,EAAMiV,KAAK,SAAS5M,GAAI,EAAGE,GAAI,GAAGzd,UAC/CC,EAAAA,EAAAA,KAAC2qB,EAAAA,GAAM,SAIX3qB,EAAAA,EAAAA,KAACiV,EAAAA,EAAI,CAACwE,GAAG,WAAWmR,eAAgB,EAAGC,eAAe,WAAU9qB,UAC9DF,EAAAA,EAAAA,MAACoqB,EAAAA,EAAS,CAAC/pB,GAAI+U,EAAAA,EAAMiV,KAAK,SAAS5M,GAAI,EAAGE,GAAI,GAAI/H,OAAO,OAAOG,WAAW,SAASC,eAAe,gBAAe9V,SAAA,EAChHC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKO,GAAUL,IAAI,eACxB5qB,EAAAA,EAAAA,MAACoV,EAAAA,EAAI,CAACW,WAAW,SAASnK,IAAK,EAAE1L,SAAA,EAC/BC,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,uCAAuC5d,OAAO,SAAQ1I,UAC/DC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKQ,GAAaN,IAAI,yBAE7BzqB,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,6BAA6B5d,OAAO,SAAQ1I,UACrDC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKS,GAAOP,IAAI,yBAEvBzqB,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,kCAAkC5d,OAAO,SAAQ1I,UAC1DC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKU,GAAYR,IAAI,yBAE5BzqB,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,2CAA2C5d,OAAO,SAAQ1I,UACnEC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKW,GAAcT,IAAI,yBAE9BzqB,EAAAA,EAAAA,KAAC+V,EAAAA,EAAI,CAACsQ,KAAK,wCAAwC5d,OAAO,SAAQ1I,UAChEC,EAAAA,EAAAA,KAAA,OAAKuqB,IAAKY,GAAaV,IAAI,kCAOzC,CAEA,SAASW,MA9FT,WACE,MAAM,UAAEC,EAAS,gBAAEC,IAAoBC,EAAAA,EAAAA,OAEvCxP,EAAAA,EAAAA,YAAU,KACU,UAAdsP,GACFC,GACF,GACC,CAACD,EAAWC,GAEjB,CAsFEE,GAEA,MAAM,QAAEtG,IAAYuG,EAAAA,EAAAA,KACpB7sB,EAAAA,WAAgB,KACdsmB,GAAS,GACR,CAACA,IAEJ,OAAO,OAAEniB,KAAYe,EAAAA,EAAAA,MACjBf,GAAQI,UAAYJ,GAAQsC,WAAW,IAAIhC,UAC7C8F,OAAOuiB,UAAY,IAAIjqB,EAAAA,EAA8BsB,EAAOI,UAC5DgG,OAAOwiB,QAAUxiB,OAAOuiB,UAAU5iB,UAAU/F,GAAQsC,WAAW,IAAIhC,UAGrE,MAAMO,GAAcC,EAAAA,EAAAA,MACpBsF,OAAOyiB,gBAAmB7nB,IACxBH,EAAYnG,OAAOouB,OAAO,IAAI9jB,MAAM,QAAS,CAAEhE,SAAQ,EAIzD,MAAOvG,EAAQkQ,GAAalP,KACpBuF,KAAMsB,GAAaF,KAC3BvG,EAAAA,WAAgB,KACd,GAAKyG,EAGL,KAAM,cAAe7H,IAAW6H,EAAS5E,QAAU,EAAnD,CACE,MAAOqrB,GAAgBzmB,EACvBqI,EAAU,IAAKlQ,EAAQyF,UAAW6oB,EAAaznB,eAEjD,MACA,GAAI,cAAe7G,GAAU6H,EAAS5E,OAAS,EAA/C,CACE,MAAQwC,UAAW8oB,KAAe9tB,GAAcT,EAChDkQ,EAAUzP,EAEZ,MACA,GAAI,cAAeT,GAAU6H,EAAS5E,QAAU,EAAG,CACjD,MAAMwC,EAAYxB,EAAAA,GAAiB3C,KAAKtB,EAAOyF,WAC/C,IAAKoC,EAAS5F,MAAMG,GAAOA,EAAGsC,GAAGe,KAAa,CAC5C,MAAO6oB,GAAgBzmB,EAEvB,YADAqI,EAAU,IAAKlQ,EAAQyF,UAAW6oB,EAAaznB,eAEjD,CACF,IACC,CAAC7G,GAAQyF,UAAWoC,EAAU7H,EAAQkQ,IAEzC,OAAO,eAAExO,KAAoBE,EAAAA,EAAAA,OACvB,WAAEE,IAAeC,EAAAA,EAAAA,MAOvB,OANAX,EAAAA,WAAgB,KACVM,GAAgBU,IAClBN,EAAWI,OAAOC,SAAST,GAAgBU,GAAI,IACjD,GACC,CAACV,GAAgBU,GAAIN,KAGtBO,EAAAA,EAAAA,MAACmsB,EAAAA,GAAM,CAAAjsB,SAAA,EACLC,EAAAA,EAAAA,KAACisB,EAAAA,GAAK,CAACC,KAAK,aAAaC,SAASnsB,EAAAA,EAAAA,KAACme,GAAQ,OAC3Cte,EAAAA,EAAAA,MAACosB,EAAAA,GAAK,CAACE,SAASnsB,EAAAA,EAAAA,KAAC6pB,GAAM,IAAI9pB,SAAA,EACzBC,EAAAA,EAAAA,KAACisB,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAASnsB,EAAAA,EAAAA,KAACgV,GAAQ,OAClChV,EAAAA,EAAAA,KAACisB,EAAAA,GAAK,CAACC,KAAK,SAASC,SAASnsB,EAAAA,EAAAA,KAACub,GAAK,OACpCvb,EAAAA,EAAAA,KAACisB,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAASnsB,EAAAA,EAAAA,KAACuV,GAAY,WAI9C,CAEO,SAAS6W,KACd,OACEpsB,EAAAA,EAAAA,KAACqsB,EAAAA,oBAAmB,CAACC,OAAQ7kB,GAAY1H,UAEvCC,EAAAA,EAAAA,KAACusB,EAAAA,GAAmB,CAACC,YAAa7E,GAAQ5nB,UACxCC,EAAAA,EAAAA,KAACysB,EAAAA,GAAiB,CAACptB,QAAS,MAAOqtB,OAAO,OAAOjlB,YAAaA,GAAY1H,UACxEF,EAAAA,EAAAA,MAAC8sB,EAAAA,EAAc,CAACtW,MAAOA,GAAMtW,SAAA,EAC3BF,EAAAA,EAAAA,MAAC+sB,EAAAA,GAAU,CAAA7sB,SAAA,EACTC,EAAAA,EAAAA,KAACorB,GAAM,KACPprB,EAAAA,EAAAA,KAAC4kB,GAAU,CAACC,YAA4E,SAA/D1b,OAAOsd,eAAeoG,QAAQ,mCAEzD7sB,EAAAA,EAAAA,KAAC8sB,EAAAA,EAAkB,KACnB9sB,EAAAA,EAAAA,KAACoB,EAAK,YAMlB,CApLA+H,OAAO4jB,QAAUtrB,EC1JjB,MAAMigB,GAAYsL,SAASC,cAAc,QAElCpqB,eAAeqqB,KACpB,IAAKxL,GACH,MAAM,IAAI3Z,MAAM,iCAyCLolB,EAAAA,WAAoBzL,IAC5B0L,QAAOptB,EAAAA,EAAAA,KAACosB,GAAG,IAClB,C","sources":["webpack://@snx-v3/liquidity/../lib/useParams/useParams.ts","webpack://@snx-v3/liquidity/./src/ChainMenu.tsx","webpack://@snx-v3/liquidity/./src/Fonts.tsx","webpack://@snx-v3/liquidity/./src/parseAmount.ts","webpack://@snx-v3/liquidity/./src/renderAmount.ts","webpack://@snx-v3/liquidity/./src/fetchAccountAvailableCollateral.ts","webpack://@snx-v3/liquidity/./src/useAccountAvailableCollateral.ts","webpack://@snx-v3/liquidity/./src/useAllPriceFeeds.ts","webpack://@snx-v3/liquidity/./src/useProvider.ts","webpack://@snx-v3/liquidity/./src/useAccounts.ts","webpack://@snx-v3/liquidity/./src/useSelectedAccountId.ts","webpack://@snx-v3/liquidity/./src/useCollateralTokens.ts","webpack://@snx-v3/liquidity/./src/useSelectedCollateralType.ts","webpack://@snx-v3/liquidity/./src/useSelectedPoolId.ts","webpack://@snx-v3/liquidity/./src/useBurnUsd.ts","webpack://@snx-v3/liquidity/./src/fetchBurnUsdWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/fetchBurnUsd.ts","webpack://@snx-v3/liquidity/./src/usePositionDebt.ts","webpack://@snx-v3/liquidity/./src/fetchPositionDebtWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/fetchPositionDebt.ts","webpack://@snx-v3/liquidity/./src/BurnUsd.tsx","webpack://@snx-v3/liquidity/./src/CollateralTokens.tsx","webpack://@snx-v3/liquidity/./src/fetchPositionCollateral.ts","webpack://@snx-v3/liquidity/./src/useDelegateCollateral.ts","webpack://@snx-v3/liquidity/./src/delegateCollateralWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/delegateCollateral.ts","webpack://@snx-v3/liquidity/./src/usePositionCollateral.ts","webpack://@snx-v3/liquidity/./src/Delegate.tsx","webpack://@snx-v3/liquidity/./src/fetchTokenAllowance.ts","webpack://@snx-v3/liquidity/./src/fetchTokenBalance.ts","webpack://@snx-v3/liquidity/./src/useDeposit.ts","webpack://@snx-v3/liquidity/./src/approveToken.ts","webpack://@snx-v3/liquidity/./src/depositCollateral.ts","webpack://@snx-v3/liquidity/./src/useTokenAllowance.ts","webpack://@snx-v3/liquidity/./src/useTokenBalance.ts","webpack://@snx-v3/liquidity/./src/Deposit.tsx","webpack://@snx-v3/liquidity/./src/DepositUsd.tsx","webpack://@snx-v3/liquidity/./src/useCollateralPrice.ts","webpack://@snx-v3/liquidity/./src/fetchCollateralPriceWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/fetchCollateralPrice.ts","webpack://@snx-v3/liquidity/./src/useMintUsd.ts","webpack://@snx-v3/liquidity/./src/fetchMintUsdWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/fetchMintUsd.ts","webpack://@snx-v3/liquidity/./src/MintUsd.tsx","webpack://@snx-v3/liquidity/./src/Rewards.tsx","webpack://@snx-v3/liquidity/./src/Undelegate.tsx","webpack://@snx-v3/liquidity/./src/useWithdraw.ts","webpack://@snx-v3/liquidity/./src/fetchWithdrawCollateralWithPriceUpdate.ts","webpack://@snx-v3/liquidity/./src/fetchWithdrawCollateral.ts","webpack://@snx-v3/liquidity/./src/useWithdrawTimer.ts","webpack://@snx-v3/liquidity/./src/useAccountTimeoutWithdraw.ts","webpack://@snx-v3/liquidity/./src/useAccountLastInteraction.ts","webpack://@snx-v3/liquidity/./src/WithdrawCollateral.tsx","webpack://@snx-v3/liquidity/./src/WithdrawUsd.tsx","webpack://@snx-v3/liquidity/./src/HomePage.tsx","webpack://@snx-v3/liquidity/./src/NotFoundPage.tsx","webpack://@snx-v3/liquidity/./src/PriceChart.tsx","webpack://@snx-v3/liquidity/./src/renderAccountId.ts","webpack://@snx-v3/liquidity/./src/usePerpsAccounts.ts","webpack://@snx-v3/liquidity/./src/useCreatePerpsAccount.ts","webpack://@snx-v3/liquidity/./src/PerpsUserMenu.tsx","webpack://@snx-v3/liquidity/./src/Trade.tsx","webpack://@snx-v3/liquidity/./src/Stats.tsx","webpack://@snx-v3/liquidity/./src/useAccountPositionMarketIds.tsx","webpack://@snx-v3/liquidity/./src/fetchAccountPositionMarketIds.ts","webpack://@snx-v3/liquidity/./src/fetchAccountPosition.ts","webpack://@snx-v3/liquidity/./src/Positions.tsx","webpack://@snx-v3/liquidity/./src/useAccountPositions.tsx","webpack://@snx-v3/liquidity/./src/Perps.tsx","webpack://@snx-v3/liquidity/./src/PerpsAppNavbar.tsx","webpack://@snx-v3/liquidity/./src/i18n/config.ts","webpack://@snx-v3/liquidity/./src/PerpsApp.tsx","webpack://@snx-v3/liquidity/./src/theme.ts","webpack://@snx-v3/liquidity/./src/TermsModal.tsx","webpack://@snx-v3/liquidity/./src/UserMenu.tsx","webpack://@snx-v3/liquidity/./src/useCreateAccount.ts","webpack://@snx-v3/liquidity/./src/App.tsx","webpack://@snx-v3/liquidity/./src/index.tsx"],"sourcesContent":["import React from 'react';\nimport { createSearchParams, useSearchParams } from 'react-router-dom';\n\nexport type QueryParamsType = {\n  [key: string]: string;\n};\nexport type SetQueryParamsType = (newParams: QueryParamsType) => void;\n\nexport function searchParamsToObject(searchParams: URLSearchParams) {\n  return Object.fromEntries(Array.from(searchParams));\n}\n\nexport function sortObject(params: QueryParamsType) {\n  return Object.fromEntries(Object.entries(params).sort(([a], [b]) => a.localeCompare(b)));\n}\n\nexport function cleanObject(params: QueryParamsType) {\n  const cleaned = Object.entries(params).filter(([, value]) => value !== undefined);\n  return Object.fromEntries(cleaned);\n}\n\nexport function makeParams(newParams: QueryParamsType) {\n  return createSearchParams(sortObject(cleanObject(newParams)));\n}\n\nexport function makeSearch(newParams: QueryParamsType) {\n  return makeParams(newParams).toString();\n}\n\nexport function useParams(): [QueryParamsType, SetQueryParamsType] {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const params = React.useMemo(() => sortObject(searchParamsToObject(searchParams)), [searchParams]);\n\n  const updateParams = React.useCallback(\n    (newParams: QueryParamsType) => {\n      setSearchParams(makeParams(newParams));\n    },\n    [setSearchParams]\n  );\n\n  return [params, updateParams];\n}\n","import { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Button, Menu, MenuButton, MenuItemOption, MenuList, MenuOptionGroup } from '@chakra-ui/react';\nimport { useSynthetix } from '@synthetixio/react-sdk';\nimport { useSetChain } from '@web3-onboard/react';\nimport React from 'react';\n\nexport function ChainMenu() {\n  const [{ chains, connectedChain }, setChain] = useSetChain();\n  const { chainId, setChainId } = useSynthetix();\n  const chain = React.useMemo(() => chains.find((chain) => Number.parseInt(chain.id, 16) === chainId) || chains[0], [chainId, chains]);\n\n  return (\n    <Menu>\n      <MenuButton as={Button} variant=\"text\" rightIcon={<ChevronDownIcon />}>\n        {chain ? chain.label : 'Networks'}\n      </MenuButton>\n      <MenuList>\n        {chains && chains.length > 0 ? (\n          <>\n            <MenuOptionGroup\n              title=\"Networks\"\n              type=\"radio\"\n              defaultValue={chain.id}\n              value={chain.id}\n              onChange={(id) => {\n                if (connectedChain?.id) {\n                  setChain({ chainId: `${id}` });\n                } else {\n                  const nextChain = chains.find((chain) => chain.id === `${id}`);\n                  const nextChainId = nextChain ? nextChain.id : chains[0].id;\n                  setChainId(Number.parseInt(nextChainId, 16));\n                }\n              }}\n            >\n              {chains.map(({ id, label }) => (\n                <MenuItemOption key={id} value={id}>\n                  {label}\n                </MenuItemOption>\n              ))}\n            </MenuOptionGroup>\n          </>\n        ) : null}\n      </MenuList>\n    </Menu>\n  );\n}\n","import { Global } from '@emotion/react';\n\nexport const Fonts = () => (\n  <Global\n    styles={`\n      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@200..700&display=swap');\n      @font-face {\n        font-family: 'GT America Condensed';\n        font-style: normal;\n        font-display: swap;\n        font-weight: 700;\n        src: local('GT America Condensed'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold.woff2') format('woff2'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold.woff') format('woff'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold.otf') format('opentype');\n      }\n      @font-face {\n        font-family: 'GT America Condensed';\n        font-style: italic;\n        font-display: swap;\n        font-weight: 700;\n        src: local('GT America Condensed'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold%20Italic.woff2')\n            format('woff2'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold%20Italic.woff')\n            format('woff'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Bold%20Italic.otf')\n            format('opentype');\n      }\n      @font-face {\n        font-family: 'GT America Condensed';\n        font-style: normal;\n        font-display: swap;\n        font-weight: 100;\n        src: local('GT America Condensed'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin.woff2') format('woff2'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin.woff') format('woff'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin.otf') format('opentype');\n      }\n      @font-face {\n        font-family: 'GT America Condensed';\n        font-style: italic;\n        font-display: swap;\n        font-weight: 100;\n        src: local('GT America Condensed'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin%20Italic.woff2')\n            format('woff2'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin%20Italic.woff')\n            format('woff'),\n          url('https://fonts.synthetix.io/GT%20America%20Condensed%20Thin%20Italic.otf')\n            format('opentype');\n      }\n      @font-face {\n        font-family: 'GT America Mono';\n        font-style: normal;\n        font-display: swap;\n        font-weight: 700;\n        src: local('GT America Mono'),\n          url('https://fonts.synthetix.io/GT%20America%20Mono%20Bold.woff2') format('woff2'),\n          url('https://fonts.synthetix.io/GT%20America%20Mono%20Bold.woff') format('woff'),\n          url('https://fonts.synthetix.io/GT%20America%20Mono%20Bold.otf') format('opentype');\n      }\n      @font-face {\n        font-family: 'Lustra Text';\n        font-style: normal;\n        font-display: swap;\n        font-weight: 400;\n        src: local('Lustra Text'),\n          url('https://fonts.synthetix.io/Lustra%20Text%20Thin.otf') format('opentype');\n      }\n    `}\n  />\n);\n","import { ethers } from 'ethers';\n\nexport function parseAmount(value: string, decimals?: number) {\n  if (!decimals) {\n    return ethers.BigNumber.from(0);\n  }\n  const filteredInput = `${value}`.replace(/[^0-9.]+/gi, '');\n  if (!filteredInput) {\n    return ethers.BigNumber.from(0);\n  }\n  try {\n    return ethers.utils.parseUnits(filteredInput.trim(), decimals);\n  } catch {\n    return ethers.BigNumber.from(0);\n  }\n}\n","import { ethers } from 'ethers';\n\nexport function renderAmount(amount?: ethers.BigNumber, token?: { symbol: string; decimals: number }) {\n  console.log({ amount, token });\n  if (!(amount && token)) {\n    return '';\n  }\n  if (amount.eq(0)) {\n    return `0.00 ${token.symbol}`;\n  }\n  const float = Number.parseFloat(ethers.utils.formatUnits(amount, token.decimals));\n  console.log('float', float);\n  if (Math.abs(float) >= 1) {\n    return `${float.toFixed(2)} ${token.symbol}`;\n  }\n  const floatMillie = float * 1e3;\n  if (Math.abs(floatMillie) >= 1) {\n    return `${floatMillie.toFixed(2)} millie-${token.symbol}`;\n  }\n  const floatMicro = float * 1e6;\n  if (Math.abs(floatMicro) >= 1) {\n    return `${floatMicro.toFixed(2)} micro-${token.symbol}`;\n  }\n  const floatNano = float * 1e9;\n  if (Math.abs(floatNano) >= 1) {\n    return `${floatNano.toFixed(2)} nano-${token.symbol}`;\n  }\n  const floatPico = float * 1e12;\n  if (Math.abs(floatPico) >= 1) {\n    return `${floatPico.toFixed(2)} pico-${token.symbol}`;\n  }\n  return `${float.toFixed(2)} ${token.symbol}`;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchAccountAvailableCollateral({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  tokenAddress,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  tokenAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n  console.time('fetchAccountAvailableCollateral');\n  const accountAvailableCollateral = await CoreProxy.getAccountAvailableCollateral(accountId, tokenAddress);\n  console.timeEnd('fetchAccountAvailableCollateral');\n  return accountAvailableCollateral;\n}\n","import { useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchAccountAvailableCollateral } from './fetchAccountAvailableCollateral';\n\nexport function useAccountAvailableCollateral({\n  accountId,\n  tokenAddress,\n}: {\n  accountId?: ethers.BigNumber;\n  tokenAddress?: string;\n}) {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId && tokenAddress),\n    queryKey: [connectedChain?.id, 'AccountAvailableCollateral', { accountId: accountId?.toHexString(), tokenAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId && tokenAddress)) {\n        throw 'OMFG';\n      }\n\n      return fetchAccountAvailableCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        tokenAddress,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (accountAvailableCollateral) => ethers.BigNumber.from(accountAvailableCollateral),\n  });\n}\n","import { useImportExtras } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useSetChain } from '@web3-onboard/react';\n\nexport function useAllPriceFeeds() {\n  const [{ connectedChain }] = useSetChain();\n  const { data: extras } = useImportExtras();\n  return useQuery({\n    enabled: Boolean(connectedChain?.id),\n    queryKey: [connectedChain?.id, 'AllPriceFeeds'],\n    queryFn: async () => {\n      if (!(connectedChain?.id && extras)) {\n        throw 'OMFG';\n      }\n      return Object.entries(extras)\n        .filter(\n          ([key, value]) =>\n            String(value).length === 66 && (key.startsWith('pyth_feed_id_') || (key.startsWith('pyth') && key.endsWith('FeedId')))\n        )\n        .map(([, value]) => value as string);\n    },\n    staleTime: 60 * 60 * 1000,\n  });\n}\n","import { useConnectWallet } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport React from 'react';\n\nexport function useProvider() {\n  const [{ wallet }] = useConnectWallet();\n  return React.useMemo(() => {\n    if (wallet?.provider) {\n      return new ethers.providers.Web3Provider(wallet.provider);\n    }\n  }, [wallet?.provider]);\n}\n","import { useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function useAccounts() {\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const { data: AccountProxyContract } = useImportContract('AccountProxy');\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && walletAddress && wallet?.provider && AccountProxyContract),\n    queryKey: [connectedChain?.id, 'Accounts', { ownerAddress: walletAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && walletAddress && wallet?.provider && AccountProxyContract)) throw 'OMFG';\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const AccountProxy = new ethers.Contract(AccountProxyContract.address, AccountProxyContract.abi, provider);\n      const numberOfAccountTokens = await AccountProxy.balanceOf(walletAddress);\n      if (numberOfAccountTokens.eq(0)) {\n        // No accounts created yet\n        return [];\n      }\n      const accountIndexes = Array.from(Array(numberOfAccountTokens.toNumber()).keys());\n      const accounts = await Promise.all(accountIndexes.map((i) => AccountProxy.tokenOfOwnerByIndex(walletAddress, i)));\n      return accounts;\n    },\n    select: (accounts) => accounts.map((accountId) => ethers.BigNumber.from(accountId)),\n  });\n}\n","import { useParams } from '@snx-v3/useParams';\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport { useAccounts } from './useAccounts';\n\nexport function useSelectedAccountId() {\n  const { data: accounts } = useAccounts();\n  const [params] = useParams();\n\n  return React.useMemo(() => {\n    if (!params.accountId) {\n      return;\n    }\n    if (!accounts) {\n      return;\n    }\n    const accountId = ethers.BigNumber.from(params.accountId);\n    return accounts.find((id) => accountId.eq(id));\n  }, [accounts, params.accountId]);\n}\n","import { useImportCollateralTokens } from '@synthetixio/react-sdk';\nimport { ethers } from 'ethers';\nimport React from 'react';\n\nexport function useCollateralTokens() {\n  const { data: tokens } = useImportCollateralTokens();\n  return React.useMemo(() => {\n    if (tokens) {\n      return tokens\n        .filter(({ depositingEnabled }) => depositingEnabled)\n        .map(({ issuanceRatioD18, liquidationRatioD18, liquidationRewardD18, minDelegationD18, ...rest }) => ({\n          ...rest,\n          issuanceRatioD18: ethers.BigNumber.from(issuanceRatioD18),\n          liquidationRatioD18: ethers.BigNumber.from(liquidationRatioD18),\n          liquidationRewardD18: ethers.BigNumber.from(liquidationRewardD18),\n          minDelegationD18: ethers.BigNumber.from(minDelegationD18),\n        }));\n    }\n  }, [tokens]);\n}\n","import { useParams } from '@snx-v3/useParams';\nimport React from 'react';\nimport { useCollateralTokens } from './useCollateralTokens';\n\nexport function useSelectedCollateralType() {\n  const [params] = useParams();\n  const collateralTokens = useCollateralTokens();\n  return React.useMemo(\n    () => collateralTokens?.find((token) => params.collateralType === token.address),\n    [collateralTokens, params.collateralType]\n  );\n}\n","import { useParams } from '@snx-v3/useParams';\nimport { ethers } from 'ethers';\nimport React from 'react';\n\nconst pools = [ethers.BigNumber.from('1')];\n\nexport function useSelectedPoolId() {\n  const [params] = useParams();\n\n  return React.useMemo(() => {\n    if (!params.poolId) {\n      return ethers.BigNumber.from('1');\n    }\n    const poolId = ethers.BigNumber.from(params.poolId);\n    return pools.find((id) => poolId.eq(id));\n  }, [params.poolId]);\n}\n","import { fetchPriceUpdateTxn, useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport type { ethers } from 'ethers';\nimport { fetchAccountAvailableCollateral } from './fetchAccountAvailableCollateral';\nimport { fetchBurnUsd } from './fetchBurnUsd';\nimport { fetchBurnUsdWithPriceUpdate } from './fetchBurnUsdWithPriceUpdate';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function useBurnUsd({ onSuccess }: { onSuccess: () => void }) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: systemToken } = useImportSystemToken();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: priceIds } = useAllPriceFeeds();\n  const { data: MulticallContract } = useImportContract('Multicall');\n  const { data: PythERC7412WrapperContract } = useImportContract('PythERC7412Wrapper');\n\n  const queryClient = useQueryClient();\n  return useMutation({\n    retry: false,\n    mutationFn: async (burnUsdAmount: ethers.BigNumber) => {\n      if (\n        !(\n          CoreProxyContract &&\n          MulticallContract &&\n          PythERC7412WrapperContract &&\n          priceIds &&\n          connectedChain?.id &&\n          walletAddress &&\n          provider &&\n          accountId &&\n          poolId &&\n          collateralType &&\n          systemToken\n        )\n      ) {\n        throw 'OMFG';\n      }\n\n      if (burnUsdAmount.eq(0)) {\n        throw new Error('Amount required');\n      }\n\n      const freshPriceUpdateTxn = await fetchPriceUpdateTxn({\n        provider,\n        MulticallContract,\n        PythERC7412WrapperContract,\n        priceIds,\n      });\n      console.log({ freshPriceUpdateTxn });\n\n      const freshAccountAvailableUsd = await fetchAccountAvailableCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        tokenAddress: systemToken.address,\n      });\n      console.log({ freshAccountAvailableUsd });\n\n      const hasEnoughDeposit = freshAccountAvailableUsd.gte(burnUsdAmount);\n      if (!hasEnoughDeposit) {\n        throw new Error(`Not enough deposited ${systemToken.symbol}`);\n      }\n\n      if (freshPriceUpdateTxn.value) {\n        console.log('-> burnUsdWithPriceUpdate');\n        await fetchBurnUsdWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          burnUsdAmount,\n          priceUpdateTxn: freshPriceUpdateTxn,\n        });\n      } else {\n        console.log('-> burnUsd');\n        await fetchBurnUsd({\n          wallet,\n          CoreProxyContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          burnUsdAmount,\n        });\n      }\n      return { priceUpdated: true };\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error).then();\n      return false;\n    },\n    onSuccess: async ({ priceUpdated }) => {\n      if (priceUpdated) {\n        await queryClient.invalidateQueries({\n          queryKey: [connectedChain?.id, 'PriceUpdateTxn', { priceIds: priceIds?.map((p) => p.slice(0, 8)) }],\n        });\n      }\n\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'PositionDebt',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountAvailableCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: systemToken?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [connectedChain?.id, 'AccountLastInteraction', { accountId: accountId?.toHexString() }],\n      });\n\n      onSuccess();\n    },\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchBurnUsdWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  burnUsdAmount,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  burnUsdAmount: ethers.BigNumber;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  const burnUsdTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    burnUsdAmount,\n  ];\n  console.log('burnUsdTxnArgs', burnUsdTxnArgs);\n\n  const burnUsdTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('burnUsd', [\n      //\n      ...burnUsdTxnArgs,\n    ]),\n    value: 0,\n    requireSuccess: true,\n  };\n  console.log('burnUsdTxn', burnUsdTxn);\n\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n\n  const multicallTxn = {\n    from: walletAddress,\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, burnUsdTxn]]),\n    value: priceUpdateTxn.value,\n  };\n  console.log({ multicallTxn });\n\n  console.time('burnUsd');\n  const tx: ethers.ContractTransaction = await signer.sendTransaction(multicallTxn);\n  console.timeEnd('burnUsd');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchBurnUsd({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  burnUsdAmount,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  burnUsdAmount: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n\n  const burnUsdTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    burnUsdAmount,\n  ];\n  console.log({ burnUsdTxnArgs });\n\n  console.time('burnUsd');\n  const tx: ethers.ContractTransaction = await CoreProxy.burnUsd(...burnUsdTxnArgs);\n  console.timeEnd('burnUsd');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import { useErrorParser, useImportContract, usePriceUpdateTxn } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchPositionDebt } from './fetchPositionDebt';\nimport { fetchPositionDebtWithPriceUpdate } from './fetchPositionDebtWithPriceUpdate';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\n\nexport function usePositionDebt({\n  accountId,\n  poolId,\n  tokenAddress,\n}: {\n  accountId?: ethers.BigNumber;\n  poolId?: ethers.BigNumber;\n  tokenAddress?: string;\n}) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const { data: priceIds } = useAllPriceFeeds();\n  const { data: priceUpdateTxn } = usePriceUpdateTxn({ provider, priceIds });\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n  const { data: MulticallContract } = useImportContract('Multicall');\n\n  return useQuery({\n    enabled: Boolean(\n      connectedChain?.id &&\n        wallet?.provider &&\n        CoreProxyContract &&\n        MulticallContract &&\n        accountId &&\n        poolId &&\n        tokenAddress &&\n        priceUpdateTxn\n    ),\n    queryKey: [connectedChain?.id, 'PositionDebt', { accountId: accountId?.toHexString(), tokenAddress }],\n    queryFn: async () => {\n      if (\n        !(\n          connectedChain?.id &&\n          wallet?.provider &&\n          CoreProxyContract &&\n          MulticallContract &&\n          accountId &&\n          poolId &&\n          tokenAddress &&\n          priceUpdateTxn\n        )\n      ) {\n        throw 'OMFG';\n      }\n      console.log({\n        wallet,\n        CoreProxyContract,\n        MulticallContract,\n        accountId,\n        tokenAddress,\n        priceUpdateTxn,\n      });\n\n      if (priceUpdateTxn.value) {\n        console.log('-> fetchPositionDebtWithPriceUpdate');\n        return fetchPositionDebtWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          accountId,\n          poolId,\n          tokenAddress,\n          priceUpdateTxn,\n        });\n      }\n      console.log('-> fetchPositionDebt');\n      return fetchPositionDebt({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        poolId,\n        tokenAddress,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (positionDebt) => ethers.BigNumber.from(positionDebt),\n    retry: 5,\n    retryDelay: (attempt) => 2 ** attempt * 1000,\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchPositionDebtWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  // const CoreProxyInterface = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  await new Promise((ok) => setTimeout(ok, 500));\n\n  const getPositionDebtTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('getPositionDebt', [accountId, poolId, tokenAddress]),\n    value: 0,\n    requireSuccess: true,\n  };\n  // const Multicall = new ethers.Contract(MulticallContract.address, MulticallContract.abi, provider);\n\n  console.time('fetchPositionDebtWithPriceUpdate');\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const response = await provider.call({\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, getPositionDebtTxn]]),\n    value: priceUpdateTxn.value,\n  });\n  console.timeEnd('fetchPositionDebtWithPriceUpdate');\n  console.log({ response });\n\n  if (response) {\n    const decodedMulticall = MulticallInterface.decodeFunctionResult('aggregate3Value', response);\n    console.log({ decodedMulticall });\n    if (decodedMulticall?.returnData?.[1]?.returnData) {\n      const getPositionDebtTxnData = decodedMulticall.returnData[1].returnData;\n      console.log({ getPositionDebtTxnData });\n      const positionDebt = CoreProxyInterface.decodeFunctionResult('getPositionDebt', getPositionDebtTxnData);\n      return positionDebt.debt;\n    }\n    console.error({ decodedMulticall });\n    throw new Error('Unexpected multicall response');\n  }\n  throw new Error('Empty multicall response');\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchPositionDebt({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  poolId,\n  tokenAddress,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n  console.time('fetchPositionDebt');\n  const positionDebt = await CoreProxy.callStatic.getPositionDebt(accountId, poolId, tokenAddress);\n  console.timeEnd('fetchPositionDebt');\n  return positionDebt;\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useBurnUsd } from './useBurnUsd';\nimport { usePositionDebt } from './usePositionDebt';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function BurnUsd() {\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: positionDebt } = usePositionDebt({\n    accountId,\n    poolId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: systemToken } = useImportSystemToken();\n\n  const { data: accountAvailableUsd } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: systemToken?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const burnUsd = useBurnUsd({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        burnUsd.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Burn {systemToken ? systemToken.symbol : null}\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Available: <b>{renderAmount(accountAvailableUsd, systemToken)}</b>\n        </Text>\n      </Heading>\n      {burnUsd.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{burnUsd.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              burnUsd.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={burnUsd.isPending}\n            isDisabled={!(parsedAmount.gt(0) && accountAvailableUsd && accountAvailableUsd.gte(parsedAmount))}\n          >\n            Burn {systemToken ? systemToken.symbol : null}\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, systemToken)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(positionDebt, systemToken)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import { Button, Heading, Stack } from '@chakra-ui/react';\nimport { useParams } from '@snx-v3/useParams';\nimport React from 'react';\nimport { useCollateralTokens } from './useCollateralTokens';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\n\nexport function CollateralTokens() {\n  const [params, setParams] = useParams();\n  const collateralTokens = useCollateralTokens();\n  const selectedCollateralType = useSelectedCollateralType();\n\n  return (\n    <Stack gap={3}>\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Vaults\n      </Heading>\n      <Stack flexDirection=\"row\" gap={3}>\n        {collateralTokens?.map((token: { address: string; symbol: string }) => (\n          <Button\n            key={token.address}\n            type=\"button\"\n            variant={selectedCollateralType?.address === token.address ? undefined : 'outline'}\n            onClick={() => setParams({ ...params, collateralType: token.address })}\n          >\n            {token.symbol}\n          </Button>\n        ))}\n      </Stack>\n    </Stack>\n  );\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchPositionCollateral({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  poolId,\n  tokenAddress,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n  const positionCollateral = await CoreProxy.getPositionCollateral(accountId, poolId, tokenAddress);\n  return positionCollateral;\n}\n","import { fetchPriceUpdateTxn, useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport type { ethers } from 'ethers';\nimport { delegateCollateral } from './delegateCollateral';\nimport { delegateCollateralWithPriceUpdate } from './delegateCollateralWithPriceUpdate';\nimport { fetchAccountAvailableCollateral } from './fetchAccountAvailableCollateral';\nimport { fetchPositionCollateral } from './fetchPositionCollateral';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function useDelegateCollateral({\n  onSuccess,\n}: {\n  onSuccess: () => void;\n}) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: priceIds } = useAllPriceFeeds();\n  const { data: MulticallContract } = useImportContract('Multicall');\n  const { data: PythERC7412WrapperContract } = useImportContract('PythERC7412Wrapper');\n\n  const queryClient = useQueryClient();\n  return useMutation({\n    retry: false,\n    mutationFn: async (delegateAmountDelta: ethers.BigNumber) => {\n      if (\n        !(\n          CoreProxyContract &&\n          MulticallContract &&\n          PythERC7412WrapperContract &&\n          priceIds &&\n          connectedChain?.id &&\n          walletAddress &&\n          provider &&\n          accountId &&\n          poolId &&\n          collateralType\n        )\n      ) {\n        throw 'OMFG';\n      }\n\n      if (delegateAmountDelta.eq(0)) {\n        throw new Error('Amount required');\n      }\n\n      const freshPriceUpdateTxn = await fetchPriceUpdateTxn({\n        provider,\n        MulticallContract,\n        PythERC7412WrapperContract,\n        priceIds,\n      });\n      console.log('freshPriceUpdateTxn', freshPriceUpdateTxn);\n\n      const freshAccountAvailableCollateral = await fetchAccountAvailableCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        tokenAddress: collateralType.address,\n      });\n      console.log('freshAccountAvailableCollateral', freshAccountAvailableCollateral);\n\n      const hasEnoughDeposit = freshAccountAvailableCollateral.gte(delegateAmountDelta);\n      if (!hasEnoughDeposit) {\n        throw new Error('Not enough deposit');\n      }\n\n      const freshPositionCollateral = await fetchPositionCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        poolId,\n        tokenAddress: collateralType.address,\n      });\n      console.log('freshPositionCollateral', freshPositionCollateral);\n\n      const delegateAmount = freshPositionCollateral.add(delegateAmountDelta);\n      console.log('delegateAmount', delegateAmount);\n\n      if (freshPriceUpdateTxn.value) {\n        console.log('-> delegateCollateralWithPriceUpdate');\n        await delegateCollateralWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          delegateAmount,\n          priceUpdateTxn: freshPriceUpdateTxn,\n        });\n      } else {\n        console.log('-> delegateCollateral');\n        await delegateCollateral({\n          wallet,\n          CoreProxyContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          delegateAmount,\n        });\n      }\n      return { priceUpdated: true };\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error).then();\n      return false;\n    },\n    onSuccess: async ({ priceUpdated }) => {\n      if (priceUpdated) {\n        await queryClient.invalidateQueries({\n          queryKey: [connectedChain?.id, 'PriceUpdateTxn', { priceIds: priceIds?.map((p) => p.slice(0, 8)) }],\n        });\n      }\n\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountAvailableCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'PositionCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            poolId: poolId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'PositionDebt',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n\n      onSuccess();\n    },\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function delegateCollateralWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  delegateAmount,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  delegateAmount: ethers.BigNumber;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  const delegateCollateralTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    delegateAmount,\n    ethers.utils.parseEther('1'), // Leverage\n  ];\n  console.log('delegateCollateralTxnArgs', delegateCollateralTxnArgs);\n\n  const delegateCollateralTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('delegateCollateral', [\n      //\n      ...delegateCollateralTxnArgs,\n    ]),\n    value: 0,\n    requireSuccess: true,\n  };\n  console.log({ delegateCollateralTxn });\n\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n\n  const multicallTxn = {\n    from: walletAddress,\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, delegateCollateralTxn]]),\n    value: priceUpdateTxn.value,\n  };\n  console.log({ multicallTxn });\n\n  console.time('delegateCollateral');\n  const tx: ethers.ContractTransaction = await signer.sendTransaction(multicallTxn);\n  console.timeEnd('delegateCollateral');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function delegateCollateral({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  delegateAmount,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  delegateAmount: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n\n  const delegateCollateralTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    delegateAmount,\n    ethers.utils.parseEther('1'), // Leverage\n  ];\n  console.log('delegateCollateralTxnArgs', delegateCollateralTxnArgs);\n\n  console.time('delegateCollateral');\n  const tx: ethers.ContractTransaction = await CoreProxy.delegateCollateral(...delegateCollateralTxnArgs);\n  console.timeEnd('delegateCollateral');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import { useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchPositionCollateral } from './fetchPositionCollateral';\n\nexport function usePositionCollateral({\n  accountId,\n  poolId,\n  tokenAddress,\n}: {\n  accountId?: ethers.BigNumber;\n  poolId?: ethers.BigNumber;\n  tokenAddress?: string;\n}) {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId && poolId && tokenAddress),\n    queryKey: [\n      connectedChain?.id,\n      'PositionCollateral',\n      {\n        accountId: accountId?.toHexString(),\n        poolId: poolId?.toHexString(),\n        tokenAddress,\n      },\n    ],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId && poolId && tokenAddress)) {\n        throw 'OMFG';\n      }\n      return fetchPositionCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        poolId,\n        tokenAddress,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (positionCollateral) => ethers.BigNumber.from(positionCollateral),\n  });\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useDelegateCollateral } from './useDelegateCollateral';\nimport { usePositionCollateral } from './usePositionCollateral';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function Delegate() {\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: accountAvailableCollateral } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: positionCollateral } = usePositionCollateral({\n    accountId,\n    poolId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const delegate = useDelegateCollateral({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        delegate.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Delegate\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Delegated: <b>{renderAmount(positionCollateral, collateralType)}</b>\n        </Text>\n      </Heading>\n      {delegate.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{delegate.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              delegate.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={delegate.isPending}\n            isDisabled={\n              !(\n                parsedAmount.gt(0) &&\n                accountAvailableCollateral &&\n                accountAvailableCollateral.gte(parsedAmount) &&\n                positionCollateral &&\n                positionCollateral.add(parsedAmount).gte(0)\n              )\n            }\n          >\n            Delegate\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, collateralType)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(accountAvailableCollateral, collateralType)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchTokenAllowance({\n  wallet,\n  tokenAddress,\n  ownerAddress,\n  spenderAddress,\n}: {\n  wallet: WalletState;\n  tokenAddress: string;\n  ownerAddress: string;\n  spenderAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const Token = new ethers.Contract(tokenAddress, ['function allowance(address owner, address spender) view returns (uint256)'], provider);\n  return Token.allowance(ownerAddress, spenderAddress);\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchTokenBalance({\n  wallet,\n  tokenAddress,\n  ownerAddress,\n}: {\n  wallet: WalletState;\n  tokenAddress: string;\n  ownerAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const Token = new ethers.Contract(tokenAddress, ['function balanceOf(address account) view returns (uint256)'], provider);\n  return Token.balanceOf(ownerAddress);\n}\n","import { useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport type { ethers } from 'ethers';\nimport { approveToken } from './approveToken';\nimport { depositCollateral } from './depositCollateral';\nimport { fetchTokenAllowance } from './fetchTokenAllowance';\nimport { fetchTokenBalance } from './fetchTokenBalance';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function useDeposit({ onSuccess }: { onSuccess: () => void }) {\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const errorParser = useErrorParser();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (depositAmount: ethers.BigNumber) => {\n      if (!(wallet && walletAddress && CoreProxyContract && connectedChain?.id && accountId && collateralType)) {\n        throw 'OMFG';\n      }\n\n      if (depositAmount.lte(0)) {\n        throw new Error('Amount required');\n      }\n\n      const freshBalance = await fetchTokenBalance({\n        wallet,\n        ownerAddress: walletAddress,\n        tokenAddress: collateralType?.address,\n      });\n      console.log('freshBalance', freshBalance);\n\n      if (freshBalance.lt(depositAmount)) {\n        throw new Error('Not enough balance');\n      }\n\n      const freshAllowance = await fetchTokenAllowance({\n        wallet,\n        ownerAddress: walletAddress,\n        tokenAddress: collateralType?.address,\n        spenderAddress: CoreProxyContract?.address,\n      });\n      console.log('freshAllowance', freshAllowance);\n\n      if (freshAllowance.lt(depositAmount)) {\n        await approveToken({\n          wallet,\n          tokenAddress: collateralType.address,\n          spenderAddress: CoreProxyContract.address,\n          allowance: depositAmount.sub(freshAllowance),\n        });\n      }\n\n      console.log('-> depositCollateral');\n      await depositCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        tokenAddress: collateralType.address,\n        depositAmount,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    onSuccess: async () => {\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountAvailableCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'PositionCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            poolId: poolId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n\n      onSuccess();\n    },\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function approveToken({\n  wallet,\n  tokenAddress,\n  spenderAddress,\n  allowance,\n}: {\n  wallet: WalletState;\n  tokenAddress: string;\n  spenderAddress: string;\n  allowance: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n  const Token = new ethers.Contract(tokenAddress, ['function approve(address spender, uint256 amount) returns (bool)'], signer);\n  const tx: ethers.ContractTransaction = await Token.approve(spenderAddress, allowance);\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function depositCollateral({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  tokenAddress,\n  depositAmount,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  tokenAddress: string;\n  depositAmount: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n  const tx: ethers.ContractTransaction = await CoreProxy.deposit(\n    //\n    accountId,\n    tokenAddress,\n    depositAmount\n  );\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import { useErrorParser } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchTokenAllowance } from './fetchTokenAllowance';\n\nexport function useTokenAllowance({\n  tokenAddress,\n  ownerAddress,\n  spenderAddress,\n}: {\n  tokenAddress?: string;\n  ownerAddress?: string;\n  spenderAddress?: string;\n}) {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && tokenAddress && ownerAddress && spenderAddress),\n    queryKey: [connectedChain?.id, 'Allowance', { tokenAddress, ownerAddress, spenderAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet && tokenAddress && ownerAddress && spenderAddress)) {\n        throw 'OMFG';\n      }\n      return fetchTokenAllowance({\n        wallet,\n        tokenAddress,\n        ownerAddress,\n        spenderAddress,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (allowance) => ethers.BigNumber.from(allowance),\n    refetchInterval: 5 * 60 * 1000,\n  });\n}\n","import { useErrorParser } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchTokenBalance } from './fetchTokenBalance';\n\nexport function useTokenBalance({\n  tokenAddress,\n  ownerAddress,\n}: {\n  tokenAddress?: string;\n  ownerAddress?: string;\n}) {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && tokenAddress && ownerAddress),\n    queryKey: [connectedChain?.id, 'Balance', { tokenAddress, ownerAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet && tokenAddress && ownerAddress)) {\n        throw 'OMFG';\n      }\n      return fetchTokenBalance({ wallet, tokenAddress, ownerAddress });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (balance) => ethers.BigNumber.from(balance),\n    refetchInterval: 5 * 60 * 1000,\n  });\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useImportContract } from '@synthetixio/react-sdk';\nimport { useConnectWallet } from '@web3-onboard/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useDeposit } from './useDeposit';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useTokenAllowance } from './useTokenAllowance';\nimport { useTokenBalance } from './useTokenBalance';\n\nexport function Deposit() {\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: currentBalance } = useTokenBalance({\n    ownerAddress: walletAddress,\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: currentAllowance } = useTokenAllowance({\n    ownerAddress: walletAddress,\n    tokenAddress: collateralType?.address,\n    spenderAddress: CoreProxyContract?.address,\n  });\n\n  const { data: accountAvailableCollateral } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const deposit = useDeposit({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        deposit.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Deposit\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Deposited: <b>{renderAmount(accountAvailableCollateral, collateralType)}</b>\n        </Text>\n      </Heading>\n      {deposit.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{deposit.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              deposit.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={deposit.isPending}\n            isDisabled={!(parsedAmount.gt(0) && currentBalance && currentBalance.sub(parsedAmount).gte(0))}\n          >\n            {currentAllowance?.gte(parsedAmount) ? 'Deposit' : 'Approve and Deposit'}\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, collateralType)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(currentBalance, collateralType)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useImportContract } from '@synthetixio/react-sdk';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport { useConnectWallet } from '@web3-onboard/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useDeposit } from './useDeposit';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useTokenAllowance } from './useTokenAllowance';\nimport { useTokenBalance } from './useTokenBalance';\n\nexport function DepositUsd() {\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const { data: systemToken } = useImportSystemToken();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: currentBalance } = useTokenBalance({\n    ownerAddress: walletAddress,\n    tokenAddress: systemToken?.address,\n  });\n\n  const { data: currentAllowance } = useTokenAllowance({\n    ownerAddress: walletAddress,\n    tokenAddress: systemToken?.address,\n    spenderAddress: CoreProxyContract?.address,\n  });\n\n  const { data: accountAvailableCollateral } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: systemToken?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, systemToken?.decimals);\n\n  const deposit = useDeposit({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        deposit.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Deposit {systemToken ? systemToken.symbol : null}\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Deposited: <b>{renderAmount(accountAvailableCollateral, systemToken)}</b>\n        </Text>\n      </Heading>\n      {deposit.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{deposit.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              deposit.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={deposit.isPending}\n            isDisabled={!(parsedAmount.gt(0) && currentBalance && currentBalance.sub(parsedAmount).gte(0))}\n          >\n            {currentAllowance?.gte(parsedAmount) ? 'Deposit' : 'Approve and Deposit'}\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, systemToken)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(currentBalance, systemToken)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import { useErrorParser, useImportContract, usePriceUpdateTxn } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport { fetchCollateralPrice } from './fetchCollateralPrice';\nimport { fetchCollateralPriceWithPriceUpdate } from './fetchCollateralPriceWithPriceUpdate';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\n\nexport function useCollateralPrice({\n  tokenAddress,\n}: {\n  tokenAddress?: string;\n}) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const { data: priceIds } = useAllPriceFeeds();\n  const { data: priceUpdateTxn } = usePriceUpdateTxn({ provider, priceIds });\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n  const { data: MulticallContract } = useImportContract('Multicall');\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && CoreProxyContract && MulticallContract && tokenAddress && priceUpdateTxn),\n    queryKey: [connectedChain?.id, 'CollateralPrice', { tokenAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && CoreProxyContract && MulticallContract && tokenAddress && priceUpdateTxn)) {\n        throw 'OMFG';\n      }\n      console.log({\n        wallet,\n        CoreProxyContract,\n        MulticallContract,\n        tokenAddress,\n        priceUpdateTxn,\n      });\n\n      if (priceUpdateTxn.value) {\n        console.log('-> fetchCollateralPriceWithPriceUpdate');\n        return fetchCollateralPriceWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          tokenAddress,\n          priceUpdateTxn,\n        });\n      }\n      console.log('-> fetchCollateralPrice');\n      return fetchCollateralPrice({\n        wallet,\n        CoreProxyContract,\n        tokenAddress,\n      });\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (collateralPrice) => ethers.BigNumber.from(collateralPrice),\n    retry: 5,\n    retryDelay: (attempt) => 2 ** attempt * 1000,\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchCollateralPriceWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  tokenAddress,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  tokenAddress: string;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  await new Promise((ok) => setTimeout(ok, 500));\n\n  const getCollateralPriceTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('getCollateralPrice', [tokenAddress]),\n    value: 0,\n    requireSuccess: true,\n  };\n\n  console.time('fetchCollateralPriceWithPriceUpdate');\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n\n  const blockNumber = await provider.getBlockNumber();\n  const block = await provider.getBlock(blockNumber);\n  console.log({\n    block,\n    now: Math.floor(new Date().getTime() / 1000),\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, getCollateralPriceTxn]]),\n    value: priceUpdateTxn.value,\n  });\n\n  const response = await provider.call({\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, getCollateralPriceTxn]]),\n    value: priceUpdateTxn.value,\n  });\n  console.timeEnd('fetchCollateralPriceWithPriceUpdate');\n  console.log({ response });\n\n  if (response) {\n    const decodedMulticall = MulticallInterface.decodeFunctionResult('aggregate3Value', response);\n    console.log({ decodedMulticall });\n    if (decodedMulticall?.returnData?.[1]?.returnData) {\n      const getCollateralPriceTxnData = decodedMulticall.returnData[1].returnData;\n      console.log({ getCollateralPriceTxnData });\n      const collateralPrice = CoreProxyInterface.decodeFunctionResult('getCollateralPrice', getCollateralPriceTxnData);\n      console.log('>>>>> collateralPrice', collateralPrice);\n      return collateralPrice[0];\n    }\n    console.error({ decodedMulticall });\n    throw new Error('Unexpected multicall response');\n  }\n  throw new Error('Empty multicall response');\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchCollateralPrice({\n  wallet,\n  CoreProxyContract,\n  tokenAddress,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  tokenAddress: string;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n  console.time('fetchCollateralPrice');\n  const collateralPrice = await CoreProxy.getCollateralPrice(tokenAddress);\n  console.timeEnd('fetchCollateralPrice');\n  return collateralPrice;\n}\n","import { fetchPriceUpdateTxn, useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport type { ethers } from 'ethers';\nimport { fetchMintUsd } from './fetchMintUsd';\nimport { fetchMintUsdWithPriceUpdate } from './fetchMintUsdWithPriceUpdate';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function useMintUsd({ onSuccess }: { onSuccess: () => void }) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: systemToken } = useImportSystemToken();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: priceIds } = useAllPriceFeeds();\n  const { data: MulticallContract } = useImportContract('Multicall');\n  const { data: PythERC7412WrapperContract } = useImportContract('PythERC7412Wrapper');\n\n  const queryClient = useQueryClient();\n  return useMutation({\n    retry: false,\n    mutationFn: async (mintUsdAmount: ethers.BigNumber) => {\n      if (\n        !(\n          CoreProxyContract &&\n          MulticallContract &&\n          PythERC7412WrapperContract &&\n          priceIds &&\n          connectedChain?.id &&\n          wallet &&\n          walletAddress &&\n          provider &&\n          accountId &&\n          poolId &&\n          collateralType\n        )\n      ) {\n        throw 'OMFG';\n      }\n\n      if (mintUsdAmount.eq(0)) {\n        throw new Error('Amount required');\n      }\n\n      const freshPriceUpdateTxn = await fetchPriceUpdateTxn({\n        provider,\n        MulticallContract,\n        PythERC7412WrapperContract,\n        priceIds,\n      });\n      console.log({ freshPriceUpdateTxn });\n\n      if (freshPriceUpdateTxn.value) {\n        console.log('-> mintUsdWithPriceUpdate');\n        await fetchMintUsdWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          mintUsdAmount,\n          priceUpdateTxn: freshPriceUpdateTxn,\n        });\n      } else {\n        console.log('-> mintUsd');\n        await fetchMintUsd({\n          wallet,\n          CoreProxyContract,\n          accountId,\n          poolId,\n          tokenAddress: collateralType.address,\n          mintUsdAmount,\n        });\n      }\n      return { priceUpdated: true };\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error).then();\n      return false;\n    },\n    onSuccess: async ({ priceUpdated }) => {\n      if (priceUpdated) {\n        await queryClient.invalidateQueries({\n          queryKey: [connectedChain?.id, 'PriceUpdateTxn', { priceIds: priceIds?.map((p) => p.slice(0, 8)) }],\n        });\n      }\n\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'PositionDebt',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountAvailableCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress: systemToken?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [connectedChain?.id, 'AccountLastInteraction', { accountId: accountId?.toHexString() }],\n      });\n\n      onSuccess();\n    },\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchMintUsdWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  mintUsdAmount,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  mintUsdAmount: ethers.BigNumber;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  const mintUsdTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    mintUsdAmount,\n  ];\n  console.log({ mintUsdTxnArgs });\n\n  const mintUsdTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('mintUsd', [\n      //\n      ...mintUsdTxnArgs,\n    ]),\n    value: 0,\n    requireSuccess: true,\n  };\n  console.log({ mintUsdTxn });\n\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n\n  const multicallTxn = {\n    from: walletAddress,\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, mintUsdTxn]]),\n    value: priceUpdateTxn.value,\n  };\n  console.log({ multicallTxn });\n\n  console.time('mintUsd');\n  const tx: ethers.ContractTransaction = await signer.sendTransaction(multicallTxn);\n  console.timeEnd('mintUsd');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchMintUsd({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  poolId,\n  tokenAddress,\n  mintUsdAmount,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  poolId: ethers.BigNumber;\n  tokenAddress: string;\n  mintUsdAmount: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n\n  const mintUsdTxnArgs = [\n    //\n    accountId,\n    poolId,\n    tokenAddress,\n    mintUsdAmount,\n  ];\n  console.log('mintUsdTxnArgs', mintUsdTxnArgs);\n\n  console.time('mintUsd');\n  const tx: ethers.ContractTransaction = await CoreProxy.mintUsd(...mintUsdTxnArgs);\n  console.timeEnd('mintUsd');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useCollateralPrice } from './useCollateralPrice';\nimport { useMintUsd } from './useMintUsd';\nimport { usePositionCollateral } from './usePositionCollateral';\nimport { usePositionDebt } from './usePositionDebt';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function MintUsd() {\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: positionCollateral } = usePositionCollateral({\n    accountId,\n    poolId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: collateralPrice } = useCollateralPrice({\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: positionDebt } = usePositionDebt({\n    accountId,\n    poolId,\n    tokenAddress: collateralType?.address,\n  });\n  const readableDebt = positionDebt?.abs().gte(ethers.utils.parseUnits('0.1', 18)) ? positionDebt : ethers.BigNumber.from(0);\n\n  const maxDebt = React.useMemo(() => {\n    if (positionCollateral && collateralPrice && collateralType && positionDebt) {\n      return positionCollateral.mul(collateralPrice).div(collateralType.issuanceRatioD18).sub(positionDebt);\n    }\n  }, [positionCollateral, collateralPrice, collateralType, positionDebt]);\n\n  const { data: systemToken } = useImportSystemToken();\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const mintUsd = useMintUsd({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        mintUsd.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Mint {systemToken ? systemToken.symbol : null}\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Debt: <b>{renderAmount(readableDebt, systemToken)}</b>\n        </Text>\n      </Heading>\n      {mintUsd.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{mintUsd.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              mintUsd.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button type=\"submit\" isLoading={mintUsd.isPending} isDisabled={!(parsedAmount.gt(0) && maxDebt && maxDebt.gte(parsedAmount))}>\n            Mint {systemToken ? systemToken.symbol : null}\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, systemToken)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(maxDebt, systemToken)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import { Button, Heading, InputGroup, Stack } from '@chakra-ui/react';\nimport { useErrorParser, useImportContract, useImportRewardsDistributors } from '@synthetixio/react-sdk';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport { renderAmount } from './renderAmount';\nimport { useDeposit } from './useDeposit';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nfunction ClaimRewards({\n  accountId,\n  rewardsDistributor,\n}: {\n  accountId: ethers.BigNumber;\n  rewardsDistributor: {\n    address: string;\n    name: string;\n    poolId: string;\n    collateralType: {\n      address: string;\n      symbol: string;\n      name: string;\n      decimals: number;\n    };\n    payoutToken: {\n      address: string;\n      symbol: string;\n      name: string;\n      decimals: number;\n    };\n    rewardManager: string;\n    isRegistered: boolean;\n  };\n}) {\n  const claim = useDeposit({\n    onSuccess: () => {},\n  });\n\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  const { data: rewardsAmount } = useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && walletAddress && CoreProxyContract && accountId && rewardsDistributor),\n    queryKey: [\n      connectedChain?.id,\n      'AvailableRewards',\n      {\n        accountId: accountId?.toHexString(),\n        rewardsDistributor: rewardsDistributor?.address,\n        collateralType: rewardsDistributor?.collateralType?.address,\n      },\n    ],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && walletAddress && CoreProxyContract && accountId && rewardsDistributor)) {\n        throw 'OMFG';\n      }\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const signer = provider.getSigner(walletAddress);\n      const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n      console.time('useAvailableRewards');\n      const availableRewards = await CoreProxy.callStatic.claimRewards(\n        accountId,\n        rewardsDistributor.poolId,\n        rewardsDistributor.collateralType.address,\n        rewardsDistributor.address\n      );\n      console.timeEnd('useAvailableRewards');\n      return availableRewards;\n    },\n    select: (availableRewards) => ethers.BigNumber.from(availableRewards),\n    refetchInterval: 5 * 60 * 1000,\n  });\n\n  const queryClient = useQueryClient();\n  const claimRewards = useMutation({\n    retry: false,\n    mutationFn: async () => {\n      if (!(CoreProxyContract && connectedChain?.id && walletAddress && wallet?.provider && accountId && rewardsDistributor)) {\n        throw 'OMFG';\n      }\n\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const signer = provider.getSigner(walletAddress);\n      const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n\n      const claimRewardsTxnArgs = [\n        //\n        accountId,\n        rewardsDistributor.poolId,\n        rewardsDistributor.collateralType.address,\n        rewardsDistributor.address,\n      ];\n      console.log({ claimRewardsTxnArgs });\n\n      console.time('claimRewards');\n      const tx: ethers.ContractTransaction = await CoreProxy.claimRewards(...claimRewardsTxnArgs);\n      console.timeEnd('claimRewards');\n\n      console.log({ tx });\n      if (window.$tx) {\n        window.$tx.push(tx);\n      } else {\n        window.$tx = [tx];\n      }\n      const txResult = await tx.wait();\n      console.log({ txResult });\n      if (window.$txResult) {\n        window.$txResult.push(txResult);\n      } else {\n        window.$txResult = [txResult];\n      }\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    onSuccess: async () => {\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AvailableRewards',\n          {\n            accountId: accountId?.toHexString(),\n            rewardsDistributor: rewardsDistributor?.address,\n            collateralType: rewardsDistributor?.collateralType?.address,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'Balance',\n          {\n            tokenAddress: rewardsDistributor?.collateralType?.address,\n            ownerAddress: walletAddress,\n          },\n        ],\n      });\n    },\n  });\n\n  return (\n    <Button type=\"button\" isLoading={claim.isPending} isDisabled={!rewardsAmount?.gt(0)} onClick={() => claimRewards.mutate()}>\n      {rewardsAmount?.gt(0)\n        ? `Claim ${renderAmount(rewardsAmount, rewardsDistributor.payoutToken)}`\n        : `No ${rewardsDistributor.payoutToken.symbol} rewards available for ${rewardsDistributor.collateralType.symbol}`}\n    </Button>\n  );\n}\n\nexport function Rewards() {\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n  const accountId = useSelectedAccountId();\n\n  const { data: rewardsDistributors } = useImportRewardsDistributors();\n  return (\n    <Stack gap={3}>\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Rewards\n      </Heading>\n      <InputGroup gap={3}>\n        {collateralType && rewardsDistributors && poolId && accountId ? (\n          rewardsDistributors\n            .filter((rd) => rd.collateralType.address.toLowerCase() === collateralType.address.toLowerCase() && poolId.eq(rd.poolId))\n            .map((rd) => <ClaimRewards key={rd.address} rewardsDistributor={rd} accountId={accountId} />)\n        ) : (\n          <Button type=\"button\" isDisabled>\n            No rewards available {collateralType ? `for ${collateralType.symbol}` : null}\n          </Button>\n        )}\n      </InputGroup>\n    </Stack>\n  );\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useDelegateCollateral } from './useDelegateCollateral';\nimport { usePositionCollateral } from './usePositionCollateral';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useSelectedPoolId } from './useSelectedPoolId';\n\nexport function Undelegate() {\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n  const poolId = useSelectedPoolId();\n\n  const { data: positionCollateral } = usePositionCollateral({\n    accountId,\n    poolId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const undelegate = useDelegateCollateral({\n    onSuccess: () => setValue(''),\n  });\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        undelegate.mutate(parsedAmount.mul(-1));\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Undelegate\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          &nbsp;\n        </Text>\n      </Heading>\n      {undelegate.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{undelegate.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              undelegate.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={undelegate.isPending}\n            isDisabled={!(parsedAmount.gt(0) && positionCollateral && positionCollateral.sub(parsedAmount).gte(0))}\n          >\n            Undelegate\n            {parsedAmount.gt(0) ? ` ${renderAmount(parsedAmount, collateralType)}` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(positionCollateral, collateralType)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import { fetchPriceUpdateTxn, useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport type { ethers } from 'ethers';\nimport { fetchAccountAvailableCollateral } from './fetchAccountAvailableCollateral';\nimport { fetchWithdrawCollateral } from './fetchWithdrawCollateral';\nimport { fetchWithdrawCollateralWithPriceUpdate } from './fetchWithdrawCollateralWithPriceUpdate';\nimport { useAllPriceFeeds } from './useAllPriceFeeds';\nimport { useProvider } from './useProvider';\nimport { useSelectedAccountId } from './useSelectedAccountId';\n\nexport function useWithdraw({\n  tokenAddress,\n  onSuccess,\n}: {\n  tokenAddress?: string;\n  onSuccess: () => void;\n}) {\n  const provider = useProvider();\n  const errorParser = useErrorParser();\n\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n\n  const { data: priceIds } = useAllPriceFeeds();\n\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n  const { data: MulticallContract } = useImportContract('Multicall');\n  const { data: PythERC7412WrapperContract } = useImportContract('PythERC7412Wrapper');\n\n  const queryClient = useQueryClient();\n  return useMutation({\n    retry: false,\n    mutationFn: async (withdrawAmount: ethers.BigNumber) => {\n      if (\n        !(\n          CoreProxyContract &&\n          MulticallContract &&\n          PythERC7412WrapperContract &&\n          priceIds &&\n          connectedChain?.id &&\n          walletAddress &&\n          provider &&\n          accountId &&\n          tokenAddress\n        )\n      ) {\n        throw 'OMFG';\n      }\n\n      if (withdrawAmount.eq(0)) {\n        throw new Error('Amount required');\n      }\n\n      const freshPriceUpdateTxn = await fetchPriceUpdateTxn({\n        provider,\n        MulticallContract,\n        PythERC7412WrapperContract,\n        priceIds,\n      });\n      console.log('freshPriceUpdateTxn', freshPriceUpdateTxn);\n\n      const freshAccountAvailableCollateral = await fetchAccountAvailableCollateral({\n        wallet,\n        CoreProxyContract,\n        accountId,\n        tokenAddress,\n      });\n      console.log('freshAccountAvailableCollateral', freshAccountAvailableCollateral);\n\n      const hasEnoughDeposit = freshAccountAvailableCollateral.gte(withdrawAmount);\n      if (!hasEnoughDeposit) {\n        throw new Error('Not enough unlocked collateral');\n      }\n\n      if (freshPriceUpdateTxn.value) {\n        console.log('-> withdrawCollateralWithPriceUpdate');\n        await fetchWithdrawCollateralWithPriceUpdate({\n          wallet,\n          CoreProxyContract,\n          MulticallContract,\n          accountId,\n          tokenAddress,\n          withdrawAmount,\n          priceUpdateTxn: freshPriceUpdateTxn,\n        });\n      } else {\n        console.log('-> withdrawCollateral');\n        await fetchWithdrawCollateral({\n          wallet,\n          CoreProxyContract,\n          accountId,\n          tokenAddress,\n          withdrawAmount,\n        });\n      }\n      return { priceUpdated: true };\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    onSuccess: async ({ priceUpdated }) => {\n      if (priceUpdated) {\n        await queryClient.invalidateQueries({\n          queryKey: [connectedChain?.id, 'PriceUpdateTxn', { priceIds: priceIds?.map((p) => p.slice(0, 8)) }],\n        });\n      }\n\n      // Intentionally do not await\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'AccountAvailableCollateral',\n          {\n            accountId: accountId?.toHexString(),\n            tokenAddress,\n          },\n        ],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\n          connectedChain?.id,\n          'Balance',\n          {\n            tokenAddress,\n            ownerAddress: walletAddress,\n          },\n        ],\n      });\n\n      onSuccess();\n    },\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchWithdrawCollateralWithPriceUpdate({\n  wallet,\n  CoreProxyContract,\n  MulticallContract,\n  accountId,\n  tokenAddress,\n  withdrawAmount,\n  priceUpdateTxn,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  MulticallContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  tokenAddress: string;\n  withdrawAmount: ethers.BigNumber;\n  priceUpdateTxn: {\n    target: string;\n    callData: string;\n    value: number;\n    requireSuccess: boolean;\n  };\n}) {\n  const CoreProxyInterface = new ethers.utils.Interface(CoreProxyContract.abi);\n  const MulticallInterface = new ethers.utils.Interface(MulticallContract.abi);\n\n  const withdrawCollateralTxnArgs = [\n    //\n    accountId,\n    tokenAddress,\n    withdrawAmount,\n  ];\n  console.log({ withdrawCollateralTxnArgs });\n\n  const withdrawCollateralTxn = {\n    target: CoreProxyContract.address,\n    callData: CoreProxyInterface.encodeFunctionData('withdraw', [\n      //\n      ...withdrawCollateralTxnArgs,\n    ]),\n    value: 0,\n    requireSuccess: true,\n  };\n  console.log({ withdrawCollateralTxn });\n\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n\n  const multicallTxn = {\n    from: walletAddress,\n    to: MulticallContract.address,\n    data: MulticallInterface.encodeFunctionData('aggregate3Value', [[priceUpdateTxn, withdrawCollateralTxn]]),\n    value: priceUpdateTxn.value,\n  };\n  console.log({ multicallTxn });\n\n  console.time('withdrawCollateral');\n  const tx: ethers.ContractTransaction = await signer.sendTransaction(multicallTxn);\n  console.timeEnd('withdrawCollateral');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchWithdrawCollateral({\n  wallet,\n  CoreProxyContract,\n  accountId,\n  tokenAddress,\n  withdrawAmount,\n}: {\n  wallet: WalletState;\n  CoreProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  tokenAddress: string;\n  withdrawAmount: ethers.BigNumber;\n}) {\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const signer = provider.getSigner(walletAddress);\n  const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n\n  const withdrawCollateralTxnArgs = [\n    //\n    accountId,\n    tokenAddress,\n    withdrawAmount,\n  ];\n  console.log({ withdrawCollateralTxnArgs });\n\n  console.time('withdrawCollateral');\n  const tx: ethers.ContractTransaction = await CoreProxy.withdraw(...withdrawCollateralTxnArgs);\n  console.timeEnd('withdrawCollateral');\n\n  console.log({ tx });\n  if (window.$tx) {\n    window.$tx.push(tx);\n  } else {\n    window.$tx = [tx];\n  }\n  const txResult = await tx.wait();\n  console.log({ txResult });\n  if (window.$txResult) {\n    window.$txResult.push(txResult);\n  } else {\n    window.$txResult = [txResult];\n  }\n\n  return txResult;\n}\n","import React from 'react';\nimport { useAccountLastInteraction } from './useAccountLastInteraction';\nimport { useAccountTimeoutWithdraw } from './useAccountTimeoutWithdraw';\nimport { useSelectedAccountId } from './useSelectedAccountId';\n\nexport function useWithdrawTimer() {\n  const accountId = useSelectedAccountId();\n  const { data: accountTimeoutWithdraw } = useAccountTimeoutWithdraw();\n  const { data: accountLastInteraction } = useAccountLastInteraction({\n    accountId,\n  });\n  const unlockUnixtime =\n    accountLastInteraction && accountTimeoutWithdraw ? accountLastInteraction.add(accountTimeoutWithdraw).toNumber() : 0;\n  const [h, setH] = React.useState(0);\n  const [m, setM] = React.useState(0);\n  const [s, setS] = React.useState(0);\n\n  React.useEffect(() => {\n    const interval = window.setInterval(() => {\n      const unlockTimeout = unlockUnixtime ? unlockUnixtime - Math.floor(Date.now() / 1000) : 0;\n      const hours = Math.max(0, Math.floor(unlockTimeout / 3600));\n      const minutes = Math.max(0, Math.floor((unlockTimeout - hours * 3600) / 60));\n      const seconds = Math.max(0, unlockTimeout - hours * 3600 - minutes * 60);\n      if (hours === 0 && minutes === 0 && seconds === 0) {\n        window.clearInterval(interval);\n      }\n      setH(hours);\n      setM(minutes);\n      if (hours === 0 && minutes === 0) {\n        setS(seconds);\n      }\n    }, 1000);\n    return () => window.clearInterval(interval);\n  }, [unlockUnixtime]);\n\n  return { h, m, s };\n}\n","import { useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function useAccountTimeoutWithdraw() {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && CoreProxyContract),\n    queryKey: [connectedChain?.id, 'ConfigUint accountTimeoutWithdraw'],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && CoreProxyContract)) {\n        throw 'OMFG';\n      }\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n\n      console.time('useAccountTimeoutWithdraw');\n      const accountTimeoutWithdraw = await CoreProxy.getConfigUint(ethers.utils.formatBytes32String('accountTimeoutWithdraw'));\n      console.timeEnd('useAccountTimeoutWithdraw');\n      return accountTimeoutWithdraw;\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (accountTimeoutWithdraw) => ethers.BigNumber.from(accountTimeoutWithdraw),\n  });\n}\n","import { useErrorParser, useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function useAccountLastInteraction({\n  accountId,\n}: {\n  accountId?: ethers.BigNumber;\n}) {\n  const errorParser = useErrorParser();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId),\n    queryKey: [connectedChain?.id, 'AccountLastInteraction', { accountId: accountId?.toHexString() }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && wallet?.provider && CoreProxyContract && accountId)) {\n        throw 'OMFG';\n      }\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, provider);\n\n      console.time('useAccountLastInteraction');\n      const accountLastInteraction = CoreProxy.getAccountLastInteraction(accountId);\n      console.timeEnd('useAccountLastInteraction');\n      return accountLastInteraction;\n    },\n    throwOnError: (error) => {\n      // TODO: show toast\n      errorParser(error);\n      return false;\n    },\n    select: (accountLastInteraction) => ethers.BigNumber.from(accountLastInteraction),\n    refetchInterval: 5 * 60 * 1000,\n  });\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useConnectWallet } from '@web3-onboard/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useSelectedCollateralType } from './useSelectedCollateralType';\nimport { useTokenBalance } from './useTokenBalance';\nimport { useWithdraw } from './useWithdraw';\nimport { useWithdrawTimer } from './useWithdrawTimer';\n\nexport function WithdrawCollateral() {\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const collateralType = useSelectedCollateralType();\n\n  const { data: accountAvailableCollateral } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: collateralType?.address,\n  });\n\n  const { data: currentBalance } = useTokenBalance({\n    ownerAddress: walletAddress,\n    tokenAddress: collateralType?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, collateralType?.decimals);\n\n  const withdraw = useWithdraw({\n    tokenAddress: collateralType?.address,\n    onSuccess: () => setValue(''),\n  });\n\n  const withdrawTimer = useWithdrawTimer();\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        withdraw.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Withdraw {collateralType ? collateralType.symbol : null}\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Balance: <b>{renderAmount(currentBalance, collateralType)}</b>\n        </Text>\n      </Heading>\n      {withdraw.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{withdraw.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              withdraw.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={withdraw.isPending}\n            isDisabled={\n              !(\n                parsedAmount.gt(0) &&\n                accountAvailableCollateral &&\n                accountAvailableCollateral.sub(parsedAmount).gte(0) &&\n                withdrawTimer.h === 0 &&\n                withdrawTimer.m === 0 &&\n                withdrawTimer.s === 0\n              )\n            }\n          >\n            Withdraw\n            {withdrawTimer.h === 0 && withdrawTimer.m === 0 && withdrawTimer.s === 0\n              ? parsedAmount.gt(0)\n                ? ` ${renderAmount(parsedAmount, collateralType)}`\n                : null\n              : null}\n            {withdrawTimer.h === 0 && withdrawTimer.m === 0 && withdrawTimer.s > 0 ? ` in ${withdrawTimer.s}s` : null}\n            {withdrawTimer.h === 0 && withdrawTimer.m > 0 ? ` in ${withdrawTimer.m}m` : null}\n            {withdrawTimer.h > 0 ? ` in ${withdrawTimer.h}h` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(accountAvailableCollateral, collateralType)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  Heading,\n  Input,\n  InputGroup,\n  Stack,\n  Text,\n} from '@chakra-ui/react';\nimport { useImportSystemToken } from '@synthetixio/react-sdk';\nimport { useConnectWallet } from '@web3-onboard/react';\nimport React from 'react';\nimport { parseAmount } from './parseAmount';\nimport { renderAmount } from './renderAmount';\nimport { useAccountAvailableCollateral } from './useAccountAvailableCollateral';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { useTokenBalance } from './useTokenBalance';\nimport { useWithdraw } from './useWithdraw';\nimport { useWithdrawTimer } from './useWithdrawTimer';\n\nexport function WithdrawUsd() {\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n\n  const accountId = useSelectedAccountId();\n  const { data: systemToken } = useImportSystemToken();\n\n  const { data: accountAvailableCollateral } = useAccountAvailableCollateral({\n    accountId,\n    tokenAddress: systemToken?.address,\n  });\n\n  const { data: currentBalance } = useTokenBalance({\n    ownerAddress: walletAddress,\n    tokenAddress: systemToken?.address,\n  });\n\n  const [value, setValue] = React.useState('');\n  const parsedAmount = parseAmount(value, systemToken?.decimals);\n\n  const withdraw = useWithdraw({\n    tokenAddress: systemToken?.address,\n    onSuccess: () => setValue(''),\n  });\n\n  const withdrawTimer = useWithdrawTimer();\n\n  return (\n    <Stack\n      gap={3}\n      as=\"form\"\n      method=\"POST\"\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        withdraw.mutate(parsedAmount);\n      }}\n    >\n      <Heading color=\"gray.50\" fontSize=\"2rem\" lineHeight=\"120%\">\n        Withdraw {systemToken ? systemToken.symbol : null}\n        <Text as=\"span\" ml={4} fontSize=\"1rem\" fontWeight=\"normal\">\n          Balance: <b>{renderAmount(currentBalance, systemToken)}</b>\n        </Text>\n      </Heading>\n      {withdraw.isError ? (\n        <Alert status=\"error\" maxWidth=\"40rem\">\n          <AlertIcon />\n          <AlertTitle>{withdraw.error.message}</AlertTitle>\n        </Alert>\n      ) : null}\n      <FormControl>\n        <InputGroup gap={3}>\n          <Input\n            required\n            placeholder=\"Enter amount\"\n            value={value}\n            onChange={(e) => {\n              withdraw.reset();\n              setValue(e.target.value);\n            }}\n            maxWidth=\"10rem\"\n          />\n          <Button\n            type=\"submit\"\n            isLoading={withdraw.isPending}\n            isDisabled={\n              !(\n                parsedAmount.gt(0) &&\n                accountAvailableCollateral &&\n                accountAvailableCollateral.sub(parsedAmount).gte(0) &&\n                withdrawTimer.h === 0 &&\n                withdrawTimer.m === 0 &&\n                withdrawTimer.s === 0\n              )\n            }\n          >\n            Withdraw\n            {withdrawTimer.h === 0 && withdrawTimer.m === 0 && withdrawTimer.s === 0\n              ? parsedAmount.gt(0)\n                ? ` ${renderAmount(parsedAmount, systemToken)}`\n                : null\n              : null}\n            {withdrawTimer.h === 0 && withdrawTimer.m === 0 && withdrawTimer.s > 0 ? ` in ${withdrawTimer.s}s` : null}\n            {withdrawTimer.h === 0 && withdrawTimer.m > 0 ? ` in ${withdrawTimer.m}m` : null}\n            {withdrawTimer.h > 0 ? ` in ${withdrawTimer.h}h` : null}\n          </Button>\n        </InputGroup>\n        <FormHelperText>\n          Max: <b>{renderAmount(accountAvailableCollateral, systemToken)}</b>\n        </FormHelperText>\n      </FormControl>\n    </Stack>\n  );\n}\n","import { Flex } from '@chakra-ui/react';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { BurnUsd } from './BurnUsd';\nimport { CollateralTokens } from './CollateralTokens';\nimport { Delegate } from './Delegate';\nimport { Deposit } from './Deposit';\nimport { DepositUsd } from './DepositUsd';\nimport { MintUsd } from './MintUsd';\nimport { Rewards } from './Rewards';\nimport { Undelegate } from './Undelegate';\nimport { WithdrawCollateral } from './WithdrawCollateral';\nimport { WithdrawUsd } from './WithdrawUsd';\n\nexport function HomePage() {\n  return (\n    <Flex flexDir=\"column\" mb={20} gap={10}>\n      <Helmet>\n        <title>Synthetix Liquidity V3</title>\n        <meta name=\"description\" content=\"Synthetix V3 - Dashboard\" />\n      </Helmet>\n      <Rewards />\n      <CollateralTokens />\n      <Deposit />\n      <DepositUsd />\n      <Flex flexDir=\"row\" gap={10}>\n        <Delegate />\n        <Undelegate />\n      </Flex>\n      <Flex flexDir=\"row\" gap={10}>\n        <MintUsd />\n        <BurnUsd />\n      </Flex>\n      <WithdrawCollateral />\n      <WithdrawUsd />\n    </Flex>\n  );\n}\n","import { Flex, Heading, Link } from '@chakra-ui/react';\nimport Head from 'react-helmet';\nimport { Link as NavLink } from 'react-router-dom';\n\nexport const NotFoundPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Not Found</title>\n      </Head>\n      <Flex height=\"100%\" direction=\"column\" position=\"relative\" alignItems=\"center\" justifyContent=\"center\" flex=\"1\">\n        <Heading fontSize=\"5xl\">Not found</Heading>\n\n        <Link as={NavLink} to=\"/\" color=\"cyan.500\">\n          Return to Home\n        </Link>\n      </Flex>\n    </>\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\nimport { AdvancedRealTimeChart } from \"react-ts-tradingview-widgets\";\n\nexport function PriceChart() {\n  const marketSymbol = \"ETH\";\n\n  return (\n    <Box height=\"100%\" w=\"100%\">\n      <AdvancedRealTimeChart\n        theme=\"dark\"\n        autosize\n        symbol={`PYTH:${marketSymbol?.toUpperCase()}USD`}\n      ></AdvancedRealTimeChart>\n    </Box>\n  );\n}\n","import type { ethers } from 'ethers';\n\nexport function renderAccountId(accountId?: ethers.BigNumber) {\n  if (!accountId) {\n    return '---';\n  }\n  const hex = accountId.toHexString();\n  // auto-generated 0x80000000000000000000000000000008 value\n  if (hex.length === 34) {\n    return `0x...${hex.slice(-4)}`;\n  }\n  return `#${accountId}`;\n}\n","import { useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function usePerpsAccounts() {\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const { data: PerpsAccountProxyContract } = useImportContract('PerpsAccountProxy');\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && walletAddress && wallet?.provider && PerpsAccountProxyContract),\n    queryKey: [connectedChain?.id, 'Accounts', { ownerAddress: walletAddress }],\n    queryFn: async () => {\n      if (!(connectedChain?.id && walletAddress && wallet?.provider && PerpsAccountProxyContract)) throw 'OMFG';\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const PerpsAccountProxy = new ethers.Contract(PerpsAccountProxyContract.address, PerpsAccountProxyContract.abi, provider);\n      const numberOfAccountTokens = await PerpsAccountProxy.balanceOf(walletAddress);\n      if (numberOfAccountTokens.eq(0)) {\n        // No accounts created yet\n        return [];\n      }\n      const accountIndexes = Array.from(Array(numberOfAccountTokens.toNumber()).keys());\n      const accounts = await Promise.all(accountIndexes.map((i) => PerpsAccountProxy.tokenOfOwnerByIndex(walletAddress, i)));\n      return accounts;\n    },\n    select: (accounts) => accounts.map((accountId) => ethers.BigNumber.from(accountId)),\n  });\n}\n","import { useParams } from '@snx-v3/useParams';\nimport { useImportContract } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function useCreatePerpsAccount() {\n  const [params, setParams] = useParams();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const queryClient = useQueryClient();\n  const { data: PerpsMarketProxyContract } = useImportContract('PerpsMarketProxy');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!(connectedChain?.id && PerpsMarketProxyContract && walletAddress && wallet?.provider)) throw 'OMFG';\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const signer = provider.getSigner(walletAddress);\n      const PerpsMarketProxy = new ethers.Contract(PerpsMarketProxyContract.address, PerpsMarketProxyContract.abi, signer);\n      const tx: ethers.ContractTransaction = await PerpsMarketProxy['createAccount()']();\n      console.log({ tx });\n      if (window.$tx) {\n        window.$tx.push(tx);\n      } else {\n        window.$tx = [tx];\n      }\n      const txResult = await tx.wait();\n      console.log({ txResult });\n      if (window.$txResult) {\n        window.$txResult.push(txResult);\n      } else {\n        window.$txResult = [txResult];\n      }\n\n      const event = txResult.events?.find((e) => e.event === 'AccountCreated');\n      if (event) {\n        const accountId = event?.args?.accountId?.toString();\n        if (accountId) {\n          queryClient.setQueryData([connectedChain.id, 'Accounts', { ownerAddress: walletAddress }], (oldData: string[]) =>\n            oldData.concat([accountId])\n          );\n          setParams({ ...params, accountId: accountId.toHexString() });\n        }\n      }\n\n      return txResult;\n    },\n  });\n}\n","import { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Button, Menu, MenuButton, MenuDivider, MenuItem, MenuItemOption, MenuList, MenuOptionGroup } from '@chakra-ui/react';\nimport { useParams } from '@snx-v3/useParams';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport React from 'react';\nimport { renderAccountId } from './renderAccountId';\nimport { usePerpsAccounts } from './usePerpsAccounts';\nimport { useCreatePerpsAccount } from './useCreatePerpsAccount';\nimport { useSelectedAccountId } from './useSelectedAccountId';\n\nexport function PerpsUserMenu() {\n  const [{ chains, connectedChain }, setChain] = useSetChain();\n  const [{ wallet }, connect, disconnect] = useConnectWallet();\n\n  const isChainSupported = React.useMemo(() => {\n    return chains.some((chain) => chain.id === connectedChain?.id);\n  }, [chains, connectedChain?.id]);\n\n  const [params, setParams] = useParams();\n  const { data: accounts } = usePerpsAccounts();\n  const createAccount = useCreatePerpsAccount();\n  const accountId = useSelectedAccountId();\n\n  return (\n    <>\n      {!wallet ? (\n        <Button type=\"button\" onClick={() => connect()}>\n          Connect\n        </Button>\n      ) : null}\n      {wallet && !isChainSupported ? (\n        <Button type=\"button\" onClick={() => setChain({ chainId: chains[0].id })}>\n          Switch to {chains[0].label}\n        </Button>\n      ) : null}\n      {accounts && !accounts.length ? (\n        <Button type=\"button\" onClick={() => createAccount.mutate()}>\n          Create account\n        </Button>\n      ) : null}\n\n      {wallet?.accounts?.[0]?.address ? (\n        <Menu>\n          <MenuButton as={Button} variant=\"text\" rightIcon={<ChevronDownIcon />}>\n            {wallet.accounts[0].address.slice(0, 5)} ... {wallet.accounts[0].address.slice(-3)}\n          </MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => navigator.clipboard.writeText(wallet.accounts[0].address)}>Copy address</MenuItem>\n\n            {accounts && accounts.length > 0 ? (\n              <>\n                <MenuDivider />\n                <MenuOptionGroup\n                  title=\"Accounts\"\n                  type=\"radio\"\n                  defaultValue={accountId?.toHexString() ?? ''}\n                  value={accountId?.toHexString() ?? ''}\n                  onChange={(value) => setParams({ ...params, accountId: `${value}` })}\n                >\n                  {accounts.map((id) => (\n                    <MenuItemOption key={id.toHexString()} value={id.toHexString()}>\n                      {renderAccountId(id)}\n                    </MenuItemOption>\n                  ))}\n                </MenuOptionGroup>\n              </>\n            ) : null}\n            {accounts && !accounts.length ? (\n              <>\n                <MenuDivider />\n                <MenuOptionGroup title=\"Accounts\" type=\"radio\" defaultValue=\"0\">\n                  <MenuItemOption value=\"0\">No accounts</MenuItemOption>\n                </MenuOptionGroup>\n              </>\n            ) : null}\n\n            <MenuDivider />\n            <MenuItem onClick={() => disconnect({ label: wallet.label })}>Disconnect</MenuItem>\n          </MenuList>\n        </Menu>\n      ) : null}\n    </>\n  );\n}\n","import { Box, Button, FormControl, FormHelperText, FormLabel, Input, InputGroup, InputLeftAddon, InputRightAddon, Radio, RadioGroup, Select, Stack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { PerpsUserMenu } from \"./PerpsUserMenu\";\n\nexport function Trade() {\n  const [longShort, setLongShort] = React.useState('long');\n  const [account, setAccount] = React.useState('');\n  const [collateral, setCollateral] = React.useState('');\n  const [leverage, setLeverage] = React.useState('');\n  const [market, setMarket] = React.useState('ETH');\n\n  const availableCollateral = 0;\n\n  const handleCollateralChange = (e) => {\n    setCollateral(e.target.value);\n  };\n\n  const handleLeverageChange = (e) => {\n    setLeverage(e.target.value);\n  };\n\n  const handleAccountChange = (e) => {\n    setAccount(e.target.value);\n  };\n\n  const handleMarketChange = (e) => {\n    setMarket(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    console.log({ longShort, account, collateral, leverage });\n  };\n\n  return (\n    <>\n      <PerpsUserMenu />\n      <Box p={6} border=\"1px solid\" borderColor=\"gray.700\" borderRadius=\"md\">\n        <FormControl mb={2}>\n        <FormLabel>Market</FormLabel>\n        <Select placeholder='Select a market' mb=\"4\" value={market} onChange={handleMarketChange}>\n          <option value='ETH'>ETH</option>\n        </Select>\n        </FormControl>\n        <RadioGroup onChange={setLongShort} value={longShort} mb={2}>\n          <Stack direction='row'>\n            <Radio value='long'>Long</Radio>\n            <Radio value='short'>Short</Radio>\n          </Stack>\n        </RadioGroup>\n        <FormControl mb={2}>\n          <InputGroup>\n            <InputLeftAddon>$</InputLeftAddon>\n            <Input type='number' placeholder='0' value={collateral} onChange={handleCollateralChange} />\n          </InputGroup>\n          <FormHelperText>\n            Available: ${availableCollateral.toLocaleString()}\n          </FormHelperText>\n        </FormControl>\n        <FormControl mb={4}>\n          <FormLabel>Leverage</FormLabel>\n          <InputGroup>\n            <Input type='number' value={leverage} onChange={handleLeverageChange} />\n            <InputRightAddon>&times;</InputRightAddon>\n          </InputGroup>\n        </FormControl>\n        <Button w=\"100%\" onClick={handleSubmit}>Submit</Button>\n      </Box>\n    </>\n  );\n}\n","import {PriceChart} from \"./PriceChart\";\nimport {Trade} from \"./Trade\";\nimport {Fragment} from \"react\";\nimport {Box, Flex, Text, Select, Icon, Container} from '@chakra-ui/react';\nimport {ChevronDownIcon} from \"@chakra-ui/icons\";\nimport {useCollateralPrice} from \"./useCollateralPrice\";\n\nexport function Stats() {\n\n    const ethPrice = 3136.32;\n    // const { data: collateralPrice } = useCollateralPrice({\n    //     tokenAddress: collateralType?.address,\n    // });\n\n    return <div>\n        <Box bg=\"black\" color=\"white\" p={2} borderRadius=\"md\" w=\"100%\" mb={4} padding={2}>\n            <Flex alignItems=\"center\"\n                  justifyContent=\"space-between\">\n                <Flex alignItems=\"center\">\n                    <Icon viewBox=\"0 0 200 200\" color=\"gray.400\" mr={2}>\n                        <path\n                            fill=\"currentColor\"\n                            d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\n                        />\n                    </Icon>\n                    <Select fontWeight=\"bold\" mr={2}>\n                        <option value=\"1h\">ETH-PERP</option>\n                        <option value=\"4h\">BTC-PERP</option>\n                    </Select>\n                </Flex>\n\n                <Text color=\"green.400\" fontWeight=\"bold\" fontSize=\"xl\" mr={4}>\n                    {ethPrice.toFixed(2)}\n                </Text>\n\n                <Flex direction=\"column\" alignItems=\"flex-end\">\n                    <Flex>\n                        <Text mr={4}>Index Price $3,136.22</Text>\n                        <Text color=\"green.400\">24H Change 1.96%</Text>\n\n                        <Text mr={4}>Long OI $1.25M/$15.00M</Text>\n                        <Text mr={4}>Short OI $1.26M/$15.00M</Text>\n                        <Text mr={4}>Skew 50%/50%</Text>\n                        <Text>Funding Rate 0.003752%</Text>\n                    </Flex>\n                </Flex>\n\n                <Select w={20} padding={2} placeholder=\"1H\" size=\"sm\" bg=\"gray.800\" borderColor=\"gray.700\">\n                    <option value=\"1h\">1H</option>\n                    <option value=\"4h\">4H</option>\n                    <option value=\"1d\">1D</option>\n                </Select>\n            </Flex>\n        </Box>\n    </div>\n}","import { useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { fetchAccountPositionMarketIds } from './fetchAccountPositionMarketIds';\nimport { ethers } from 'ethers';\n\nexport function useAccountPositionMarketIds() {\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: PerpsMarketProxyContract } = useImportContract('PerpsMarketProxy');\n  const accountId = useSelectedAccountId();\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && accountId && wallet?.provider && PerpsMarketProxyContract),\n    queryKey: [connectedChain?.id, 'AccountPositionMarketIds', accountId],\n    queryFn: async () => {\n      if (!(connectedChain?.id && accountId && wallet?.provider && PerpsMarketProxyContract)) throw 'OMFG';\n      return await fetchAccountPositionMarketIds( { wallet, PerpsMarketProxyContract, accountId });\n    },\n    select: (marketIds) => marketIds.map((marketId) => ethers.BigNumber.from(marketId)),\n  });\n}\n","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchAccountPositionMarketIds({\n  wallet,\n  PerpsMarketProxyContract,\n  accountId,\n}: {\n  wallet: WalletState;\n  PerpsMarketProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const PerpsProxy = new ethers.Contract(PerpsMarketProxyContract.address, PerpsMarketProxyContract.abi, provider);\n  console.time('fetchAccountPositionMarkedIds');\n  const accountPositionMarketIds = await PerpsProxy.getAccountOpenPositions(accountId);\n  console.timeEnd('fetchAccountPositionMarkedIds');\n  return accountPositionMarketIds;\n}","import type { WalletState } from '@web3-onboard/core';\nimport { ethers } from 'ethers';\n\nexport async function fetchAccountPosition({\n  wallet,\n  PerpsMarketProxyContract,\n  accountId,\n  marketId,\n}: {\n  wallet: WalletState;\n  PerpsMarketProxyContract: { address: string; abi: string[] };\n  accountId: ethers.BigNumber;\n  marketId: ethers.BigNumber;\n}) {\n  const provider = new ethers.providers.Web3Provider(wallet.provider);\n  const PerpsMarketProxy = new ethers.Contract(PerpsMarketProxyContract.address, PerpsMarketProxyContract.abi, provider);\n  console.time('fetchAccountPosition');\n  const position = await PerpsMarketProxy.getOpenPosition(accountId, marketId);\n  console.timeEnd('fetchAccountPosition');\n  return position;\n}\n","import {\n    Table,\n    Thead,\n    Tbody,\n    Tfoot,\n    Tr,\n    Th,\n    Td,\n    TableCaption,\n    TableContainer,\n  } from '@chakra-ui/react'\nimport { useAccountPositionMarketIds } from './useAccountPositionMarketIds'\nimport { useAccountPositions } from './useAccountPositions';\n\n  export function Positions() {\n    const marketIds = useAccountPositionMarketIds();\n    // TODO map over positions into the table below\n    const positions = useAccountPositions({ marketIds });\n    return (\n        <TableContainer>\n            <Table variant='simple'>\n                <TableCaption>Imperial to metric conversion factors</TableCaption>\n                <Thead>\n                <Tr>\n                    <Th>To convert</Th>\n                    <Th>into</Th>\n                    <Th isNumeric>multiply by</Th>\n                </Tr>\n                </Thead>\n                <Tbody>\n                <Tr>\n                    <Td>inches</Td>\n                    <Td>millimetres (mm)</Td>\n                    <Td isNumeric>25.4</Td>\n                </Tr>\n                <Tr>\n                    <Td>feet</Td>\n                    <Td>centimetres (cm)</Td>\n                    <Td isNumeric>30.48</Td>\n                </Tr>\n                <Tr>\n                    <Td>yards</Td>\n                    <Td>metres (m)</Td>\n                    <Td isNumeric>0.91444</Td>\n                </Tr>\n                </Tbody>\n                <Tfoot>\n                <Tr>\n                    <Th>To convert</Th>\n                    <Th>into</Th>\n                    <Th isNumeric>multiply by</Th>\n                </Tr>\n                </Tfoot>\n            </Table>\n        </TableContainer>\n    )\n}","import { useImportContract } from '@synthetixio/react-sdk';\nimport { useQuery } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { useSelectedAccountId } from './useSelectedAccountId';\nimport { fetchAccountPosition } from './fetchAccountPosition';\nimport { ethers} from 'ethers';\n\nexport function useAccountPositions({ marketIds }: { marketIds: ethers.BigNumber[] }) {\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const { data: PerpsMarketProxyContract } = useImportContract('PerpsMarketProxy');\n  const accountId = useSelectedAccountId();\n\n  return useQuery({\n    enabled: Boolean(connectedChain?.id && accountId && marketIds.length > 0 && wallet?.provider && PerpsMarketProxyContract),\n    queryKey: [connectedChain?.id, 'AccountPositions', accountId, ...marketIds],\n    queryFn: async () => {\n      if (!(connectedChain?.id && accountId && wallet?.provider && marketIds.length > 0 && PerpsMarketProxyContract)) throw 'OMFG';\n      const positions = []\n      for (let i = 0; i < marketIds.length; i++) {\n        positions.push(fetchAccountPosition( { wallet, PerpsMarketProxyContract, accountId, marketId: marketIds[i] }));\n      }\n      await Promise.all(positions);\n      return positions;\n    }\n  });\n}\n","import { Box } from \"@chakra-ui/react\";\nimport { PriceChart } from \"./PriceChart\";\nimport { Trade } from \"./Trade\";\nimport { Stats } from \"./Stats\";\nimport { Positions } from \"./Positions\";\n\nexport function Perps() {\n    return <div>\n        <Box w=\"100%\">\n            <Stats />\n            <PriceChart />\n            <Trade />\n            <Positions />\n        </Box>\n    </div>\n}","import { ChevronDownIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuItemOption,\n  MenuList,\n  MenuOptionGroup,\n  Stack,\n  Text,\n  useBreakpointValue,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport React, { useEffect, useState } from 'react';\nimport { renderAccountId } from './renderAccountId';\nimport './i18n/config';\nimport { useParams } from '@snx-v3/useParams';\nimport { useTranslation } from 'react-i18next';\nimport { ChainMenu } from './ChainMenu';\nimport { useCreatePerpsAccount } from './useCreatePerpsAccount';\nimport { usePerpsAccounts } from './usePerpsAccounts';\nimport { useSelectedAccountId } from './useSelectedAccountId';\n\ninterface Account {\n  address: string;\n}\n\nfunction LanguageSwitcher() {\n  const { i18n } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState(i18n.language);\n\n  useEffect(() => {\n    const handleLanguageChange = (lng: string) => {\n      setCurrentLanguage(lng);\n    };\n\n    i18n.on('languageChanged', handleLanguageChange);\n\n    return () => {\n      i18n.off('languageChanged', handleLanguageChange);\n    };\n  }, [i18n]);\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng).catch((err) => console.log('something went wrong loading', err));\n  };\n\n  return (\n    <Menu>\n      <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n        {currentLanguage === 'en' ? 'EN' : 'UA'}\n      </MenuButton>\n      <MenuList>\n        <MenuItem onClick={() => changeLanguage('en')}>EN</MenuItem>\n        <MenuItem onClick={() => changeLanguage('ua')}>UA</MenuItem>\n      </MenuList>\n    </Menu>\n  );\n}\n\nconst AccountHandler = () => {\n  const { data: accounts } = usePerpsAccounts();\n  const accountId = useSelectedAccountId();\n  const [params, setParams] = useParams();\n\n  return (\n    <>\n      {accounts && accounts.length > 0 ? (\n        <>\n          <MenuDivider />\n          <MenuOptionGroup\n            title=\"Accounts\"\n            type=\"radio\"\n            defaultValue={accountId?.toHexString() ?? ''}\n            value={accountId?.toHexString() ?? ''}\n            onChange={(value) => setParams({ ...params, accountId: `${value}` })}\n          >\n            {accounts.map((id) => (\n              <MenuItemOption key={id.toHexString()} value={id.toHexString()}>\n                {renderAccountId(id)}\n              </MenuItemOption>\n            ))}\n          </MenuOptionGroup>\n        </>\n      ) : null}\n\n      {accounts && !accounts.length ? (\n        <>\n          <MenuDivider />\n          <MenuOptionGroup title=\"Accounts\" type=\"radio\" defaultValue=\"0\">\n            <MenuItemOption value=\"0\">No accounts</MenuItemOption>\n          </MenuOptionGroup>\n        </>\n      ) : null}\n      <MenuDivider />\n    </>\n  );\n};\n\nfunction WalletConnector() {\n  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet();\n  const [account, setAccount] = useState<Account | null>(null);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (wallet?.provider) {\n      setAccount({\n        address: wallet.accounts[0].address,\n      });\n    }\n  }, [wallet]);\n\n  if (wallet?.provider && account) {\n    return (\n      <Menu>\n        <MenuButton as={Button} variant=\"text\" rightIcon={<ChevronDownIcon />}>\n          {account.address.slice(0, 5)}...{account.address.slice(-3)}\n        </MenuButton>\n        <MenuList>\n          <MenuItem onClick={() => navigator.clipboard.writeText(account?.address)}>{t('Copy address')}</MenuItem>\n          <AccountHandler />\n          <MenuItem onClick={() => disconnect({ label: wallet.label })}>{t('Disconnect')}</MenuItem>\n        </MenuList>\n      </Menu>\n    );\n  }\n\n  return !wallet ? (\n    <Button disabled={connecting} onClick={() => connect()}>\n      {t('Connect')}\n    </Button>\n  ) : null;\n}\n\nconst CreateAccount = () => {\n  const { data: accounts } = usePerpsAccounts();\n  const createAccount = useCreatePerpsAccount();\n\n  if (accounts && !accounts.length) {\n    return (\n      <Button type=\"button\" onClick={() => createAccount.mutate()}>\n        Create account\n      </Button>\n    );\n  }\n\n  return null;\n};\n\nconst ChainHandler = () => {\n  const [{ wallet }] = useConnectWallet();\n  const [{ chains, connectedChain }, setChain] = useSetChain();\n\n  const isChainSupported = React.useMemo(() => {\n    return chains.some((chain) => chain.id === connectedChain?.id);\n  }, [chains, connectedChain?.id]);\n\n  return (\n    <>\n      {wallet && !isChainSupported ? (\n        <Button type=\"button\" onClick={() => setChain({ chainId: chains[0].id })}>\n          Switch to {chains[0].label}\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport function PerpsAppNavbar() {\n  return (\n    <Box>\n      <Flex\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        borderColor={useColorModeValue('gray.200', 'gray.900')}\n        align={'center'}\n      >\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n          <Text textAlign={useBreakpointValue({ base: 'center', md: 'left' })} fontFamily={'heading'}>\n            Logo\n          </Text>\n        </Flex>\n        <Stack flex={{ base: 1, md: 0 }} justify={'flex-end'} direction={'row'} spacing={6}>\n          <ChainHandler />\n          <WalletConnector />\n          <CreateAccount />\n          <ChainMenu />\n          <LanguageSwitcher />\n        </Stack>\n      </Flex>\n    </Box>\n  );\n}\n","import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport translation from './ua/translation.json';\n\ni18next.use(initReactI18next).init({\n  lng: 'en', // if you're using a language detector, do not define the lng option\n  resources: {\n    ua: {\n      translation,\n    },\n  },\n});\n","import { Box } from '@chakra-ui/react';\nimport WebApp from '@twa-dev/sdk';\nimport { PerpsAppNavbar } from './PerpsAppNavbar';\n\nWebApp.ready();\n\nexport function PerpsApp() {\n  return (\n    <Box>\n      <PerpsAppNavbar />\n      <h1>PERPS APP</h1>\n      <button type=\"button\" onClick={() => WebApp.showAlert('Hello World!')}>\n        Show Alert\n      </button>\n    </Box>\n  );\n}\n","import { type ComponentMultiStyleConfig, type ComponentStyleConfig, defineStyle, extendTheme } from '@chakra-ui/react';\nimport { mode } from '@chakra-ui/theme-tools';\n\nconst gradients = {\n  'green-cyan': {\n    500: 'linear(to-tr, green.500, cyan.500)',\n    600: 'linear(to-tr, green.600, cyan.600)',\n    700: 'linear(to-tr, green.700, cyan.800)',\n  },\n\n  grey: {\n    900: 'linear(to-tr, grey.900, blackAlpha.900)',\n  },\n  dark: {\n    500: 'linear(to-tr, #171923, #141414)',\n  },\n\n  'pink-purple': {\n    500: 'linear(to-tr, pink.500, purple.500)',\n    600: 'linear(to-tr, pink.600, purple.600)',\n    700: 'linear(to-tr, pink.700, purple.800)',\n  },\n\n  'pink-blue': {\n    500: 'linear(to-tr, pink.500, blue.500)',\n    600: 'linear(to-tr, pink.600, blue.600)',\n    700: 'linear(to-tr, pink.700, blue.800)',\n  },\n  'pink-cyan': {\n    500: 'linear(to-tr, pink.500, cyan.500)',\n    600: 'linear(to-tr, pink.600, cyan.600)',\n    700: 'linear(to-tr, pink.700, cyan.800)',\n  },\n\n  orange: {\n    500: 'linear(to-tr, orange.500, orange.300)',\n    600: 'linear(to-tr, orange.600, orange.400)',\n    700: 'linear(to-tr, orange.700, orange.500)',\n  },\n};\n\n// adapted from https://github.com/chakra-ui/chakra-ui/blob/main/packages/components/theme/src/components/button.ts#L90\nconst variantSolid = defineStyle((props) => {\n  const { colorScheme: c } = props;\n\n  if (c === 'gray') {\n    const bg = mode('gray.100', 'whiteAlpha.200')(props);\n\n    return {\n      borderRadius: 'base',\n      color: mode('black', 'whiteAlpha.900')(props),\n      bg,\n      _hover: {\n        bg: mode('gray.200', 'whiteAlpha.300')(props),\n        _disabled: {\n          bg,\n        },\n      },\n      _active: { bg: mode('gray.300', 'whiteAlpha.400')(props) },\n    };\n  }\n\n  if (c === 'cyan') {\n    return {\n      borderRadius: 'base',\n      bgGradient: gradients['green-cyan'][500],\n      color: 'black',\n      _hover: {\n        bgGradient: gradients['green-cyan'][600],\n        _disabled: {\n          background: gradients['green-cyan'][500],\n        },\n      },\n      _active: {\n        bgGradient: gradients['green-cyan'][700],\n      },\n    };\n  }\n\n  const bg = `${c}.500`;\n  const color = 'white';\n  const hoverBg = `${c}.600`;\n  const activeBg = `${c}.700`;\n  const background = mode(bg, `${c}.600`)(props);\n\n  return {\n    borderRadius: 'base',\n    bg: background,\n    color: mode(color, 'white')(props),\n    _hover: {\n      bg: mode(hoverBg, `${c}.500`)(props),\n      _disabled: {\n        bg: background,\n      },\n    },\n    _active: { bg: mode(activeBg, `${c}.400`)(props) },\n  };\n});\n\nconst Button: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  variants: {\n    solid: variantSolid,\n    outline: (props) => {\n      if (props.colorScheme === 'gray' || props.colorScheme === 'grey') {\n        return {\n          color: 'white',\n          borderColor: 'gray.900',\n          _hover: { bg: 'whiteAlpha.200' },\n          _active: { bg: 'whiteAlpha.400' },\n          borderRadius: 'base',\n        };\n      }\n      return {\n        color: 'cyan.500', // needed for storybook for some reason\n        border: '1px solid', // needed for storybook for some reason\n        borderColor: 'cyan.500', // needed for storybook for some reason\n        _hover: { bg: 'rgb(0, 209, 255, 0.12)' }, // cyan.500 0.12 opacity\n        _active: { bg: 'rgb(0, 209, 255, 0.24)' }, // cyan.500 0.24 opacity\n        borderRadius: 'base',\n      };\n    },\n    ghost: {\n      color: 'cyan.500', // needed for storybook for some reason\n      _hover: { bg: 'rgb(0, 209, 255, 0.12)' }, // cyan.500 0.12 opacity\n      _active: { bg: 'rgb(0, 209, 255, 0.24)' }, // cyan.500 0.24 opacity\n      borderRadius: 'base',\n    },\n  },\n};\n\nconst Menu: ComponentMultiStyleConfig = {\n  parts: ['button', 'list', 'item'],\n  baseStyle: {\n    button: {\n      borderRadius: 'base',\n      color: 'white',\n      span: {\n        display: 'flex',\n        alignItems: 'center',\n        px: 2,\n      },\n      height: '100%',\n    },\n    list: {\n      mt: 2,\n      bgColor: 'navy.900',\n      padding: 0,\n      border: 'none',\n      borderRadius: 'md',\n      py: 0,\n    },\n    item: {\n      bgColor: 'blackAlpha.300',\n      color: 'whiteAlpha.900',\n      p: 3,\n      _hover: {\n        bgColor: 'whiteAlpha.400',\n      },\n      _active: {\n        bgColor: 'navy.900',\n      },\n      _first: {\n        borderTopLeftRadius: 'md',\n        borderTopRightRadius: 'md',\n      },\n      _last: {\n        borderBottomLeftRadius: 'md',\n        borderBottomRightRadius: 'md',\n      },\n      _focus: {\n        bgColor: 'blackAlpha.400',\n      },\n    },\n  },\n};\n\nconst Input: ComponentStyleConfig = {\n  defaultProps: {\n    focusBorderColor: 'cyan.500',\n    errorBorderColor: 'red.500',\n  },\n};\n\nconst Select: ComponentStyleConfig = {\n  defaultProps: {\n    focusBorderColor: 'cyan.500',\n    iconColor: 'cyan.500',\n    errorBorderColor: 'red.500',\n  },\n};\n\nconst NumberInput: ComponentStyleConfig = {\n  defaultProps: {\n    focusBorderColor: 'cyan.500',\n    errorBorderColor: 'red.500',\n  },\n};\n\nconst Textarea: ComponentStyleConfig = {\n  defaultProps: {\n    focusBorderColor: 'cyan.500',\n    colorScheme: 'cyan',\n    errorBorderColor: 'red.500',\n  },\n};\n\nconst Alert: ComponentStyleConfig = {\n  defaultProps: {\n    variant: 'left-accent',\n  },\n  variants: {\n    'left-accent': (props) => {\n      return {\n        container: {\n          bg: `${props.colorScheme}.900`,\n          borderInlineStartColor: `${props.colorScheme}.500`,\n        },\n      };\n    },\n    solid: (props) => {\n      return {\n        icon: { color: 'white' },\n        container: { bg: `${props.colorScheme}.500`, color: 'white' },\n      };\n    },\n  },\n};\n\nconst Skeleton: ComponentStyleConfig = {\n  defaultProps: {\n    startColor: 'gray.900',\n    endColor: 'gray.800',\n  },\n};\n\nconst Checkbox: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  baseStyle: {\n    control: {\n      borderColor: 'cyan.500',\n      _checked: {\n        bg: 'cyan.500',\n        borderColor: 'cyan.500',\n        _hover: {\n          bg: 'cyan.600',\n          borderColor: 'cyan.600',\n        },\n      },\n      _invalid: {\n        borderColor: 'red.500',\n      },\n      _disabled: {\n        _hover: {\n          borderColor: 'transparent',\n        },\n      },\n      _hover: {\n        borderColor: 'cyan.600',\n      },\n    },\n  },\n};\n\nconst Radio: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  baseStyle: {\n    control: {\n      borderColor: 'cyan.500',\n      _checked: {\n        bg: 'cyan.500',\n        borderColor: 'cyan.500',\n        _hover: {\n          bg: 'cyan.600',\n          borderColor: 'cyan.600',\n        },\n      },\n      _invalid: {\n        borderColor: 'red.500',\n      },\n      _disabled: {\n        _hover: {\n          borderColor: 'transparent',\n        },\n      },\n      _hover: {\n        borderColor: 'cyan.600',\n      },\n    },\n  },\n};\n\nconst Badge: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  variants: {\n    subtle: (props) => ({\n      color: `${props.colorScheme}.500`,\n      border: '0px',\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    solid: (props) => ({\n      background: `${props.colorScheme}.500`,\n      color: 'black',\n    }),\n    outline: (props) => ({\n      borderColor: `${props.colorScheme}.500`,\n      color: `${props.colorScheme}.500`,\n      boxShadow: 'unset',\n    }),\n  },\n};\n\nconst Tag: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n    variant: 'solid',\n  },\n  variants: {\n    solid: (props) => ({\n      container: {\n        background: `${props.colorScheme}.500`,\n        color: 'black',\n      },\n    }),\n  },\n};\n\nconst Accordion: ComponentStyleConfig = {\n  baseStyle: {\n    container: {\n      borderColor: 'gray.900',\n      borderWidth: '1px',\n      borderRadius: 'base',\n    },\n  },\n};\n\nconst Progress: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n    variant: 'solid',\n    borderRadius: 'full',\n  },\n  variants: {\n    solid: (props) => ({\n      filledTrack: {\n        background: `${props.colorScheme}.500`,\n        borderRadius: 'full',\n      },\n      track: {\n        borderRadius: 'full',\n      },\n    }),\n  },\n};\n\nconst Tabs: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  variants: {\n    'solid-rounded': (props) => ({\n      tab: {\n        _selected: {\n          background: `${props.colorScheme}.500`,\n          color: 'black',\n        },\n        color: `${props.colorScheme}.500`,\n      },\n    }),\n    'soft-rounded': {\n      tab: {\n        _selected: {\n          background: 'whiteAlpha.300',\n          color: 'cyan.500',\n        },\n        color: 'cyan.500',\n      },\n    },\n  },\n};\n\nconst Tooltip: ComponentStyleConfig = {\n  baseStyle: {\n    textAlign: 'center',\n    bg: 'gray.900',\n    color: 'white.500',\n    '--popper-arrow-bg': 'var(--chakra-colors-gray-900)',\n  },\n};\n\nconst Switch: ComponentStyleConfig = {\n  defaultProps: {\n    colorScheme: 'cyan',\n  },\n  baseStyle: {\n    track: {\n      _checked: {\n        background: 'cyan.500',\n      },\n    },\n  },\n};\n\nconst Spinner: ComponentStyleConfig = {\n  baseStyle: {\n    color: 'cyan.500',\n  },\n};\n\nexport const theme = extendTheme({\n  useSystemColorMode: false,\n  initialColorMode: 'dark',\n  colors: {\n    gray: {\n      50: '#F6F6F6',\n      100: '#F1F1F1',\n      200: '#DDDDDF',\n      300: '#C3C3C9',\n      400: '#AAAAB2',\n      500: '#91919B',\n      600: '#7A7A85',\n      700: '#63636E',\n      800: '#4D4D57',\n      900: '#303037',\n    },\n    red: {\n      50: '#FFEDEF',\n      100: '#FFC4CB',\n      200: '#FF9BA7',\n      300: '#FF7384',\n      400: '#FF4A60',\n      500: '#E4364B',\n      600: '#C53030',\n      700: '#9B2C2C',\n      800: '#822727',\n      900: '#63171B',\n    },\n    orange: {\n      50: '#FFF3EB',\n      100: '#FFD8BE',\n      200: '#FFBE92',\n      300: '#FFA365',\n      400: '#FF9A54',\n      500: '#FC8738',\n      600: '#DC732D',\n      700: '#96420A',\n      800: '#743002',\n      900: '#522100',\n    },\n    yellow: {\n      50: '#FFFBEF',\n      100: '#FFF2CA',\n      200: '#FFF5A8',\n      300: '#FFF889',\n      400: '#FFF458',\n      500: '#FAE527',\n      600: '#EAD516',\n      700: '#B5932B',\n      800: '#776017',\n      900: '#55430D',\n    },\n    green: {\n      50: '#EDFFF9',\n      100: '#C3FFEC',\n      200: '#9AE6B4',\n      300: '#72FFD3',\n      400: '#47FAC2',\n      500: '#34EDB3',\n      600: '#2BD39F',\n      700: '#11946B',\n      800: '#077250',\n      900: '#015037',\n    },\n    blue: {\n      50: '#EDF6FF',\n      100: '#C4E2FF',\n      200: '#9CCFFF',\n      300: '#73BBFF',\n      400: '#479EF0',\n      500: '#3182CE',\n      600: '#1F68AC',\n      700: '#11508A',\n      800: '#073968',\n      900: '#012546',\n    },\n    cyan: {\n      50: '#E5FAFF',\n      100: '#B7F2FF',\n      200: '#8AEAFF',\n      300: '#5CE1FF',\n      400: '#2ED9FF',\n      500: '#00D1FF',\n      600: '#00B0D6',\n      700: '#008EAD',\n      800: '#006D85',\n      900: '#004B5C',\n    },\n    purple: {\n      50: '#F0EEFF',\n      100: '#CFC9FF',\n      200: '#AEA4FF',\n      300: '#8D7EFF',\n      400: '#6B59FF',\n      500: '#5744EA',\n      600: '#402FC8',\n      700: '#2D1EA6',\n      800: '#1D1084',\n      900: '#10104E',\n    },\n    pink: {\n      50: '#FDE8FF',\n      100: '#F9B6FF',\n      200: '#F583FF',\n      300: '#F471FF',\n      400: '#EB46FF',\n      500: '#EE2EFF',\n      600: '#BE02CE',\n      700: '#8D0099',\n      800: '#6E0077',\n      900: '#4E0055',\n    },\n    navy: {\n      50: '#522ED1',\n      100: '#401FB7',\n      200: '#3719A6',\n      300: '#2F1298',\n      400: '#1F0777',\n      500: '#150942',\n      600: '#0E052F',\n      700: '#0B0B22',\n      800: '#0A0A25',\n      900: '#06061B',\n    },\n    error: '#FF4A60', // red.400,\n    success: '#34EDB3', //green.500\n    warning: '#FC8738', // orange.500\n  },\n  shadows: {\n    outline: '0 0 0 3px rgba(0, 209, 255, 1)',\n  },\n  fonts: {\n    heading:\n      'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    body: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    display:\n      '\"GT America Condensed\", Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    mono: '\"GT America Mono\", SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace',\n  },\n  components: {\n    Popover: {\n      variants: {\n        responsive: {\n          popper: {\n            maxWidth: 'unset',\n            width: 'unset',\n          },\n        },\n      },\n    },\n    Button,\n    Input,\n    Select,\n    NumberInput,\n    Alert,\n    Textarea,\n    Skeleton,\n    Checkbox,\n    Radio,\n    Badge,\n    Tag,\n    Accordion,\n    Progress,\n    Tabs,\n    Tooltip,\n    Switch,\n    Spinner,\n    Menu,\n  },\n  // To be imported and used with the bgGradient prop\n  // See: https://chakra-ui.com/docs/styled-system/gradient#background-gradient-api\n  gradients,\n  textStyles: {\n    'heading-4xl': {\n      fontSize: { base: '60px', lg: '72px' },\n      fontFamily: 'heading',\n      lineHeight: { base: '57.6px', lg: '72px' },\n      fontWeight: 700,\n    },\n    'heading-3xl': {\n      fontSize: { base: '48px', md: '60px' },\n      fontFamily: 'heading',\n      lineHeight: { base: '57.6px', md: '72px', lg: '60px' },\n      fontWeight: 700,\n    },\n    'heading-2xl': {\n      fontSize: { base: '36px', md: '48px' },\n      fontFamily: 'heading',\n      lineHeight: { base: '120%' },\n      fontWeight: 700,\n    },\n    'heading-xl': {\n      fontSize: { base: '30px', lg: '36px' },\n      fontFamily: 'heading',\n      lineHeight: { base: '36px', lg: '120%' },\n      fontWeight: 700,\n    },\n    'heading-lg': {\n      fontSize: { base: '24px', lg: '30px' },\n      fontFamily: 'heading',\n      lineHeight: { base: '28.8px', lg: '36px' },\n      fontWeight: 700,\n    },\n    'heading-md': {\n      fontSize: { base: '20px', lg: '24px' },\n      fontFamily: 'heading',\n      lineHeight: '24px',\n      fontWeight: 700,\n    },\n    'heading-sm': {\n      fontSize: '16px',\n      fontFamily: 'heading',\n      lineHeight: '19.2px',\n      fontWeight: 700,\n    },\n    'heading-xs': {\n      fontSize: '14px',\n      fontFamily: 'heading',\n      lineHeight: '16.8px',\n      fontWeight: 700,\n    },\n  },\n  sizes: {\n    px: '1px',\n    0.5: '0.125rem',\n    1: '0.25rem',\n    1.5: '0.375rem',\n    2: '0.5rem',\n    2.5: '0.625rem',\n    3: '0.75rem',\n    3.5: '0.875rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n    12: '3rem',\n    14: '3.5rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    28: '7rem',\n    32: '8rem',\n    36: '9rem',\n    40: '10rem',\n    44: '11rem',\n    48: '12rem',\n    52: '13rem',\n    56: '14rem',\n    60: '15rem',\n    64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n    max: 'max-content',\n    min: 'min-content',\n    full: '100%',\n    '3xs': '14rem',\n    '2xs': '16rem',\n    xs: '20rem',\n    sm: '24rem',\n    md: '28rem',\n    lg: '32rem',\n    xl: '36rem',\n    '2xl': '42rem',\n    '3xl': '48rem',\n    '4xl': '56rem',\n    '5xl': '64rem',\n    '6xl': '72rem',\n    '7xl': '80rem',\n    '8xl': '90rem',\n    container: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n    },\n  },\n  styles: {\n    global: {\n      body: {\n        bg: 'navy.900',\n      },\n    },\n  },\n});\n","import {\n  Box,\n  Button,\n  Link,\n  ListItem,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  UnorderedList,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport { theme } from './theme';\n\ninterface TermsModalProps {\n  defaultOpen: boolean;\n}\n\nexport const TermsModal = ({ defaultOpen = true }: TermsModalProps) => {\n  const [isOpen, setOpen] = useState(defaultOpen);\n  const [enabled, setEnabled] = useState(false);\n\n  const onSubmit = () => {\n    if (enabled) {\n      window.sessionStorage.setItem('TERMS_CONDITIONS_ACCEPTED', JSON.stringify(true));\n      setOpen(false);\n    }\n  };\n\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    <Modal isOpen={isOpen} onClose={() => {}}>\n      <ModalOverlay />\n      <ModalContent\n        bgGradient={theme.gradients.dark[500]}\n        pt=\"10\"\n        pb=\"3\"\n        borderWidth=\"1px\"\n        borderColor=\"gray.900\"\n        data-cy=\"transaction modal\"\n      >\n        <ModalHeader py={0} textAlign=\"center\">\n          Synthetix Terms of Service\n        </ModalHeader>\n        <ModalBody fontSize=\"xs\" color=\"gray.600\">\n          <Text fontSize=\"sm\">\n            By clicking “I Agree” below, you agree to be bound by the terms of this Agreement. As such, you fully understand that:\n          </Text>\n          <Box\n            onScroll={(e) => {\n              const div = e.currentTarget;\n              const scrollTopWithTolerance = div.scrollTop + 10;\n              if (scrollTopWithTolerance >= div.scrollHeight - div.offsetHeight) {\n                setEnabled(true);\n              } else {\n                setEnabled(false);\n              }\n            }}\n            as=\"div\"\n            my={2}\n            py={3}\n            height=\"350px\"\n            overflow=\"auto\"\n            overflowX=\"scroll\"\n            sx={{\n              '::-webkit-scrollbar': {\n                display: 'block',\n              },\n              '::-webkit-scrollbar-track': {\n                backgroundColor: 'transparent',\n              },\n              '::-webkit-scrollbar-track-piece': {\n                backgroundColor: 'transparent',\n              },\n              '::-webkit-scrollbar-corner': {\n                backgroundColor: 'transparent',\n              },\n            }}\n          >\n            <UnorderedList>\n              <Text fontSize=\"14px\">\n                <ListItem>\n                  <Link href=\"https://synthetix.io/\" target=\"_blank\" color=\"cyan.500\" _focusVisible={{ outline: 'none' }}>\n                    Synthetix{' '}\n                  </Link>\n                  is a blockchain-based decentralized finance project. You are participating at your own risk.\n                </ListItem>\n                <ListItem mt={2}>\n                  Synthetix is offered for use “as is” and without any guarantees regarding security. The protocol is made up of immutable\n                  code and can be accessed through a variety of user interfaces.\n                </ListItem>\n                <ListItem mt={2}>\n                  No central entity operates the Synthetix protocol. Decisions related to the protocol are governed by a dispersed group of\n                  participants who collectively govern and maintain the protocol.\n                </ListItem>\n                <ListItem mt={2}>\n                  Synthetix DAO does not unilaterally offer, maintain, operate, administer, or control any trading interfaces. The only user\n                  interfaces maintained by Synthetix DAO are the governance and liquidity interfaces herein.\n                </ListItem>\n                <ListItem mt={2}>\n                  You can participate in the governance process by staking SNX tokens in accordance with the rules and parameters summarized{' '}\n                  <Link href=\"https://governance.synthetix.io/\" target=\"_blank\" color=\"cyan.500\" _focusVisible={{ outline: 'none' }}>\n                    here\n                  </Link>\n                  , and/or joining the{' '}\n                  <Link color=\"cyan.500\" target=\"_blank\" href=\"https://discord.com/invite/synthetix\" _focusVisible={{ outline: 'none' }}>\n                    Synthetix Discord\n                  </Link>{' '}\n                  and contributing to the conversation.\n                </ListItem>\n                <ListItem mt={2}>\n                  The rules and parameters associated with the Synthetix protocol and Synthetix DAO governance are subject to change at any\n                  time.\n                </ListItem>\n                <ListItem mt={2}>\n                  Your use of Synthetix is conditioned upon your acceptance to be bound by the Synthetix Term of Use, which can be found{' '}\n                  <Link as={ReactRouterLink} to=\"/terms\" target=\"_blank\" color=\"cyan.500\" _focusVisible={{ outline: 'none' }}>\n                    here\n                  </Link>\n                  .\n                </ListItem>\n                <ListItem mt={2}>\n                  The laws that apply to your use of Synthetix may vary based upon the jurisdiction in which you are located. We strongly\n                  encourage you to speak with legal counsel in your jurisdiction if you have any questions regarding your use of Synthetix.\n                </ListItem>\n                <ListItem mt={2}>\n                  By entering into this agreement, you are not agreeing to enter into a partnership. You understand that Synthetix is a\n                  decentralized protocol provided on an “as is” basis.\n                </ListItem>\n                <ListItem mt={2}>\n                  You hereby release all present and future claims against Synthetix DAO related to your use of the protocol, the SNX token,\n                  SNX DAO governance, and any other facet of the protocol.\n                </ListItem>\n                <ListItem mt={2}>\n                  You agree to indemnify and hold harmless SNX DAO and its affiliates for any costs arising out of or relating to your use\n                  of the Synthetix protocol.\n                </ListItem>\n                <ListItem mt={2}>\n                  You are not accessing the protocol from Burma (Myanmar), Cuba, Iran, Sudan, Syria, the Western Balkans, Belarus, Côte\n                  d’Ivoire, Democratic Republic of the Congo, Iraq, Lebanon, Liberia, Libya, North Korea, Russia, certain sanctioned areas\n                  of Ukraine, Somalia, Venezuela, Yemen, or Zimbabwe (collectively, “Prohibited Jurisdictions”), or any other jurisdiction\n                  listed as a Specially Designated National by the United States Office of Foreign Asset Control (“OFAC”).\n                </ListItem>\n              </Text>\n            </UnorderedList>\n          </Box>\n        </ModalBody>\n        <Button variant=\"outline\" _focusVisible={{ outline: 'none' }} my={4} mx={6} onClick={onSubmit} isDisabled={!enabled}>\n          I agree\n        </Button>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Button, Menu, MenuButton, MenuDivider, MenuItem, MenuItemOption, MenuList, MenuOptionGroup } from '@chakra-ui/react';\nimport { useParams } from '@snx-v3/useParams';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport React from 'react';\nimport { renderAccountId } from './renderAccountId';\nimport { useAccounts } from './useAccounts';\nimport { useCreateAccount } from './useCreateAccount';\nimport { useSelectedAccountId } from './useSelectedAccountId';\n\nexport function UserMenu() {\n  const [{ chains, connectedChain }, setChain] = useSetChain();\n  const [{ wallet }, connect, disconnect] = useConnectWallet();\n\n  const isChainSupported = React.useMemo(() => {\n    return chains.some((chain) => chain.id === connectedChain?.id);\n  }, [chains, connectedChain?.id]);\n\n  const [params, setParams] = useParams();\n  const { data: accounts } = useAccounts();\n  const createAccount = useCreateAccount();\n  const accountId = useSelectedAccountId();\n\n  return (\n    <>\n      {!wallet ? (\n        <Button type=\"button\" onClick={() => connect()}>\n          Connect\n        </Button>\n      ) : null}\n      {wallet && !isChainSupported ? (\n        <Button type=\"button\" onClick={() => setChain({ chainId: chains[0].id })}>\n          Switch to {chains[0].label}\n        </Button>\n      ) : null}\n      {accounts && !accounts.length ? (\n        <Button type=\"button\" onClick={() => createAccount.mutate()}>\n          Create account\n        </Button>\n      ) : null}\n\n      {wallet?.accounts?.[0]?.address ? (\n        <Menu>\n          <MenuButton as={Button} variant=\"text\" rightIcon={<ChevronDownIcon />}>\n            {wallet.accounts[0].address.slice(0, 5)} ... {wallet.accounts[0].address.slice(-3)}\n          </MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => navigator.clipboard.writeText(wallet.accounts[0].address)}>Copy address</MenuItem>\n\n            {accounts && accounts.length > 0 ? (\n              <>\n                <MenuDivider />\n                <MenuOptionGroup\n                  title=\"Accounts\"\n                  type=\"radio\"\n                  defaultValue={accountId?.toHexString() ?? ''}\n                  value={accountId?.toHexString() ?? ''}\n                  onChange={(value) => setParams({ ...params, accountId: `${value}` })}\n                >\n                  {accounts.map((id) => (\n                    <MenuItemOption key={id.toHexString()} value={id.toHexString()}>\n                      {renderAccountId(id)}\n                    </MenuItemOption>\n                  ))}\n                </MenuOptionGroup>\n              </>\n            ) : null}\n            {accounts && !accounts.length ? (\n              <>\n                <MenuDivider />\n                <MenuOptionGroup title=\"Accounts\" type=\"radio\" defaultValue=\"0\">\n                  <MenuItemOption value=\"0\">No accounts</MenuItemOption>\n                </MenuOptionGroup>\n              </>\n            ) : null}\n\n            <MenuDivider />\n            <MenuItem onClick={() => disconnect({ label: wallet.label })}>Disconnect</MenuItem>\n          </MenuList>\n        </Menu>\n      ) : null}\n    </>\n  );\n}\n","import { useParams } from '@snx-v3/useParams';\nimport { useImportContract } from '@synthetixio/react-sdk';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport { ethers } from 'ethers';\n\nexport function useCreateAccount() {\n  const [params, setParams] = useParams();\n  const [{ connectedChain }] = useSetChain();\n  const [{ wallet }] = useConnectWallet();\n  const walletAddress = wallet?.accounts?.[0]?.address;\n  const queryClient = useQueryClient();\n  const { data: CoreProxyContract } = useImportContract('CoreProxy');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!(connectedChain?.id && CoreProxyContract && walletAddress && wallet?.provider)) throw 'OMFG';\n      const provider = new ethers.providers.Web3Provider(wallet.provider);\n      const signer = provider.getSigner(walletAddress);\n      const CoreProxy = new ethers.Contract(CoreProxyContract.address, CoreProxyContract.abi, signer);\n      const tx: ethers.ContractTransaction = await CoreProxy['createAccount()']();\n      console.log({ tx });\n      if (window.$tx) {\n        window.$tx.push(tx);\n      } else {\n        window.$tx = [tx];\n      }\n      const txResult = await tx.wait();\n      console.log({ txResult });\n      if (window.$txResult) {\n        window.$txResult.push(txResult);\n      } else {\n        window.$txResult = [txResult];\n      }\n\n      const event = txResult.events?.find((e) => e.event === 'AccountCreated');\n      if (event) {\n        const accountId = event?.args?.accountId?.toString();\n        if (accountId) {\n          queryClient.setQueryData([connectedChain.id, 'Accounts', { ownerAddress: walletAddress }], (oldData: string[]) =>\n            oldData.concat([accountId])\n          );\n          setParams({ ...params, accountId: accountId.toHexString() });\n        }\n      }\n\n      return txResult;\n    },\n  });\n}\n","import { ChakraProvider, Container, Flex, Link, useColorMode, useDisclosure } from '@chakra-ui/react';\nimport { useParams } from '@snx-v3/useParams';\nimport { SynthetixProvider, useErrorParser, useSynthetix } from '@synthetixio/react-sdk';\n// import { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n// import { PersistQueryClientProvider } from '@tanstack/react-query-persist-client';\n// import { get, set, del } from 'idb-keyval'\n// import {\n//   PersistedClient,\n//   Persister,\n// } from '@tanstack/react-query-persist-client'\nimport coinbaseModule from '@web3-onboard/coinbase';\nimport gnosisModule from '@web3-onboard/gnosis';\nimport injectedModule, { ProviderLabel } from '@web3-onboard/injected-wallets';\nimport ledgerModule from '@web3-onboard/ledger';\nimport metamaskSDK from '@web3-onboard/metamask';\nimport { Web3OnboardProvider, init, useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport trezorModule from '@web3-onboard/trezor';\nimport walletConnectModule from '@web3-onboard/walletconnect';\nimport { ethers } from 'ethers';\nimport React, { useEffect } from 'react';\nimport { HashRouter, Outlet, Route, NavLink as RouterLink, Routes } from 'react-router-dom';\nimport { ChainMenu } from './ChainMenu';\nimport { Fonts } from './Fonts';\nimport { HomePage } from './HomePage';\nimport { NotFoundPage } from './NotFoundPage';\nimport { Perps } from './Perps';\nimport { PerpsApp } from './PerpsApp';\nimport SynthetixIcon from './SynthetixIcon.svg';\nimport SynthetixLogo from './SynthetixLogo.svg';\nimport { TermsModal } from './TermsModal';\nimport { UserMenu } from './UserMenu';\nimport DiscordIcon from './discord.svg';\nimport GithubIcon from './github.svg';\nimport LogoIcon from './logo-icon.svg';\nimport Logo from './logo.svg';\nimport { theme } from './theme';\nimport { useAccounts } from './useAccounts';\nimport WarpcastIcon from './warpcast.svg';\nimport XIcon from './x.svg';\nimport YoutubeIcon from './youtube.svg';\n\nconst metamaskSDKWallet = metamaskSDK({\n  options: {\n    extensionOnly: true,\n    dappMetadata: {\n      name: 'Example Web3-Onboard Dapp',\n    },\n  },\n});\n\nexport const appMetadata = {\n  name: 'Synthetix Liquidity',\n  icon: SynthetixIcon,\n  logo: SynthetixLogo,\n  description: 'Synthetix | The derivatives liquidity protocol.',\n  recommendedInjectedWallets: [\n    { name: 'MetaMask', url: 'https://metamask.io' },\n    { name: 'Brave Wallet', url: 'https://brave.com/wallet' },\n  ],\n  gettingStartedGuide: 'https://synthetix.io',\n  explore: 'https://blog.synthetix.io',\n};\nexport const onboard = init({\n  connect: {\n    autoConnectLastWallet: true,\n    autoConnectAllPreviousWallet: true,\n  },\n  wallets: [\n    metamaskSDKWallet,\n    coinbaseModule(),\n    injectedModule({\n      displayUnavailable: [ProviderLabel.MetaMask, ProviderLabel.Trust],\n    }),\n    trezorModule({\n      appUrl: 'https://liquidity.synthetix.eth.limo',\n      email: 'info@synthetix.io',\n    }),\n    ledgerModule({\n      projectId: 'd6eac005846a1c3be1f8eea3a294eed9',\n      walletConnectVersion: 2,\n    }),\n    walletConnectModule({\n      version: 2,\n      projectId: 'd6eac005846a1c3be1f8eea3a294eed9',\n      dappUrl: 'liquidity.synthetix.eth.limo',\n    }),\n    gnosisModule(),\n  ],\n  chains: [\n    {\n      id: 42161,\n      token: 'ETH',\n      label: 'Arbitrum One',\n      rpcUrl: `wss://arbitrum-mainnet.infura.io/ws/v3/${process.env.INFURA_KEY}`,\n      publicRpcUrl: 'https:8//arb1.arbitrum.io/rpc',\n    },\n    {\n      id: 421614,\n      token: 'ETH',\n      label: 'Arbitrum Sepolia',\n      rpcUrl: `wss://arbitrum-sepolia.infura.io/ws/v3/${process.env.INFURA_KEY}`,\n      publicRpcUrl: 'https://sepolia-rollup.arbitrum.io/rpc',\n    },\n    {\n      id: 8453,\n      token: 'ETH',\n      label: 'Base',\n      rpcUrl: `wss://base.infura.io/ws/v3/${process.env.INFURA_KEY}`,\n      publicRpcUrl: 'https://mainnet.base.org',\n    },\n    {\n      id: 84532,\n      token: 'ETH',\n      label: 'Base Sepolia',\n      rpcUrl: `wss://base-sepolia.infura.io/ws/v3/${process.env.INFURA_KEY}`,\n      publicRpcUrl: 'https://sepolia.base.org',\n    },\n  ],\n  appMetadata,\n  accountCenter: {\n    desktop: {\n      enabled: false,\n    },\n    mobile: {\n      enabled: false,\n    },\n  },\n  notify: {\n    enabled: true,\n  },\n});\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      refetchInterval: false, //  if queries needs refetching we should be explicit about it, given erc7412\n      staleTime: 5 * 60 * 1000,\n      gcTime: 60 * 60 * 1000, // 1h\n      refetchOnWindowFocus: false,\n      throwOnError: (queryError) => {\n        console.error({ queryError });\n        return false;\n      },\n    },\n    mutations: {\n      retry: false,\n      throwOnError: (mutationError) => {\n        console.error({ mutationError });\n        return false;\n      },\n    },\n  },\n});\n\nwindow.$ethers = ethers;\n\nfunction useDarkColors() {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  useEffect(() => {\n    if (colorMode === 'light') {\n      toggleColorMode();\n    }\n  }, [colorMode, toggleColorMode]);\n  return null;\n}\n\ndeclare global {\n  var $ethers: any;\n  var $parseErrorData: (data: string) => void;\n  var $provider: ethers.providers.Web3Provider;\n  var $signer: ethers.Signer;\n  var $tx: ethers.ContractTransaction[];\n  var $txResult: ethers.ContractReceipt[];\n}\n\nfunction Layout() {\n  return (\n    <Flex as=\"main\" minHeight=\"100vh\" flexDirection=\"column\" bg=\"navy.900\" gap={10}>\n      <Flex bg=\"navy.700\" borderBottomWidth={1} borderBottomColor=\"gray.900\">\n        <Container as={Flex} maxW=\"1236px\" py={3} px={10} minHeight=\"72px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Link\n            to={{\n              pathname: '/',\n              search: location.search,\n            }}\n            as={RouterLink}\n            py={4}\n          >\n            <img src={Logo} alt=\"Synthetix\" />\n          </Link>\n          <Link\n            to={{\n              pathname: '/perps',\n              search: location.search,\n            }}\n            as={RouterLink}\n            py={4}\n          >\n            Perps\n          </Link>\n          <Link\n            to={{\n              pathname: '/perps-app',\n              search: location.search,\n            }}\n            as={RouterLink}\n            py={4}\n          >\n            Perps App\n          </Link>\n          <Flex gap={3} flexWrap=\"wrap-reverse\" justifyContent=\"center\" alignItems=\"center\">\n            <UserMenu />\n            <ChainMenu />\n          </Flex>\n        </Container>\n      </Flex>\n\n      <Flex bg=\"navy.900\" flex={1}>\n        <Container as={Flex} maxW=\"1236px\" py={3} px={10}>\n          <Outlet />\n        </Container>\n      </Flex>\n\n      <Flex bg=\"navy.700\" borderTopWidth={1} borderTopColor=\"gray.900\">\n        <Container as={Flex} maxW=\"1236px\" py={3} px={10} height=\"72px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <img src={LogoIcon} alt=\"Synthetix\" />\n          <Flex alignItems=\"center\" gap={2}>\n            <Link href=\"https://discord.com/invite/synthetix\" target=\"_blank\">\n              <img src={DiscordIcon} alt=\"Synthetix Discord\" />\n            </Link>\n            <Link href=\"https://x.com/synthetix_io\" target=\"_blank\">\n              <img src={XIcon} alt=\"Synthetix Discord\" />\n            </Link>\n            <Link href=\"https://github.com/Synthetixio/\" target=\"_blank\">\n              <img src={GithubIcon} alt=\"Synthetix Discord\" />\n            </Link>\n            <Link href=\"https://warpcast.com/~/channel/synthetix\" target=\"_blank\">\n              <img src={WarpcastIcon} alt=\"Synthetix Discord\" />\n            </Link>\n            <Link href=\"https://www.youtube.com/@synthetix.v3\" target=\"_blank\">\n              <img src={YoutubeIcon} alt=\"Synthetix Discord\" />\n            </Link>\n          </Flex>\n        </Container>\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction Router() {\n  useDarkColors();\n\n  const { onClose } = useDisclosure();\n  React.useEffect(() => {\n    onClose();\n  }, [onClose]);\n\n  const [{ wallet }] = useConnectWallet();\n  if (wallet?.provider && wallet?.accounts?.[0]?.address) {\n    window.$provider = new ethers.providers.Web3Provider(wallet.provider);\n    window.$signer = window.$provider.getSigner(wallet?.accounts?.[0]?.address);\n  }\n\n  const errorParser = useErrorParser();\n  window.$parseErrorData = (data) => {\n    errorParser(Object.assign(new Error('OMFG'), { data }));\n  };\n\n  // Initial account pre-selection\n  const [params, setParams] = useParams();\n  const { data: accounts } = useAccounts();\n  React.useEffect(() => {\n    if (!accounts) {\n      return;\n    }\n    if (!('accountId' in params) && accounts.length >= 1) {\n      const [firstAccount] = accounts;\n      setParams({ ...params, accountId: firstAccount.toHexString() });\n      return;\n    }\n    if ('accountId' in params && accounts.length < 1) {\n      const { accountId: _accountId, ...newParams } = params;\n      setParams(newParams);\n      return;\n    }\n    if ('accountId' in params && accounts.length >= 1) {\n      const accountId = ethers.BigNumber.from(params.accountId);\n      if (!accounts.find((id) => id.eq(accountId))) {\n        const [firstAccount] = accounts;\n        setParams({ ...params, accountId: firstAccount.toHexString() });\n        return;\n      }\n    }\n  }, [params?.accountId, accounts, params, setParams]);\n\n  const [{ connectedChain }] = useSetChain();\n  const { setChainId } = useSynthetix();\n  React.useEffect(() => {\n    if (connectedChain?.id) {\n      setChainId(Number.parseInt(connectedChain?.id, 16));\n    }\n  }, [connectedChain?.id, setChainId]);\n\n  return (\n    <Routes>\n      <Route path=\"/perps-app\" element={<PerpsApp />} />\n      <Route element={<Layout />}>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/perps\" element={<Perps />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  );\n}\n\nexport function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {/* <QueryClientProvider client={queryClient} persistOptions={{ persister: createSyncStoragePersister({ storage: window.localStorage }) }}>*/}\n      <Web3OnboardProvider web3Onboard={onboard}>\n        <SynthetixProvider chainId={42161} preset=\"main\" queryClient={queryClient}>\n          <ChakraProvider theme={theme}>\n            <HashRouter>\n              <Router />\n              <TermsModal defaultOpen={window.sessionStorage.getItem('TERMS_CONDITIONS_ACCEPTED') !== 'true'} />\n            </HashRouter>\n            <ReactQueryDevtools />\n            <Fonts />\n          </ChakraProvider>\n        </SynthetixProvider>\n      </Web3OnboardProvider>\n    </QueryClientProvider>\n  );\n}\n","import ReactDOM from 'react-dom/client';\nimport { App } from './App';\n\nconst container = document.querySelector('#app');\n\nexport async function bootstrap() {\n  if (!container) {\n    throw new Error('Container #app does not exist');\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    const { ethers } = await import('ethers');\n    function number(obj: any) {\n      if (obj.eq(ethers.constants.MaxUint256)) {\n        return 'MaxUint256';\n      }\n      if (obj.eq(ethers.constants.MaxInt256)) {\n        return 'MaxInt256';\n      }\n      if (obj.abs().gt(1e10)) {\n        // Assuming everything bigger than 1e10 is a wei\n        return `wei ${Number.parseFloat(ethers.utils.formatEther(`${obj}`))}`;\n      }\n      return Number.parseFloat(obj.toString());\n    }\n\n    // @ts-ignore\n    window.devtoolsFormatters = window.devtoolsFormatters ?? [];\n    // @ts-ignore\n    window.devtoolsFormatters.push({\n      header: (obj: any) => {\n        if (obj instanceof ethers.BigNumber) {\n          return [\n            'div',\n            { style: 'color: #f33' },\n            ['span', {}, 'BigNumber('],\n            ['span', { style: 'color: #ff3' }, number(obj)],\n            ['span', {}, ' '],\n            ['span', { style: 'color: #3f3' }, obj.toHexString()],\n            ['span', {}, ')'],\n          ];\n        }\n        return null;\n      },\n      hasBody: () => false,\n    });\n  }\n\n  const root = ReactDOM.createRoot(container);\n  root.render(<App />);\n}\n"],"names":["sortObject","params","Object","fromEntries","entries","sort","a","b","localeCompare","makeParams","newParams","createSearchParams","cleaned","filter","value","undefined","cleanObject","useParams","searchParams","setSearchParams","useSearchParams","React","Array","from","searchParamsToObject","ChainMenu","chains","connectedChain","setChain","useSetChain","chainId","setChainId","useSynthetix","chain","find","Number","parseInt","id","_jsxs","Menu","children","_jsx","MenuButton","as","Button","variant","rightIcon","ChevronDownIcon","label","MenuList","length","_Fragment","MenuOptionGroup","title","type","defaultValue","onChange","nextChain","nextChainId","map","MenuItemOption","Fonts","Global","styles","parseAmount","decimals","ethers","filteredInput","replace","trim","renderAmount","amount","token","console","log","eq","symbol","float","parseFloat","Math","abs","toFixed","floatMillie","floatMicro","floatNano","floatPico","async","fetchAccountAvailableCollateral","wallet","CoreProxyContract","accountId","tokenAddress","provider","CoreProxy","address","abi","time","accountAvailableCollateral","getAccountAvailableCollateral","timeEnd","useAccountAvailableCollateral","errorParser","useErrorParser","useConnectWallet","data","useImportContract","useQuery","enabled","Boolean","queryKey","toHexString","queryFn","throwOnError","error","select","useAllPriceFeeds","extras","useImportExtras","key","String","startsWith","endsWith","staleTime","useProvider","useAccounts","walletAddress","accounts","AccountProxyContract","ownerAddress","AccountProxy","numberOfAccountTokens","balanceOf","accountIndexes","toNumber","keys","Promise","all","i","tokenOfOwnerByIndex","useSelectedAccountId","useCollateralTokens","tokens","useImportCollateralTokens","depositingEnabled","issuanceRatioD18","liquidationRatioD18","liquidationRewardD18","minDelegationD18","rest","useSelectedCollateralType","collateralTokens","collateralType","pools","useSelectedPoolId","poolId","useBurnUsd","onSuccess","systemToken","useImportSystemToken","priceIds","MulticallContract","PythERC7412WrapperContract","queryClient","useQueryClient","useMutation","retry","mutationFn","burnUsdAmount","Error","freshPriceUpdateTxn","fetchPriceUpdateTxn","freshAccountAvailableUsd","gte","priceUpdateTxn","CoreProxyInterface","MulticallInterface","burnUsdTxnArgs","burnUsdTxn","target","callData","encodeFunctionData","requireSuccess","signer","getSigner","multicallTxn","to","tx","sendTransaction","window","$tx","push","txResult","wait","$txResult","fetchBurnUsdWithPriceUpdate","burnUsd","fetchBurnUsd","priceUpdated","then","invalidateQueries","p","slice","usePositionDebt","usePriceUpdateTxn","ok","setTimeout","getPositionDebtTxn","response","call","decodedMulticall","decodeFunctionResult","returnData","getPositionDebtTxnData","debt","fetchPositionDebtWithPriceUpdate","positionDebt","callStatic","getPositionDebt","fetchPositionDebt","retryDelay","attempt","BurnUsd","accountAvailableUsd","setValue","parsedAmount","Stack","gap","method","action","onSubmit","e","preventDefault","mutate","Heading","color","fontSize","lineHeight","Text","ml","fontWeight","isError","Alert","status","maxWidth","AlertIcon","AlertTitle","message","FormControl","InputGroup","Input","required","placeholder","reset","isLoading","isPending","isDisabled","gt","FormHelperText","CollateralTokens","setParams","selectedCollateralType","flexDirection","onClick","fetchPositionCollateral","getPositionCollateral","useDelegateCollateral","delegateAmountDelta","freshAccountAvailableCollateral","freshPositionCollateral","delegateAmount","add","delegateCollateralTxnArgs","delegateCollateralTxn","delegateCollateralWithPriceUpdate","delegateCollateral","usePositionCollateral","positionCollateral","Delegate","delegate","fetchTokenAllowance","spenderAddress","allowance","fetchTokenBalance","useDeposit","depositAmount","lte","freshBalance","lt","freshAllowance","Token","approve","approveToken","sub","deposit","depositCollateral","useTokenAllowance","refetchInterval","useTokenBalance","balance","Deposit","currentBalance","currentAllowance","DepositUsd","useCollateralPrice","getCollateralPriceTxn","blockNumber","getBlockNumber","block","getBlock","now","floor","Date","getTime","getCollateralPriceTxnData","collateralPrice","fetchCollateralPriceWithPriceUpdate","getCollateralPrice","fetchCollateralPrice","useMintUsd","mintUsdAmount","mintUsdTxnArgs","mintUsdTxn","fetchMintUsdWithPriceUpdate","mintUsd","fetchMintUsd","MintUsd","readableDebt","maxDebt","mul","div","ClaimRewards","rewardsDistributor","claim","rewardsAmount","availableRewards","claimRewards","claimRewardsTxnArgs","payoutToken","Rewards","rewardsDistributors","useImportRewardsDistributors","rd","toLowerCase","Undelegate","undelegate","useWithdraw","withdrawAmount","withdrawCollateralTxnArgs","withdrawCollateralTxn","fetchWithdrawCollateralWithPriceUpdate","withdraw","fetchWithdrawCollateral","useWithdrawTimer","accountTimeoutWithdraw","getConfigUint","useAccountTimeoutWithdraw","accountLastInteraction","getAccountLastInteraction","useAccountLastInteraction","unlockUnixtime","h","setH","m","setM","s","setS","interval","setInterval","unlockTimeout","hours","max","minutes","seconds","clearInterval","WithdrawCollateral","withdrawTimer","WithdrawUsd","HomePage","Flex","flexDir","mb","Helmet","name","content","NotFoundPage","Head","height","direction","position","alignItems","justifyContent","flex","Link","NavLink","PriceChart","Box","w","AdvancedRealTimeChart","theme","autosize","toUpperCase","renderAccountId","hex","usePerpsAccounts","PerpsAccountProxyContract","PerpsAccountProxy","useCreatePerpsAccount","PerpsMarketProxyContract","PerpsMarketProxy","event","events","args","toString","setQueryData","oldData","concat","PerpsUserMenu","connect","disconnect","isChainSupported","some","createAccount","MenuItem","navigator","clipboard","writeText","MenuDivider","Trade","longShort","setLongShort","account","setAccount","collateral","setCollateral","leverage","setLeverage","market","setMarket","border","borderColor","borderRadius","FormLabel","Select","RadioGroup","Radio","InputLeftAddon","toLocaleString","InputRightAddon","handleSubmit","Stats","bg","padding","Icon","viewBox","mr","fill","d","size","useAccountPositionMarketIds","PerpsProxy","accountPositionMarketIds","getAccountOpenPositions","fetchAccountPositionMarketIds","marketIds","marketId","fetchAccountPosition","getOpenPosition","Positions","positions","useAccountPositions","TableContainer","Table","TableCaption","Thead","Tr","Th","isNumeric","Tbody","Td","Tfoot","Perps","LanguageSwitcher","i18n","useTranslation","currentLanguage","setCurrentLanguage","useState","language","useEffect","handleLanguageChange","lng","on","off","changeLanguage","catch","err","i18next","initReactI18next","init","resources","ua","translation","AccountHandler","WalletConnector","connecting","t","disabled","CreateAccount","ChainHandler","PerpsAppNavbar","minH","py","base","px","borderBottom","borderStyle","useColorModeValue","align","justify","md","textAlign","useBreakpointValue","fontFamily","spacing","PerpsApp","WebApp","showAlert","ready","gradients","grey","dark","orange","defaultProps","colorScheme","variants","solid","defineStyle","props","c","mode","_hover","_disabled","_active","bgGradient","background","hoverBg","activeBg","outline","ghost","extendTheme","useSystemColorMode","initialColorMode","colors","gray","red","yellow","green","blue","cyan","purple","pink","navy","success","warning","shadows","fonts","heading","body","display","mono","components","Popover","responsive","popper","width","focusBorderColor","errorBorderColor","iconColor","NumberInput","container","borderInlineStartColor","icon","Textarea","Skeleton","startColor","endColor","Checkbox","baseStyle","control","_checked","_invalid","Badge","subtle","boxShadow","Tag","Accordion","borderWidth","Progress","filledTrack","track","Tabs","tab","_selected","Tooltip","Switch","Spinner","parts","button","span","list","mt","bgColor","item","_first","borderTopLeftRadius","borderTopRightRadius","_last","borderBottomLeftRadius","borderBottomRightRadius","_focus","textStyles","lg","sizes","min","full","xs","sm","xl","global","TermsModal","defaultOpen","isOpen","setOpen","setEnabled","Modal","onClose","ModalOverlay","ModalContent","pt","pb","ModalHeader","ModalBody","onScroll","currentTarget","scrollTop","scrollHeight","offsetHeight","my","overflow","overflowX","sx","backgroundColor","UnorderedList","ListItem","href","_focusVisible","ReactRouterLink","mx","sessionStorage","setItem","JSON","stringify","UserMenu","useCreateAccount","metamaskSDKWallet","metamaskSDK","options","extensionOnly","dappMetadata","appMetadata","logo","description","recommendedInjectedWallets","url","gettingStartedGuide","explore","onboard","autoConnectLastWallet","autoConnectAllPreviousWallet","wallets","coinbaseModule","injectedModule","displayUnavailable","ProviderLabel","MetaMask","Trust","trezorModule","appUrl","email","ledgerModule","projectId","walletConnectVersion","walletConnectModule","version","dappUrl","gnosisModule","rpcUrl","publicRpcUrl","accountCenter","desktop","mobile","notify","QueryClient","defaultOptions","queries","gcTime","refetchOnWindowFocus","queryError","mutations","mutationError","Layout","minHeight","borderBottomWidth","borderBottomColor","Container","maxW","pathname","search","location","RouterLink","src","Logo","alt","flexWrap","Outlet","borderTopWidth","borderTopColor","LogoIcon","DiscordIcon","XIcon","GithubIcon","WarpcastIcon","YoutubeIcon","Router","colorMode","toggleColorMode","useColorMode","useDarkColors","useDisclosure","$provider","$signer","$parseErrorData","assign","firstAccount","_accountId","Routes","Route","path","element","App","QueryClientProvider","client","Web3OnboardProvider","web3Onboard","SynthetixProvider","preset","ChakraProvider","HashRouter","getItem","ReactQueryDevtools","$ethers","document","querySelector","bootstrap","ReactDOM","render"],"sourceRoot":""}