{"version":3,"file":"chunk/1763.313028cb.js","mappings":"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","sources":["webpack://@snx-v3/liquidity/../node_modules/viem/_esm/errors/ccip.js","webpack://@snx-v3/liquidity/../node_modules/viem/_esm/utils/ccip.js","webpack://@snx-v3/liquidity/../node_modules/viem/_esm/utils/address/isAddressEqual.js"],"sourcesContent":["import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n    constructor({ callbackSelector, cause, data, extraData, sender, urls, }) {\n        super(cause.shortMessage ||\n            'An error occurred while fetching for an offchain result.', {\n            cause,\n            metaMessages: [\n                ...(cause.metaMessages || []),\n                cause.metaMessages?.length ? '' : [],\n                'Offchain Gateway Call:',\n                urls && [\n                    '  Gateway URL(s):',\n                    ...urls.map((url) => `    ${getUrl(url)}`),\n                ],\n                `  Sender: ${sender}`,\n                `  Data: ${data}`,\n                `  Callback selector: ${callbackSelector}`,\n                `  Extra data: ${extraData}`,\n            ].flat(),\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupError'\n        });\n    }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n    constructor({ result, url }) {\n        super('Offchain gateway response is malformed. Response data must be a hex value.', {\n            metaMessages: [\n                `Gateway URL: ${getUrl(url)}`,\n                `Response: ${stringify(result)}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupResponseMalformedError'\n        });\n    }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n    constructor({ sender, to }) {\n        super('Reverted sender address does not match target contract address (`to`).', {\n            metaMessages: [\n                `Contract address: ${to}`,\n                `OffchainLookup sender address: ${sender}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'OffchainLookupSenderMismatchError'\n        });\n    }\n}\n//# sourceMappingURL=ccip.js.map","import { call } from '../actions/public/call.js';\nimport { OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError, } from '../errors/ccip.js';\nimport { HttpRequestError } from '../errors/request.js';\nimport { decodeErrorResult } from './abi/decodeErrorResult.js';\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js';\nimport { isAddressEqual } from './address/isAddressEqual.js';\nimport { concat } from './data/concat.js';\nimport { isHex } from './data/isHex.js';\nimport { stringify } from './stringify.js';\nexport const offchainLookupSignature = '0x556f1830';\nexport const offchainLookupAbiItem = {\n    name: 'OffchainLookup',\n    type: 'error',\n    inputs: [\n        {\n            name: 'sender',\n            type: 'address',\n        },\n        {\n            name: 'urls',\n            type: 'string[]',\n        },\n        {\n            name: 'callData',\n            type: 'bytes',\n        },\n        {\n            name: 'callbackFunction',\n            type: 'bytes4',\n        },\n        {\n            name: 'extraData',\n            type: 'bytes',\n        },\n    ],\n};\nexport async function offchainLookup(client, { blockNumber, blockTag, data, to, }) {\n    const { args } = decodeErrorResult({\n        data,\n        abi: [offchainLookupAbiItem],\n    });\n    const [sender, urls, callData, callbackSelector, extraData] = args;\n    const { ccipRead } = client;\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === 'function'\n        ? ccipRead.request\n        : ccipRequest;\n    try {\n        if (!isAddressEqual(to, sender))\n            throw new OffchainLookupSenderMismatchError({ sender, to });\n        const result = await ccipRequest_({ data: callData, sender, urls });\n        const { data: data_ } = await call(client, {\n            blockNumber,\n            blockTag,\n            data: concat([\n                callbackSelector,\n                encodeAbiParameters([{ type: 'bytes' }, { type: 'bytes' }], [result, extraData]),\n            ]),\n            to,\n        });\n        return data_;\n    }\n    catch (err) {\n        throw new OffchainLookupError({\n            callbackSelector,\n            cause: err,\n            data,\n            extraData,\n            sender,\n            urls,\n        });\n    }\n}\nexport async function ccipRequest({ data, sender, urls, }) {\n    let error = new Error('An unknown error occurred.');\n    for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        const method = url.includes('{data}') ? 'GET' : 'POST';\n        const body = method === 'POST' ? { data, sender } : undefined;\n        try {\n            const response = await fetch(url.replace('{sender}', sender).replace('{data}', data), {\n                body: JSON.stringify(body),\n                method,\n            });\n            let result;\n            if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n                result = (await response.json()).data;\n            }\n            else {\n                result = (await response.text());\n            }\n            if (!response.ok) {\n                error = new HttpRequestError({\n                    body,\n                    details: result?.error\n                        ? stringify(result.error)\n                        : response.statusText,\n                    headers: response.headers,\n                    status: response.status,\n                    url,\n                });\n                continue;\n            }\n            if (!isHex(result)) {\n                error = new OffchainLookupResponseMalformedError({\n                    result,\n                    url,\n                });\n                continue;\n            }\n            return result;\n        }\n        catch (err) {\n            error = new HttpRequestError({\n                body,\n                details: err.message,\n                url,\n            });\n        }\n    }\n    throw error;\n}\n//# sourceMappingURL=ccip.js.map","import { InvalidAddressError, } from '../../errors/address.js';\nimport { isAddress } from './isAddress.js';\nexport function isAddressEqual(a, b) {\n    if (!isAddress(a, { strict: false }))\n        throw new InvalidAddressError({ address: a });\n    if (!isAddress(b, { strict: false }))\n        throw new InvalidAddressError({ address: b });\n    return a.toLowerCase() === b.toLowerCase();\n}\n//# sourceMappingURL=isAddressEqual.js.map"],"names":["OffchainLookupError","BaseError","constructor","callbackSelector","cause","data","extraData","sender","urls","super","shortMessage","metaMessages","length","map","url","getUrl","flat","Object","defineProperty","this","enumerable","configurable","writable","value","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","async","offchainLookup","client","blockNumber","blockTag","args","decodeErrorResult","abi","callData","ccipRead","ccipRequest_","request","ccipRequest","a","b","isAddress","strict","InvalidAddressError","address","toLowerCase","isAddressEqual","data_","call","concat","encodeAbiParameters","err","error","Error","i","method","includes","body","undefined","response","fetch","replace","JSON","headers","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}